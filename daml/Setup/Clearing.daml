module Setup.Clearing where

import Daml.Script

import Tests.Utils

import Marketplace.Custodian
import Marketplace.Exchange
import Marketplace.ExchangeParticipant
import Marketplace.Investor
import Marketplace.Issuer
import Marketplace.Operator
import Marketplace.Token
import Marketplace.Utils

import Marketplace.Clearing
import Marketplace.Derivative
import Marketplace.CentralCounterparty
import Marketplace.CentralCounterpartyCustomer

import Marketplace.Trading
import Marketplace.Transfer

import DA.Finance.Asset
import DA.Finance.Types

import DA.Date
import DA.Time
import DA.Foldable (forA_)
import DA.Optional

import DA.Set

data LedgerParties = LedgerParties with
  userAdmin : Party -- ^DABL uses 'UserAdmin' for 'Operator'
  public    : Party
  custodian : Party
  exchange  : Party
  issuer    : Party
  alice     : Party
  bob       : Party
  carl      : Party
  dana      : Party
  ccp       : Party
    deriving (Eq, Show)

allocateParties : Script LedgerParties
allocateParties = do
  operator <- allocatePartyWithHint "Operator" (PartyIdHint "Operator")
  issuer <- allocatePartyWithHint "Issuer" (PartyIdHint "Issuer")
  custodian <- allocatePartyWithHint "Custodian" (PartyIdHint "Custodian")
  exchange <- allocatePartyWithHint "Exchange" (PartyIdHint "Exchange")
  broker <- allocatePartyWithHint "Broker" (PartyIdHint "Broker")
  ccp <- allocatePartyWithHint "Ccp" (PartyIdHint "Ccp")
  public <- allocatePartyWithHint "Public" (PartyIdHint "Public")
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  carl <- allocatePartyWithHint "Carl" (PartyIdHint "Carl")
  dana <- allocatePartyWithHint "Dana" (PartyIdHint "Dana")

  return $ LedgerParties operator public custodian exchange issuer alice bob carl dana ccp

runSetupClearing : LedgerParties -> Script ()
runSetupClearing lp = doSetupClearing False lp

setupClearing : Script ()
setupClearing = allocateParties >>= (doSetupClearing False)

doSetupClearing : Bool -> LedgerParties -> Script ()
doSetupClearing wt lp@(LedgerParties operator public custodian exchange issuer alice bob carl dana ccp) = do

  time <- getTime
  -- Onboard and create relationships
  handleOnboarding wt lp

  -- onbard investors
  onboardInvestor wt lp alice "Alice the Investor"
  onboardInvestor wt lp bob "Bob the Investor"
  onboardInvestor wt lp carl "Carl the Investor"
  onboardInvestor wt lp dana "Dana the Investor"

  let observers = [operator, public, custodian, exchange, issuer, ccp, alice, bob, carl, dana]

  usdTokenId <- createToken operator issuer "USD" "US Dollars" 2 observers
  h2oTokenId <- createToken operator issuer "H2O" "H2O" 2 observers

  h2oQ121DerId <- createSimpleDerivative operator issuer "H2OQ121" "H2O" "H2O Q1 21" 6 1 "h2o" h2oTokenId observers
  h2oQ221DerId <- createSimpleDerivative operator issuer "H2OQ221" "H2O" "H2O Q2 21" 6 1 "h2o" h2oTokenId observers
  h2oQ321DerId <- createSimpleDerivative operator issuer "H2OQ321" "H2O" "H2O Q3 21" 6 1 "h2o" h2oTokenId observers
  h2oQ421DerId <- createSimpleDerivative operator issuer "H2OQ421" "H2O" "H2O Q4 21" 6 1 "h2o" h2oTokenId observers

  (q121usdId, q121usdPair) <- createMarketPair exchange operator h2oQ121DerId DerivativeAsset usdTokenId TokenAsset ccp
  (q221usdId, q221usdPair) <- createMarketPair exchange operator h2oQ221DerId DerivativeAsset usdTokenId TokenAsset ccp
  (q321q421Id, q321q421Pair) <- createMarketPair exchange operator h2oQ321DerId DerivativeAsset h2oQ421DerId DerivativeAsset ccp

  let setupAccount = setupInvestorAccount wt lp usdTokenId 100_000.0  10_000.0 3000.0

  aliceAccts <- setupAccount alice
  bobAccts   <- setupAccount bob
  carlAccts  <- setupAccount carl
  danaAccts  <- setupAccount dana

  -- ccp `submit` exerciseByKeyCmd @CCPCustomer (ccp,operator,alice) CCPCustomer_PerformMarginFill
  --   with amount = 100.0

  let tradePairs = [ (alice, bob,   q121usdId, q121usdPair, 50.0,  1000.0)
                   , (alice, carl,  q221usdId, q221usdPair, 10.0,  3000.0)
                   , (alice, dana,  q121usdId, q221usdPair, 34.0,  5044.0)
                   , (carl,  bob,   q221usdId, q221usdPair, 10.0,  5044.0)
                   , (dana,  alice, q121usdId, q121usdPair, 10.0,  100.0)
                   , (bob,   dana,  q121usdId, q121usdPair, 456.0, 1434.0) ]

  let trades = zipWith (createTrade ccp exchange) [1..(length tradePairs)] tradePairs

  tradeCids <- mapA (\t -> exchange `submit` createCmd t) trades
  awaitOrDo' wt 0.5 "novating trades"
    $ forA_ tradeCids (\tCid -> ccp `submit` exerciseByKeyCmd @CCP (operator, ccp)
         CCP_NovateClearedTrade with clearedTradeCid = tCid)

  -- let fairValuePairs = [ (h2oQ121DerId, 1000.0)
  --                      , (h2oQ221DerId, 1500.0) ]
  --
  -- upTo <- getTime
  -- forA_ fairValuePairs $ \(derId, price) -> void $ makeFairValue operator exchange derId price usdTokenId upTo observers


runSetupAccounts : LedgerParties -> Script ()
runSetupAccounts = doSetupAccounts False

doSetupAccounts : Bool -> LedgerParties -> Script ()
doSetupAccounts wt lp@(LedgerParties operator public custodian exchange issuer alice bob carl dana ccp) = do

  time <- getTime
  -- Onboard and create relationships
  handleOnboarding wt lp

  -- onbard investors
  onboardInvestor wt lp alice "Alice the Investor"
  onboardInvestor wt lp bob "Bob the Investor"
  onboardInvestor wt lp carl "Carl the Investor"
  onboardInvestor wt lp dana "Dana the Investor"

  let observers = [operator, public, custodian, exchange, issuer, ccp, alice, bob, carl, dana]

  usdTokenId <- createToken operator issuer "USD" "US Dollars" 2 observers
  h2oTokenId <- createToken operator issuer "H2O" "H2O" 2 observers

  let setupAccount = setupInvestorAccount wt lp usdTokenId 100_000.0 10_000.0 3000.0

  aliceAccts <- setupAccount alice
  bobAccts <- setupAccount bob
  carlAccts <- setupAccount carl
  danaAccts <- setupAccount dana

  return ()


testClearingResolution : Script ()
testClearingResolution = allocateParties >>= doTestClearingResolution False

doTestClearingResolution : Bool -> LedgerParties -> Script ()
doTestClearingResolution wt lp@(LedgerParties operator public custodian exchange issuer alice bob carl dana ccp) = do
  debug "onboarding..."
  -- doSetupClearing lp
  handleOnboarding wt lp
  let observers = [operator, public, custodian, exchange, issuer, ccp, alice, bob, carl, dana]
  usdTokenId <- createToken operator issuer "USD" "US Dollars" 2 observers

  -- onbard investors
  onboardInvestor wt lp alice "Alice the Investor"
  onboardInvestor wt lp bob "Bob the Investor"
  time <- getTime

  (optAliceDepositCid,optBobDepositCid) <- awaitOrDo wt 0.25 "creating deposits..."
    (do
      createClearingDeposit wt lp alice usdTokenId 5000.0
      createClearingDeposit wt lp bob usdTokenId 5000.0
      return (None,None))
    (do
      aliceDepositCid <- createClearingDeposit wt lp alice usdTokenId 5000.0
      bobDepositCid <- createClearingDeposit wt lp bob usdTokenId 5000.0
      return (aliceDepositCid,bobDepositCid))

  debug "creating margin calculation..."
  mcCid <- ccp `submit` createCmd MarginCalculation with
    ccp
    customer = alice
    accountId = usdTokenId
    currency = "USD"
    targetAmount = 1200.0
    margin = 1000.0
    collateralValue = 1000.0
    calculationTime = time
    calculationId = "2134820934"

  awaitOrDo' wt 0.25 "performing margin fill"
    $ do
      debug "alice cid"
      ccp `submit` exerciseByKeyCmd @CCPCustomer (ccp,operator,alice) CCPCustomer_PerformMarginFill
        with clearingDepositCids = [fromSomeNote "alice cid" $ optAliceDepositCid], targetAmount = 4999.0, calculationCid = mcCid

  mcCid <- ccp `submit` createCmd MarginCalculation with
    ccp
    customer = bob
    accountId = usdTokenId
    currency = "USD"
    targetAmount = 1000.0
    margin = 1000.0
    collateralValue = 1000.0
    calculationTime = time
    calculationId = "2134820934"

  awaitOrDo' wt 0.25 "performing margin fill"
    $ do
      debug "bob cid"
      ccp `submit` exerciseByKeyCmd @CCPCustomer (ccp,operator,bob) CCPCustomer_PerformMarginFill
         with clearingDepositCids = [fromSomeNote "bob cid" $ optBobDepositCid], targetAmount = 1200.0, calculationCid = mcCid

  ccp `submit` createCmd MarkToMarketCalculation with
    ccp
    customer = alice
    accountId = usdTokenId
    currency = "USD"
    mtmAmount = 200.0
    calculationTime = time
    calculationId = "3098329048"

  ccp `submit` createCmd MarkToMarketCalculation with
    ccp
    customer = bob
    accountId = usdTokenId
    currency = "USD"
    mtmAmount = -200.0
    calculationTime = time
    calculationId = "120349834898"

  ccp `submit` createCmd MarkToMarketCalculation with
    ccp
    customer = bob
    accountId = usdTokenId
    currency = "USD"
    mtmAmount = -600.0
    calculationTime = time
    calculationId = "1223223232"

  ccp `submit` createCmd MarkToMarketCalculation with
    ccp
    customer = alice
    accountId = usdTokenId
    currency = "USD"
    mtmAmount = 600.0
    calculationTime = time
    calculationId = "34509823402938430498"

  ccp `submit` createCmd MarkToMarketCalculation with
    ccp
    customer = alice
    accountId = usdTokenId
    currency = "USD"
    mtmAmount = 9000.0
    calculationTime = time
    calculationId = "3sd4509823402938430498"

  return ()

makeFairValue : Party -> Party -> Id -> IdPair -> Decimal -> Id -> Time -> [Party] -> Script (ContractId FairValue)
makeFairValue operator exchange instrumentId pair price currency upTo observers = do
  timestamp <- getTime
  exchange `submit` createCmd FairValue with observers = fromList observers, ..

onboardInvestor : Bool -> LedgerParties -> Party -> Text-> Script ()
onboardInvestor wt lp investor name = do
  let title    = "default title"
      issuerID = "default issuerID"
      location = "default location"

  let operator  = lp.userAdmin
      custodian = lp.custodian
      exchange  = lp.exchange
      ccp       = lp.ccp

  -- register investor
  inviteCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardInvestor with investor = investor, ..
  investorCid <- investor `submit` exerciseCmd inviteCid InvestorInvitation_Accept with isPublic = True, ..

  -- establish relationship with custodian
  relationshipRequestCid <- investor `submit` exerciseCmd investorCid Investor_RequestCustodianRelationship with ..
  awaitOrDo' wt 0.25 "custodian relationship request approve"
    $ custodian `submit` exerciseCmd relationshipRequestCid CustodianRelationshipRequest_Approve

  -- become exchange participant
  (_, exchInviteCid) <- exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = investor
  investor `submit` exerciseCmd exchInviteCid ExchangeParticipantInvitation_Accept

  ccpInviteCid <- ccp `submit` exerciseByKeyCmd @CCP (operator, ccp) CCP_InviteCustomer with ccpCustomer = investor
  investor `submit` exerciseCmd ccpInviteCid CCPCustomerInvitation_Accept

  return ()

data InvestorAccounts = InvestorAccounts with
    iaCustodian : ContractId AssetDeposit
    iaClearing : Optional (ContractId AssetDeposit)
  deriving (Show,Eq)

setupInvestorAccount : Bool -> LedgerParties -> Id -> Decimal -> Decimal -> Decimal -> Party -> Script InvestorAccounts
setupInvestorAccount wt lp usdTokenId custodianAmount clearingAmount marginAmount investor = do

  let operator  = lp.userAdmin
      custodian = lp.custodian
      exchange  = lp.exchange
      ccp       = lp.ccp

  optClearingDeopsitCid <- createClearingDeposit wt lp investor usdTokenId clearingAmount

  time <- getTime
  -- > create margin account
  mcCid <- ccp `submit` createCmd MarginCalculation with
    ccp
    customer = investor
    accountId = usdTokenId
    currency = "USD"
    targetAmount = marginAmount
    margin = 1000.0
    collateralValue = 1000.0
    calculationTime = time
    calculationId = "2134820934"

  awaitOrDo' wt 0.25 "performing margin fill"
    $ do
      debug "filling optional margin"
      ccp `submit` exerciseByKeyCmd @CCPCustomer (ccp,operator,investor) CCPCustomer_PerformMarginFill
        with clearingDepositCids = [fromSomeNote "alice cid" $ optClearingDeopsitCid], targetAmount = marginAmount, calculationCid = mcCid

  -- > deposit more USD into custodian account
  custodianDepositCid <- custodian `submit` exerciseByKeyCmd @Custodian (operator, custodian) Custodian_CreateDeposit
      with tokenId = usdTokenId, depositQuantity = custodianAmount, beneficiary = investor

  return $ InvestorAccounts custodianDepositCid optClearingDeopsitCid

createClearingDeposit : Bool -> LedgerParties -> Party -> Id -> Decimal -> Script (Optional (ContractId AssetDeposit))
createClearingDeposit wt lp@LedgerParties{userAdmin = operator, custodian, ccp} investor usdTokenId amount = do
  -- > deposit USD into Custodian account
  depositCid <- custodian `submit` exerciseByKeyCmd @Custodian (operator, custodian) Custodian_CreateDeposit
      with tokenId = usdTokenId, depositQuantity = amount, beneficiary = investor

  -- > allocate deposit to CCP for Clearing Account
  transferRequestCid <- investor `submit` exerciseByKeyCmd @Investor (operator, investor) Investor_AllocateToProvider
      with depositCids = [depositCid], amount = amount, provider = ccp

  if wt
  then do
    sleep (decToRelTime 0.25)
    return None
  else do
    depositCid <- custodian `submit` exerciseCmd transferRequestCid DepositTransferRequest_Approve
    return $ Some depositCid

createToken : Party -> Party -> Text -> Text -> Int -> [Party] -> Script Id
createToken operator issuer name description quantityPrecision observers = do
  issuer `submit` exerciseByKeyCmd @Issuer (operator, issuer) Issuer_IssueToken with name, description, quantityPrecision, isPublic = True, observers
  return $ Id with signatories = fromList [ issuer ], label = name, version = 0

createSimpleDerivative : Party -> Party -> Text -> Text -> Text -> Int -> Int -> Text -> Id -> [Party] -> Script Id
createSimpleDerivative operator issuer prodSym prodCode description pricePrecision mult uom underlying observers = do
  let id = Id with signatories = fromList [ issuer ], label = prodSym, version = 0
  let derivative = Derivative with
        id
        pricePrecision
        description
        prodSym
        prodCode
        uuid = prodSym
        secType = FRA
        mmy = "YYYYMM"
        mult
        uom
        optionData = None
        underlying
        isPublic = True
        endDate = time (date 2020 Dec 15) 0 0 0
        observers = fromList observers

  issuer `submit` createCmd derivative
  return id

handleOnboarding : Bool -> LedgerParties -> Script ()
handleOnboarding wt lp@(LedgerParties operator public custodian exchange issuer alice bob carl dana ccp) = do
  let name = "default name"
      title = "default title"
      issuerID = "default issuerID"
      location = "default location"

  -- create operator
  operator `submit` createCmd Operator with ..

  -- onboard custodian
  custodianInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardCustodian with ..
  custodian `submit` exerciseCmd custodianInvCid CustodianInvitation_Accept with name = "Bank of Example", ..

  -- onboard issuers
  issuerInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardIssuer with ..
  issuer `submit` exerciseCmd issuerInvCid IssuerInvitation_Accept with name = "Issuer", ..

  -- oboard exchange
  exchangeInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardExchange with ..
  exchange `submit` exerciseCmd exchangeInvCid ExchangeInvitation_Accept with name = "Exberry Exchange", ..

  -- onboard ccp
  ccpInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardCCP with ccp = ccp, ..
  ccp `submit` exerciseCmd ccpInvCid CCPInvitation_Accept with name = "Baymarkets Clearinghouse", ..

  -- issuers establish a relationship with the custodian
  relationshipReqCid <- issuer `submit` exerciseByKeyCmd @Issuer (operator,issuer) Issuer_RequestCustodianRelationship with ..
  awaitOrDo' wt 0.25 "approving custodian relationship"
    $ custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve

  -- exchange establishes a relationship with the custodian
  relationshipReqCid <- exchange `submit` exerciseByKeyCmd @Exchange (operator,exchange) Exchange_RequestCustodianRelationship with ..
  awaitOrDo' wt 0.25 "approving custodian relationship request"
    $ custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve

  -- exchange establishes a relationship with the custodian
  relationshipReqCid <- exchange `submit` exerciseByKeyCmd @Exchange (operator,exchange) Exchange_RequestCCPRelationship with ccp = ccp, ..
  awaitOrDo' wt 0.25 "approving custodian relationship request"
    $ ccp `submit` exerciseCmd relationshipReqCid CCPExchangeRelationshipRequest_Approve

  -- ccp establishes relationship with the custodian
  relationshipReqCid <- ccp `submit` exerciseByKeyCmd @CCP (operator,ccp) CCP_RequestCustodianRelationship
  awaitOrDo' wt 0.25 " approving custodian relationship request..."
    $ do
      custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve


  return ()

createMarketPair : Party -> Party -> Id -> AssetType -> Id -> AssetType -> Party -> Script (Id, IdPair)
createMarketPair exchange operator baseTokenId baseType quoteTokenId quoteType ccp = do
  (pairCid,_) <- exchange `submit` exerciseByKeyCmd @Exchange (operator,exchange) Exchange_AddPair with
    minQuantity = 1.0
    maxQuantity = 100_000.0
    clearedMarket = True
    defaultCCP = Some ccp, ..
  Some pair <- queryContractId @MarketPair exchange pairCid
  return (pair.id, (baseTokenId, quoteTokenId))

createTrade : Party -> Party -> Int -> (Party, Party, Id, IdPair, Decimal, Decimal) -> ClearedTrade
createTrade ccp exchange currentId (buyer, seller, instrument, pair, quantity, price) = ClearedTrade with
      ccp = ccp
      exchange = exchange
      eventId = currentId + 50
      timeMatched = "1329834"
      instrument = instrument
      trackingNumber = currentId + 5000
      buyer = buyer
      buyerOrderId = currentId + 1000
      seller = seller
      sellerOrderId = currentId + 2000
      matchId = currentId
      executedQuantity = quantity
      executedPrice = price
      pair = pair
