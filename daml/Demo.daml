module Demo where

import Common
import Daml.Script
import DA.Finance.Asset (AssetCategorization(..), AssetDeposit, AssetDeposit_Split(..))
import DA.Finance.Types (Id(..), Asset(..))
import DA.Foldable
import DA.List (head)
import DA.Next.Set (fromList)
import qualified Marketplace.Custody as Custody
import Marketplace.Distribution.Distributor qualified as Distributor
import Marketplace.Distribution.Auction.Model qualified as Auction
import Marketplace.Distribution.Auction.Service qualified as Auction
import Marketplace.Distribution.Bidding.Model qualified as Bidding
import Marketplace.Distribution.Bidding.Service qualified as Bidding
-- import Marketplace.Settlement qualified as Settle
import qualified Marketplace.Trading.Service as TradingService
import qualified Marketplace.Trading.Order as Order
import qualified Marketplace.Trading.Listing as Listing

demo : Script ()
demo = do
  cr@CommonContracts{..} <- onboardCommon

  -- Assets
  let
    shareId = Id with signatories = fromList [ custodian ]; label = "JPM.N"; version = 0
    cashId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
    shareAsset = Asset with id = shareId; quantity = 2_000.0
    cashAsset = Asset with id = cashId; quantity = 140_000.0
    priceAsset = Asset with id = cashId; quantity = 100.0

  submit custodian do createCmd AssetCategorization with id = shareId; assetType = "Stock"; assetClass = "Equity"; observers = fromList [public]
  submit custodian do createCmd AssetCategorization with id = cashId; assetType = "Currency"; assetClass = "FX"; observers = fromList [public]

  alice <- onboardCustomer cr "Alice" shareAsset exchange

  creditAccountRequestCid <- submit alice.customer do exerciseCmd alice.custodyServiceCid Custody.RequestCreditAccount with accountId = alice.tradingAccountId; asset = cashAsset
  cashDepositCid <- submit custodian do exerciseCmd alice.custodyServiceCid Custody.CreditAccount with ..

  -- List a Security to trade
  (listingServiceCid, _) <- head <$> query @Listing.Service alice.customer
  let
    listingId = "JPMUSD"
    providerId = "JPMUSD"
    calendarId = "1"
    description = "JPMorgan Chase & Co."
    tradedAssetId = Id with signatories = fromList [ custodian ]; label = "JPM.N"; version = 0
    quotedAssetId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
    tradedAssetPrecision = 2
    quotedAssetPrecision = 2
    minimumTradableQuantity = 1.0
    maximumTradableQuantity = 1_000_000.0
    observers = [public]
  createListingRequestCid <- submit alice.customer do exerciseCmd listingServiceCid Listing.RequestCreateListing with ..
  listingCid <- submit exchange do exerciseCmd listingServiceCid Listing.CreateListing with ..

  let
    symbol = listingId
    limit price = Order.Limit with ..
    submitOrder party label side asset orderType depositCid = do
      let
        signatories = fromList [ party ]
        version = 0
        id = Id with ..
        timeInForce = Order.GTC
        details = Order.Details with ..
      submit party do exerciseByKeyCmd @TradingService.T (operator, exchange, party) TradingService.RequestCreateOrder with ..
  
  aliceShareDepositCids    <- submit alice.customer    do exerciseCmd alice.assetDepositCid AssetDeposit_Split with quantities = [ 400.0, 400.0, 400.0, 400.0 ]
  aliceCashDepositCids    <- submit alice.customer    do exerciseCmd cashDepositCid AssetDeposit_Split with quantities = [ 20_000.0, 24_000.0, 28_000.0, 32_000.0 ]

  let
    aliceBuyOrderIds   = [ "b1", "b2", "b3", "b4" ]
    aliceSellOrderIds   = [ "s1", "s2", "s3", "s4" ]
    aliceBuyPrices     = [ limit 50.0, limit 60.0, limit 70.0, limit 80.0 ]
    aliceSellPrices   = [ limit 110.0, limit 120.0, limit 130.0, limit 140.0 ]
    aliceBuyTriples    = zip3 aliceCashDepositCids aliceBuyPrices aliceBuyOrderIds
    aliceSellTriples    = zip3 aliceShareDepositCids aliceSellPrices aliceSellOrderIds
  forA_ aliceBuyTriples    (\(depositCid, orderType, orderId) -> submitOrder alice.customer orderId Order.Buy (shareAsset with quantity = 400.0) orderType depositCid)
  forA_ aliceSellTriples    (\(depositCid, orderType, orderId) -> submitOrder alice.customer orderId Order.Sell (shareAsset with quantity = 400.0) orderType depositCid)



setup : Script ([CustomerContracts], [AssetDeposit], CustomerContracts, Party, Party, ContractId Auction.T, ContractId Auction.S, [ContractId Bidding.S])
setup = do
  cr@CommonContracts{..} <- onboardCommon

  -- Create our Investors/Bidders
  let
    cashId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
    cashAsset = Asset with id = cashId; quantity = 0.0

  parties@[alice, bob, charlie, dave] <- forA [("Alice", 10000.0), ("Bob", 5000.0), ("Charlie", 2000.0), ("Dave", 1000.0)] \(partyName, quantity) -> onboardCustomer cr partyName (cashAsset with quantity) auctionAgent
  originalDeposits <- forA parties \party -> (snd . head) <$> query @AssetDeposit party.customer

  -- Create our Issuer with their new asset to distribute
  let
    newDistributionId = Id with signatories = fromList [ auctionAgent ]; label = "New Distribution"; version = 0
    newDistributionAsset = Asset with id = newDistributionId; quantity = 1000.0
  issuer <- onboardCustomer cr "Issuer" newDistributionAsset auctionAgent
  auctionOfferCid <- auctionAgent `submit` exerciseCmd distributorRoleCid Distributor.OfferAuctionService with customer = issuer.customer; ..
  auctionServiceCid <- issuer.customer `submit` exerciseCmd auctionOfferCid Auction.Accept

  -- Create an Auction request and approve it
  let
    quotedAssetId = Id with signatories = fromList [ auctionAgent, issuer.customer ]; label = "USD"; version = 0
  createAuctionRequestCid <- issuer.customer `submit` exerciseCmd auctionServiceCid Auction.RequestCreateAuction with
      leadBidder = alice.customer
      asset = newDistributionAsset
      assetDepositCid = issuer.assetDepositCid
      floorPrice = 5.0
      allocationAccount = issuer.allocationAccount
      receivableAccount = issuer.awayAccount
      ..
  auctionCid <- auctionAgent `submit` exerciseCmd auctionServiceCid Auction.CreateAuction with ..

  -- Add our parties as bidders
  bidServices@[aliceBidServiceCid, bobBidServiceCid, charlieBidServiceCid, daveBidServiceCid] <- forA parties \party -> do
      offerCid <- issuer.customer `submit` exerciseCmd auctionServiceCid Auction.OfferBidder with submitter = issuer.customer; bidder = party.customer; ..
      party.customer `submit` exerciseCmd offerCid Bidding.Accept

  pure (parties, originalDeposits, issuer, auctionAgent, custodian, auctionCid, auctionServiceCid, bidServices)

auctionAndBidsFullyAllocated : Script ()
auctionAndBidsFullyAllocated = do
  (parties, originalDeposits, issuer, auctionAgent, custodian, auctionCid, auctionServiceCid, bidServices) <- setup

  -- Create our bids
  now <- getTime
  bidDetails@[aliceBidDetails, bobBidDetails, charlieBidDetails, daveBidDetails] <- forA [(10.0, 500.0, now), (11.0, 300.0, now), (12.0, 100.0, now), (50.0, 100.0, now)] \(price, quantity, time) -> pure $ Bidding.Details with price; quantity; time
  bidCids@[aliceBidCid, bobBidCid, charlieBidCid, daveBidCId] <- forA (zip3 parties bidServices bidDetails) \(party, bidServiceCid, details@Bidding.Details{..}) ->
      party.customer `submit` exerciseCmd bidServiceCid Bidding.SubmitBid with
          tradingAccount = party.tradingAccount
          allocationAccount = party.allocationAccount
          depositCid = party.assetDepositCid
          ..

  -- Add our lead bid to the Auction
  issuer.customer `submit` exerciseCmd auctionServiceCid Auction.PublishBid with submitter = issuer.customer; leadBidCid = head bidCids

  -- -- Kick off the auction
  -- (auctionCid, siCids) <- auctionAgent `submit` exerciseCmd auctionServiceCid Auction.ProcessAuction with ..

  -- -- Assertions
  -- length siCids === 4
  -- auction <- fromSome <$> queryContractId auctionAgent auctionCid
  -- auction.status === Auction.FullyAllocated with finalPrice = 10.0
  -- bids <- query @Bidding.T auctionAgent
  -- all ((\bid -> bid.status == Bidding.FullAllocation with price = 10.0) . snd) bids === True

  -- -- Settle
  -- depositCids <- forA siCids \siCid -> auctionAgent `submit` exerciseCmd siCid Settle.Settle

  -- -- Settlement Assertions
  -- auction <- snd . head <$> query @Auction.Auction auctionAgent
  -- issuerPayments <- queryFilter @AssetDeposit issuer.customer (\deposit -> deposit.account == issuer.awayAccount && deposit.asset.id.label == auction.quotedAssetId.label) >>= \deposits -> pure . snd $ unzip deposits
  -- assertAuctionMatchesPayments auction issuerPayments
  -- F.forA_ bids \(_, bid) -> do
  --   case bid.status of
  --     Bidding.FullAllocation price -> do
  --       assertAssetDeposits auction issuer originalDeposits price bid.details.quantity bid
  --     _ -> pure ()

  pure ()

