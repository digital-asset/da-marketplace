module Demo where

import Common
import Daml.Script
import DA.Finance.Asset (AssetCategorization(..), AssetDeposit_Split(..))
import DA.Finance.Types (Id(..), Asset(..))
import DA.Foldable
import DA.List (head)
import DA.Next.Set (fromList)
import qualified Marketplace.Trading.Service as TradingService
import qualified Marketplace.Trading.Order as Order
import qualified Marketplace.Listing as Listing

demo : Script ()
demo = do
  cr@CommonContracts{..} <- onboardCommon

  -- Assets
  let
    shareId = Id with signatories = fromList [ custodian ]; label = "JPM.N"; version = 0
    cashId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
    shareAsset = Asset with id = shareId; quantity = 2_000.0
    cashAsset = Asset with id = cashId; quantity = 140_000.0
    priceAsset = Asset with id = cashId; quantity = 100.0

  submit custodian do createCmd AssetCategorization with id = shareId; assetType = "Stock"; assetClass = "Equity"; observers = fromList [public]
  submit custodian do createCmd AssetCategorization with id = cashId; assetType = "Currency"; assetClass = "FX"; observers = fromList [public]

  alice <- onboardClient cr "Alice" "Alice Legal Name" "Alice Location" shareAsset cashAsset

  -- List a Security to trade
  (listingServiceCid, _) <- head <$> query @Listing.Service alice.client
  let
    listingId = "JPM.N/USD"
    calendarId = "1"
    description = "JPMorgan Chase & Co."
    tradedAssetId = Id with signatories = fromList [ custodian ]; label = "JPM.N"; version = 0
    quotedAssetId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
    tradedAssetPrecision = 2
    quotedAssetPrecision = 2
    minimumTradableQuantity = 1.0
    maximumTradableQuantity = 1_000_000.0
    observers = [public]
  createListingRequestCid <- submit alice.client do exerciseCmd listingServiceCid Listing.RequestCreateListing with ..
  listingCid <- submit exchange do exerciseCmd listingServiceCid Listing.CreateListing with ..

  let
    symbol = listingId
    limit price = Order.Limit with ..
    submitOrder party label side asset orderType depositCid = do
      let
        signatories = fromList [ custodian ]
        version = 0
        id = Id with ..
        timeInForce = Order.GTC
        details = Order.Details with ..
      submit party do exerciseByKeyCmd @TradingService.T (operator, exchange, party) TradingService.RequestCreateOrder with ..
  
  aliceShareDepositCids    <- submit alice.client    do exerciseCmd alice.shareDepositCid AssetDeposit_Split with quantities = [ 400.0, 400.0, 400.0, 400.0 ]
  aliceCashDepositCids    <- submit alice.client    do exerciseCmd alice.cashDepositCid AssetDeposit_Split with quantities = [ 20_000.0, 24_000.0, 28_000.0, 32_000.0 ]

  let
    aliceBuyOrderIds   = [ "b1", "b2", "b3", "b4" ]
    aliceSellOrderIds   = [ "s1", "s2", "s3", "s4" ]
    aliceBuyPrices     = [ limit 50.0, limit 60.0, limit 70.0, limit 80.0 ]
    aliceSellPrices   = [ limit 110.0, limit 120.0, limit 130.0, limit 140.0 ]
    aliceBuyTriples    = zip3 aliceCashDepositCids aliceBuyPrices aliceBuyOrderIds
    aliceSellTriples    = zip3 aliceShareDepositCids aliceSellPrices aliceSellOrderIds
  forA_ aliceBuyTriples    (\(depositCid, orderType, orderId) -> submitOrder alice.client orderId Order.Buy (shareAsset with quantity = 400.0) orderType depositCid)
  forA_ aliceSellTriples    (\(depositCid, orderType, orderId) -> submitOrder alice.client orderId Order.Sell (shareAsset with quantity = 400.0) orderType depositCid)
