module Demo where

import Common
import ContingentClaims.Claim qualified as C
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation qualified as O
import ContingentClaims.FinancialClaim (cpb, couponDates)
import ContingentClaims.FinancialClaim qualified as C
import Daml.Script
import DA.Date (date, Month(..))
import DA.Finance.Types (Id(..))
import DA.Next.Set (fromList)
import Marketplace.Distribution.Distributor qualified as Distributor
import Marketplace.Distribution.Auction.Service qualified as Auction
import Marketplace.Issuance qualified as Issuance

demo : Script ()
demo = do

  providers@Providers{..} <- onboardProviders
  assets@Assets{..} <- onboardAssets providers

  issuer      <- onboardCustomer providers "Issuer"
  alice       <- onboardCustomer providers "Alice"
  bob         <- onboardCustomer providers "Bob"
  charlie     <- onboardCustomer providers "Charlie"
  aliceUsd    <- depositAsset providers alice     (usd with quantity = 1_000_000.0) alice.mainAccount.id
  bobUsd      <- depositAsset providers bob       (usd with quantity = 1_000_000.0) bob.mainAccount.id
  charlieUsd  <- depositAsset providers charlie   (usd with quantity = 1_000_000.0) charlie.mainAccount.id

  auctionOfferCid <- bank `submit` exerciseCmd distributorRoleCid Distributor.OfferAuctionService with customer = issuer.customer; ..
  auctionServiceCid <- issuer.customer `submit` exerciseCmd auctionOfferCid Auction.Accept with tradingAccount = issuer.mainAccount; allocationAccount = issuer.auctionLockedAccount; receivableAccount = issuer.mainAccount

  issuance providers assets issuer

  pure ()

issuance : Providers -> Assets -> Customer -> Script ()
issuance Providers{..} Assets{..} issuer = do

  -- Issuer originates the option
  origReqCid <- submit issuer.customer $ exerciseCmd issuer.issuanceServiceCid Issuance.RequestBinaryCallOptionOrigination with
      assetLabel = "TSLA Mar21 910.0"
      safekeepingAccountId = issuer.mainAccount.id
      observers = [public]
      expiry = date 2020 Mar 18
      underlyingId = tsla.id
      currencyId = usd.id
      strike = 910.0
  optionDescCid :: _ <- submit bank $ exerciseCmd issuer.issuanceServiceCid $ Issuance.Originate origReqCid
  Some optionDesc <- queryContractId bank optionDescCid

  -- Issuer issues the option
  createReqCid <- submit issuer.customer $ exerciseCmd issuer.issuanceServiceCid
    Issuance.RequestCreateIssuance with
      issuanceId = "Myissuance"
      accountId = Id (fromList [bank, issuer.customer]) issuer.mainAccount.id.label 0
      assetId = optionDesc.assetId
      quantity = 1000.0
  (_issuanceCid, optionDepositCid) <- submit bank $ exerciseCmd issuer.issuanceServiceCid $ Issuance.CreateIssuance createReqCid

  -- Issuer originates a bond
  origReqCid <- submit issuer.customer $ exerciseCmd issuer.issuanceServiceCid Issuance.RequestOrigination with
      assetLabel = "NFLX 4 7/8 04/15/23"
      description = "NFLX 4 7/8 04/15/23"
      safekeepingAccountId = issuer.mainAccount.id
      observers = [public]
      claims =  C.serialize $ cpb 1000.0 (4.0 + 7.0/8.0) usd.id (couponDates 2021 2023 [Jan,Jul] 15)
  cpbDescCid :: _ <- submit bank $ exerciseCmd issuer.issuanceServiceCid $ Issuance.Originate origReqCid
  Some cpbDesc <- queryContractId bank cpbDescCid

  -- pedagogical example from https://ledgy.com/blog/examples-of-convertible-notes/
  let convertibleNote : Id -> Decimal -> Id -> Decimal -> Date -> Decimal -> Decimal -> Id -> C.Claim O.Observation Date Id
      convertibleNote note principal ccy discount maturity interest cap underlying =
        C.when (C.at maturity) (
          C.cond (O.observe underlying.label O.<= O.pure cap) (
             C.scale (O.pure (principal * (1.0 + interest)) O./ (O.observe underlying.label O.* O.pure (1.0 - discount))) (C.one underlying)
          )( C.scale (O.pure (principal * (1.0 + interest))) (C.one ccy)
          )
        )

  -- Issuer originates a convertible note
  origReqCid <- submit issuer.customer $ exerciseCmd issuer.issuanceServiceCid Issuance.RequestOrigination with
      assetLabel = "NFLX-CONV-NOTE-2021-06-21"
      description = "Netflix Convertible Note 2021-06-21"
      safekeepingAccountId = issuer.mainAccount.id
      observers = [public]
      claims = C.serialize $ convertibleNote nflx.id 100_000.0 usd.id 0.20 (date 2021 Jun 06) 0.04 550.0 nflx.id
  -- FIXME: the below appears to be failing for some inexplicable reason; accept the request in the UI manually!
  _ <- submit bank $ exerciseCmd issuer.issuanceServiceCid $ Issuance.Originate origReqCid
  -- Some cnDesc <- queryContractId custodian cnDescCid

  pure ()
