module Demo where

import Common
import ContingentClaims.Claim (Claim(Zero), serialize)
import ContingentClaims.FinancialClaim (couponDates)
import Daml.Script
import DA.Date (date, Month(..))
import DA.Finance.Asset (AssetDeposit, AssetDeposit_Split(..))
import DA.Finance.Asset.Settlement
import Marketplace.Custody.Service qualified as Custody
import Marketplace.Distribution.Role qualified as Distributor
import Marketplace.Distribution.Auction.Service qualified as Auction
import Marketplace.Issuance.Service qualified as Issuance
import Tests.Utils

demo : Script ()
demo = do

  providers@Providers{..} <- onboardProviders
  assets@Assets{..} <- onboardAssets providers

  issuer      <- onboardCustomer providers "Issuer"
  alice       <- onboardCustomer providers "Alice"
  bob         <- onboardCustomer providers "Bob"
  charlie     <- onboardCustomer providers "Charlie"
  aliceUsd    <- depositAsset providers alice     (usd with quantity = 1_000_000.0) alice.mainAccount.id
  bobUsd      <- depositAsset providers bob       (usd with quantity = 1_000_000.0) bob.mainAccount.id
  charlieUsd  <- depositAsset providers charlie   (usd with quantity = 1_000_000.0) charlie.mainAccount.id

  aliceUsdClearing <- depositAsset providers alice     (usd with quantity = 1_000_000.0) alice.clearingAccount.id
  bobUsdClearing   <- depositAsset providers bob       (usd with quantity = 1_000_000.0) bob.clearingAccount.id

  auctionOfferCid <- submit bank do exerciseCmd distributorRoleCid Distributor.OfferAuctionService with customer = issuer.customer; ..
  auctionServiceCid <- submit issuer.customer do exerciseCmd auctionOfferCid Auction.Accept with tradingAccount = issuer.mainAccount; allocationAccount = issuer.auctionLockedAccount; receivableAccount = issuer.mainAccount

  examples providers assets issuer

  pure ()

examples : Providers -> Assets -> Customer -> Script ()
examples Providers{..} Assets{..} issuer = do

  let
    safekeepingAccountId = issuer.mainAccount.id
    accountId = issuer.mainAccount.id
    observers = [public]

    originate assetLabel description claims = do
      createOriginationCid <- submit issuer.customer do exerciseCmd issuer.issuanceServiceCid Issuance.RequestOrigination with claims = serialize claims; ..
      submit bank do exerciseCmd (issuer.issuanceServiceCid) Issuance.Originate with ..

    issue issuanceId assetId quantity = do
      createIssuanceRequestCid <- submit issuer.customer $ exerciseCmd issuer.issuanceServiceCid Issuance.RequestCreateIssuance with ..
      submit bank $ exerciseCmd issuer.issuanceServiceCid $ Issuance.CreateIssuance with ..

    transfer : Customer -> Customer -> ContractId AssetDeposit -> Decimal -> Script (ContractId AssetDeposit, Optional (ContractId AssetDeposit))
    transfer from to depositCid quantity = do
      Some deposit <- queryContractId bank depositCid
      if deposit.asset.quantity > quantity then do
        [ exactDepositCid, remainderDepositCid ] <- submit from.customer do exerciseCmd depositCid AssetDeposit_Split with quantities = [ quantity ]
        submit (to.customer) do exerciseByKeyCmd @AssetSettlementRule to.mainAccount.id AssetSettlement_AddController with ctrl = from.customer
        transferRequestCid <- submit from.customer do exerciseCmd from.custodyServiceCid Custody.RequestTransferDeposit with accountId = from.mainAccount.id, transfer = AssetSettlement_Transfer with receiverAccountId = to.mainAccount.id, depositCid = exactDepositCid
        transferredDepositCid <- submit bank do exerciseCmd from.custodyServiceCid $ Custody.TransferDeposit transferRequestCid
        submit to.customer do exerciseByKeyCmd @AssetSettlementRule to.mainAccount.id AssetSettlement_RemoveController with ctrl = from.customer
        pure (transferredDepositCid, Some remainderDepositCid)
      else do
        submit (to.customer) do exerciseByKeyCmd @AssetSettlementRule to.mainAccount.id AssetSettlement_AddController with ctrl = from.customer
        transferRequestCid <- submit from.customer do exerciseCmd from.custodyServiceCid Custody.RequestTransferDeposit with accountId = from.mainAccount.id, transfer = AssetSettlement_Transfer with receiverAccountId = to.mainAccount.id, depositCid
        transferredDepositCid <- submit bank do exerciseCmd from.custodyServiceCid $ Custody.TransferDeposit transferRequestCid
        submit to.customer do exerciseByKeyCmd @AssetSettlementRule to.mainAccount.id AssetSettlement_RemoveController with ctrl = from.customer
        pure (transferredDepositCid, None)

  -- Origination
  (_, usd)    <- originate "USD" "United States Dollar" Zero
  (_, eur)    <- originate "EUR" "Euro" Zero
  (_, tsla)   <- originate "TSLA" "Tesla, Inc." Zero
  (_, dax)    <- originate "DAX" "DAX Index" Zero
  (_, pmt)    <- originate "PMT-USD" "Payment Example" $ payment usd.assetId 10_000.0
  (_, del)    <- originate "DEL-TSLA" "Delivery Example" $ delivery tsla.assetId 20.0
  (_, dvp)    <- originate "DVP-TSLA-USD" "DvP Example" $ dvp tsla.assetId 20.0 usd.assetId 10_000.0
  (_, fwd)    <- originate "FWD-TSLA-USD-20221022" "Forward Example" $ futureDvp tsla.assetId 20.0 usd.assetId 10_000.0 (date 2022 Oct 22)
  (_, bnd)    <- originate "BOND-USD-4.875" "Forward Example" $ bond usd.assetId 1000000.0 0.04875 $ couponDates 2021 2023 [Jan,Jul] 15
  (_, opt)    <- originate "OPT-TSLA-USD-20221022" "Call Option Example" $ callOptionPhysical tsla.assetId 20.0 usd.assetId 10_000.0 (date 2022 Oct 22)
  (_, bopt)   <- originate "BIN-TSLA-USD-20221022" "Binary Option Example" $ binaryCallOption tsla.assetId usd.assetId 700.0 (date 2022 Oct 22)
  (_, wrnt)   <- originate "WRNT-KO-PUT-DAX" "Open-end Knock-out Put Warrant Example" $ koPutWarrant 10110.0 10110.0 dax.assetId eur.assetId
  (_, swpt)   <- originate "SWPT-BERMUDAN-LIBOR" "Bermudan Swaption Example" $ bermudanSwaption libor.id 0.015 usd.assetId 500_000.0 (couponDates 2021 2022 [Jan, Jul] 15) (date 2021 <$> [Feb,Mar,Apr] <*> [1])
  (_, conv)   <- originate "CONV-TSLA-20221022" "Convertible Note Example" $ convertibleNote nflx.id usd.assetId 100_000.0 0.20 (date 2021 Jun 06) 0.04 550.0

  pure ()
