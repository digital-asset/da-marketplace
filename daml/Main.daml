daml 1.2

module Main where

import Marketplace.Role
import Marketplace.Token
import Marketplace.Trading
import DA.Finance.Asset
import DA.Finance.Types

import DA.Next.Set


test = scenario do
  operator <- getParty "Operator"
  btcIssuer <- getParty "BtcIssuer"
  usdtIssuer <- getParty "UsdtIssuer"
  custodian <- getParty "Custodian"
  exchange <- getParty "Exchange"
  public <- getParty "Public"

  alice <- getParty "Alice"
  bob <- getParty "Bob"

  -- create operator
  opCid <- operator `submit` create Operator with ..

  -- onboard custodian
  custodianInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardCustodian with ..
  custodian `submit` exercise custodianInvCid CustodianInvitation_Accept

  -- onboard issuers
  btcIssuerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = btcIssuer, ..
  btcIssuerCid <- btcIssuer `submit` exercise btcIssuerInvCid IssuerInvitation_Accept

  usdtIssuerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = usdtIssuer, ..
  usdtIssuerCid <- usdtIssuer `submit` exercise usdtIssuerInvCid IssuerInvitation_Accept

  -- onboard investors
  aliceInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardInvestor with investor = alice, ..
  aliceInvestorCid <- alice `submit` exercise aliceInvCid InvestorInvitation_Accept with isPublic = True

  custodian `submit` exerciseByKey @Custodian (operator, custodian) UpdateAssetSettlementRules

  bobInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardInvestor with investor = bob, ..
  bobInvestorCid <- bob `submit` exercise bobInvCid InvestorInvitation_Accept with isPublic = True

  -- issuers establish a relationship with the custodian
  relationshipReqCid <- btcIssuer `submit` exercise btcIssuerCid Issuer_RequestCustodianRelationship with ..
  custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve

  relationshipReqCid <- usdtIssuer `submit` exercise usdtIssuerCid Issuer_RequestCustodianRelationship with ..
  custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve

  -- investors establish a relationship with the custodian
  relationshipReqCid <- alice `submit` exercise aliceInvestorCid Investor_RequestCustodianRelationship with ..
  custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve

  relationshipReqCid <- bob `submit` exercise bobInvestorCid Investor_RequestCustodianRelationship with ..
  custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve

  custodian `submit` exerciseByKey @Custodian (operator, custodian) UpdateAssetSettlementRules

  -- issuers issue tokens
  btcIssuer `submit` exerciseByKey @Issuer (operator, btcIssuer) Issuer_IssueToken with name = "BTC", quantityPrecision = 6
  usdtIssuer `submit` exerciseByKey @Issuer (operator, usdtIssuer) Issuer_IssueToken with name = "USDT", quantityPrecision = 2

  let btcTokenId = Id with signatories = fromList [ btcIssuer ], label = "BTC", version = 0
  let usdtTokenId = Id with signatories = fromList [ usdtIssuer ], label = "USDT", version = 0

  -- the issuers disclose the tokens to everyone
  btcIssuer `submit` exerciseByKey @Token btcTokenId Token_AddObservers with party = btcIssuer, newObservers = fromList [custodian, exchange, alice, bob]
  usdtIssuer `submit` exerciseByKey @Token usdtTokenId Token_AddObservers with party = usdtIssuer, newObservers = fromList [custodian, exchange, alice, bob]

  -- Alice deposits some BTC under her account and gets them in a form of a deposit
  depositCid <- custodian `submit` exerciseByKey @Custodian (operator, custodian) CreateDeposit with tokenId = btcTokenId, depositQuantity = 0.01, beneficiary = alice

  -- Alice transfers the deposit to bob
  depositCid <- alice `submit` exerciseByKey @Investor (operator, alice) Investor_TransferTo with receiver = bob, depositCid

  -- onboard exchange
  exchangeInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardExchange with ..
  exchangeCid <- exchange `submit` exercise exchangeInvCid ExchangeInvitation_Accept

  -- exchange establishes a relationship with the custodian
  relationshipReqCid <- exchange `submit` exercise exchangeCid Exchange_RequestCustodianRelationship with ..
  custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve

  custodian `submit` exerciseByKey @Custodian (operator, custodian) UpdateAssetSettlementRules

  -- Bob allocates this to the exchange
  depositCid <- bob `submit` exerciseByKey @Investor (operator, bob) Investor_AllocateToExchange with ..

  -- Bob cannot claim back the asset using a transfer
  bob `submitMustFail` exerciseByKey @Investor (operator, bob) Investor_TransferTo with receiver = bob, depositCid

  -- Alice deposits some USDT under her account
  depositCid1 <- custodian `submit` exerciseByKey @Custodian (operator, custodian) CreateDeposit with tokenId = usdtTokenId, depositQuantity = 1000.0, beneficiary = alice
  depositCid2 <- custodian `submit` exerciseByKey @Custodian (operator, custodian) CreateDeposit with tokenId = usdtTokenId, depositQuantity = 500.0, beneficiary = alice

  -- Alice merges the two assets
  depositCid3 <- alice `submit` exercise depositCid1 AssetDeposit_Merge with depositCids = [depositCid2]

  -- Bob is onboarded as an exchange participant
  (_, bobInvCid) <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = bob
  bob `submit` exercise bobInvCid ExchangeParticipantInvitation_Accept

  -- the exchange adds support for BTC/USDT pair
  exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_AddPair with baseTokenId = btcTokenId, quoteTokenId = usdtTokenId

  -- Bob places a bid for the BTC/USDT pair but he is using a deposit of bitcoin so he can only place an offer
  bob `submitMustFail` exerciseByKey @ExchangeParticipant (exchange, operator, bob) ExchangeParticipant_PlaceBid with depositCid, pair = (btcTokenId, usdtTokenId), price = 10_000.0
  offerOrderRequestCid <- bob `submit` exerciseByKey @ExchangeParticipant (exchange, operator, bob) ExchangeParticipant_PlaceOffer with depositCid, pair = (btcTokenId, usdtTokenId), price = 10_000.00
  -- exchange assigns it an orderId
  offerOrderCid <- exchange `submit` exercise offerOrderRequestCid OrderRequestAck with orderId = 1

  -- Alice gets onboarded as an exchange participant
  (_, aliceInvCid) <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = alice
  alice `submit` exercise aliceInvCid ExchangeParticipantInvitation_Accept

  -- Alice places a bid for the BTC/USDT pair but she is using a deposit of usdt so she can only place a bid
  depositCid3 <- alice `submit` exerciseByKey @Investor (operator, alice) Investor_AllocateToExchange with depositCid = depositCid3, ..
  bidOrderRequestCid <- alice `submit` exerciseByKey @ExchangeParticipant (exchange, operator, alice) ExchangeParticipant_PlaceBid with depositCid = depositCid3, pair = (btcTokenId, usdtTokenId), price = 10000.00

  -- exchange assigns it a orderid
  bidOrderCid <- exchange `submit` exercise bidOrderRequestCid OrderRequestAck with orderId = 2

  -- exchange matches the two orders
  exchange `submit` exercise bidOrderCid OrderFill with fillQty = 0.01, fillPrice = 10000.0, counterParty = bob
  exchange `submit` exercise offerOrderCid OrderFill with fillQty = 0.01, fillPrice = 10000.00, counterParty = alice

  return ()

brokers = scenario do
  public <- getParty "Public"
  operator <- getParty "Operator"
  custodian <- getParty "Custodian"
  exchange <- getParty "Exchange"
  issuer <- getParty "Issuer"
  broker <- getParty "Broker"
  investor <- getParty "Investor"

  -- create operator
  opCid <- operator `submit` create Operator with ..

  -- onboard custodian
  custodianInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardCustodian with ..
  custodian `submit` exercise custodianInvCid CustodianInvitation_Accept

  -- onboard issuer
  issuerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardIssuer with ..
  issuer `submit` exercise issuerInvCid IssuerInvitation_Accept

  -- issuer establishes relationship with custodian
  relationshipReqCid <- issuer `submit` exerciseByKey @Issuer (operator, issuer) Issuer_RequestCustodianRelationship with ..
  custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve

  custodian `submit` exerciseByKey @Custodian (operator, custodian) UpdateAssetSettlementRules

  -- issue tokens
  issuer `submit` exerciseByKey @Issuer (operator, issuer) Issuer_IssueToken with name = "BTC", quantityPrecision = 6
  issuer `submit` exerciseByKey @Issuer (operator, issuer) Issuer_IssueToken with name = "USDT", quantityPrecision = 2

  let btcTokenId = Id with signatories = fromList [ issuer ], label = "BTC", version = 0
  let usdtTokenId = Id with signatories = fromList [ issuer ], label = "USDT", version = 0

  -- the issuers disclose the tokens to everyone
  issuer `submit` exerciseByKey @Token btcTokenId Token_AddObservers with party = issuer, newObservers = fromList [custodian, exchange, broker, investor]
  issuer `submit` exerciseByKey @Token usdtTokenId Token_AddObservers with party = issuer, newObservers = fromList [custodian, exchange, broker, investor]

  -- onboard investor
  investorInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardInvestor with ..
  investor `submit` exercise investorInvCid InvestorInvitation_Accept with isPublic = True

  -- investor gets relationship with custodian
  relationshipReqCid <- investor `submit` exerciseByKey @Investor (operator, investor) Investor_RequestCustodianRelationship with ..
  custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve

  custodian `submit` exerciseByKey @Custodian (operator, custodian) UpdateAssetSettlementRules

  -- investor gets deposit
  depositCid <- custodian `submit` exerciseByKey @Custodian (operator, custodian) CreateDeposit
    with tokenId = usdtTokenId, depositQuantity = 1_000.00, beneficiary = investor

  -- onboard exchange
  exchangeInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardExchange with ..
  exchange `submit` exercise exchangeInvCid ExchangeInvitation_Accept

  relationshipReqCid <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_RequestCustodianRelationship with ..
  custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve

  custodian `submit` exerciseByKey @Custodian (operator, custodian) UpdateAssetSettlementRules

  -- the exchange adds support for BTC/USDT pair
  exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_AddPair with baseTokenId = btcTokenId, quoteTokenId = usdtTokenId

  -- onboard broker
  brokerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardBroker with ..
  broker `submit` exercise brokerInvCid BrokerInvitation_Accept

  -- broker establishes relationship with custodian
  relationshipReqCid <- broker `submit` exerciseByKey @Broker (operator, broker) Broker_RequestCustodianRelationship with ..
  custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve

  custodian `submit` exerciseByKey @Custodian (operator, custodian) UpdateAssetSettlementRules

  -- broker is added as an exchange participant
  (_, brokerInvCid) <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = broker
  broker `submit` exercise brokerInvCid ExchangeParticipantInvitation_Accept

  -- investor establishes relationship with broker
  brokerRequestCid <- investor `submit` exerciseByKey @Investor (operator, investor) Investor_RequestBrokerRelationship with ..
  brokerInvestorRelationCid <- broker `submit` exercise brokerRequestCid BrokerRelationshipRequest_Accept

  -- investor allocates deposit to broker
  depositCid <- investor `submit` exerciseByKey @Investor (operator, investor) Investor_AllocateToBroker with ..

  -- investor places bid through broker
  -- brokerOrderRequestCid <- investor `submit` exercise brokerInvestorRelationCid BrokerInvestorRelationship_OrderRequest
  --   with pair = (btcTokenId, usdtTokenId), price = 10_000.00, orderType = Bid, ..

  -- broker `submit` exercise brokerOrderRequestCid BrokerOrderRequestAck with ..

  return ()
