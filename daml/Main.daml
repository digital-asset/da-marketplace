module Main where

-- import Marketplace.BinaryOption
-- import Marketplace.Broker
-- import Marketplace.BrokerCustomer
-- import Marketplace.Custodian
-- import Marketplace.Exchange
-- import Marketplace.ExchangeParticipant
-- import Marketplace.Investor
-- import Marketplace.Issuer
-- import Marketplace.Operator
--
-- import Marketplace.Token
-- import Marketplace.Trading
-- import Marketplace.Transfer
-- import Marketplace.Utils
--
-- import DA.Finance.Asset
-- import DA.Finance.Types
--
-- import DA.Set


-- test = scenario do
--   operator <- getParty "Operator"
--   btcIssuer <- getParty "BtcIssuer"
--   usdtIssuer <- getParty "UsdtIssuer"
--   custodian <- getParty "Custodian"
--   exchange <- getParty "Exchange"
--   public <- getParty "Public"
--
--   alice <- getParty "Alice"
--   bob <- getParty "Bob"
--
--   -- some empty strings to fill in registered users...
--   let (name, title, issuerID, location) = ("","","","")
--
--   -- create operator
--   opCid <- operator `submit` create Operator with ..
--
--   -- onboard custodian
--   custodianInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardCustodian with ..
--   custodian `submit` exercise custodianInvCid CustodianInvitation_Accept with ..
--
--   -- onboard issuers
--   btcIssuerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = btcIssuer, ..
--   btcIssuerCid <- btcIssuer `submit` exercise btcIssuerInvCid IssuerInvitation_Accept with ..
--
--   usdtIssuerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = usdtIssuer, ..
--   usdtIssuerCid <- usdtIssuer `submit` exercise usdtIssuerInvCid IssuerInvitation_Accept with ..
--
--   -- onboard investors
--   aliceInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardInvestor with investor = alice, ..
--   aliceInvestorCid <- alice `submit` exercise aliceInvCid InvestorInvitation_Accept with isPublic = True, ..
--
--   bobInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardInvestor with investor = bob, ..
--   bobInvestorCid <- bob `submit` exercise bobInvCid InvestorInvitation_Accept with isPublic = True, ..
--
--   -- issuers establish a relationship with the custodian
--   relationshipReqCid <- btcIssuer `submit` exercise btcIssuerCid Issuer_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   relationshipReqCid <- usdtIssuer `submit` exercise usdtIssuerCid Issuer_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   -- investors establish a relationship with the custodian
--   relationshipReqCid <- alice `submit` exercise aliceInvestorCid Investor_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   relationshipReqCid <- bob `submit` exercise bobInvestorCid Investor_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   -- issuers issue tokens
--   btcIssuer `submit` exerciseByKey @Issuer (operator, btcIssuer) Issuer_IssueToken with name = "BTC", quantityPrecision = 6, description = "My BTC token", isPublic = False, observers = [custodian, exchange, alice, bob]
--   usdtIssuer `submit` exerciseByKey @Issuer (operator, usdtIssuer) Issuer_IssueToken with name = "USDT", quantityPrecision = 2, description = "My USDT token", isPublic = True, observers = []
--
--   let btcTokenId = Id with signatories = fromList [ btcIssuer ], label = "BTC", version = 0
--   let usdtTokenId = Id with signatories = fromList [ usdtIssuer ], label = "USDT", version = 0
--
--   -- the issuers disclose the tokens to everyone
--   btcIssuer `submit` exerciseByKey @Token btcTokenId Token_AddObservers with party = btcIssuer, newObservers = fromList [custodian, exchange, alice, bob]
--   usdtIssuer `submit` exerciseByKey @Token usdtTokenId Token_AddObservers with party = usdtIssuer, newObservers = fromList [custodian, exchange, alice, bob]
--
--   -- Alice deposits some BTC under her account and gets them in a form of a deposit
--   depositCid <- custodian `submit` exerciseByKey @Custodian (operator, custodian) Custodian_CreateDeposit with tokenId = btcTokenId, depositQuantity = 0.01, beneficiary = alice
--
--   let bobAccountId = Id with signatories = fromList [ custodian ], label = (show bob <> "@" <> show custodian), version = 0
--   depositTransferRequest <- alice `submit` exerciseByKey @Investor (operator, alice) Investor_RequestDepositTransfer with depositCid = depositCid, receiverAccountId = bobAccountId
--
--   depositCid <- custodian `submit` exercise depositTransferRequest DepositTransferRequest_Approve
--
--   -- oboard exchange
--   exchangeInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardExchange with ..
--   exchangeCid <- exchange `submit` exercise exchangeInvCid ExchangeInvitation_Accept with ..
--
--   -- exchange establishes a relationship with the custodian
--   relationshipReqCid <- exchange `submit` exercise exchangeCid Exchange_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   depositTransferRequest <- bob `submit` exerciseByKey @Investor (operator, bob) Investor_AllocateToProvider with provider = exchange, ..
--   depositCid <- custodian `submit` exercise depositTransferRequest DepositTransferRequest_Approve
--
--     -- Alice deposits some USDT under her account
--   depositCid1 <- custodian `submit` exerciseByKey @Custodian (operator, custodian) Custodian_CreateDeposit with tokenId = usdtTokenId, depositQuantity = 1000.0, beneficiary = alice
--   depositCid2 <- custodian `submit` exerciseByKey @Custodian (operator, custodian) Custodian_CreateDeposit with tokenId = usdtTokenId, depositQuantity = 500.0, beneficiary = alice
--
--   -- Alice merges the two assets
--   depositCid3 <- alice `submit` exercise depositCid1 AssetDeposit_Merge with depositCids = [depositCid2]
--
--   -- Bob is onboarded as an exchange participant
--   (_, bobInvCid) <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = bob
--   bob `submit` exercise bobInvCid ExchangeParticipantInvitation_Accept
--
--   -- the exchange adds support for BTC/USDT pair
--   exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_AddPair with baseTokenId = btcTokenId, quoteTokenId = usdtTokenId, minQuantity = 0.01, maxQuantity = 100000.0
--
--   -- Bob places a bid for the BTC/USDT pair but he is using a deposit of bitcoin so he can only place an offer
--   bob `submitMustFail` exerciseByKey @ExchangeParticipant (exchange, operator, bob) ExchangeParticipant_PlaceBid with depositCid, pair = (btcTokenId, usdtTokenId), price = 10_000.0
--   offerOrderRequestCid <- bob `submit` exerciseByKey @ExchangeParticipant (exchange, operator, bob) ExchangeParticipant_PlaceOffer with depositCid, pair = (btcTokenId, usdtTokenId), price = 10_000.00
--   -- exchange assigns it an orderId
--   offerOrderCid <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_ApproveOrderRequest with orderRequestCid = offerOrderRequestCid, orderId = 1
--
--   -- Alice gets onboarded as an exchange participant
--   (_, aliceInvCid) <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = alice
--   alice `submit` exercise aliceInvCid ExchangeParticipantInvitation_Accept
--
--   -- Alice places a bid for the BTC/USDT pair
--   depositTransferRequest <- alice `submit` exerciseByKey @Investor (operator, alice) Investor_AllocateToProvider with provider = exchange, depositCid = depositCid3, ..
--   depositCid3 <- custodian `submit` exercise depositTransferRequest DepositTransferRequest_Approve
--
--   (bidOrderRequestCid,_) <- alice `submit` exerciseByKey @ExchangeParticipant (exchange, operator, alice) ExchangeParticipant_PlaceBid with depositCid = depositCid3, pair = (btcTokenId, usdtTokenId), price = 10000.00
--
--   -- exchange assigns it an orderid
--   bidOrderCid <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_ApproveOrderRequest with orderRequestCid = bidOrderRequestCid, orderId = 2
--
--   -- exchange matches the two orders
--   (buyTradeCid, _) <- exchange `submit` exercise bidOrderCid Order_Fill with fillQty = 0.01, fillPrice = 10000.0, counterParty = bob, counterOrderId = 1, timestamp = "1601394768171637000"
--   (sellTradeCid, _) <- exchange `submit` exercise offerOrderCid Order_Fill with fillQty = 0.01, fillPrice = 10000.00, counterParty = alice, counterOrderId = 2, timestamp = "1601394768171637000"
--
--   -- (_, Some txReqCid1) <- exchange `submit` exercise buyTradeCid TradeSide_Settle
--   -- (_, Some txReqCid2) <- exchange `submit` exercise sellTradeCid TradeSide_Settle
--   --
--   -- bobDepositCid <- custodian `submit` exercise txReqCid1 DepositTransferRequest_Approve
--   -- aliceDepositCid <- custodian `submit` exercise txReqCid2 DepositTransferRequest_Approve
--   --
--   -- let aliceAccountId = Id with signatories = fromList [ custodian ], label = getAccountLabel alice custodian, version = 0
--   -- depositTransferRequest <- alice `submit` exerciseByKey @Investor (operator, alice) Investor_RequestDepositTransfer with depositCid = aliceDepositCid, receiverAccountId = aliceAccountId
--   -- depositCid <- custodian `submit` exercise depositTransferRequest DepositTransferRequest_Approve
--   --
--   return ()
--
--
-- testBroker = scenario do
--   operator <- getParty "Operator"
--   btcIssuer <- getParty "BtcIssuer"
--   usdtIssuer <- getParty "UsdtIssuer"
--   custodian <- getParty "Custodian"
--   exchange <- getParty "Exchange"
--   broker <- getParty "Broker"
--   public <- getParty "Public"
--
--   alice <- getParty "Alice"
--
--   -- some empty strings to fill in registered users...
--   let (name, title, issuerID, location) = ("","","","")
--
--   -- create operator
--   opCid <- operator `submit` create Operator with ..
--
--   -- onboard custodian
--   custodianInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardCustodian with ..
--   custodian `submit` exercise custodianInvCid CustodianInvitation_Accept with ..
--
--   -- onboard broker
--   brokerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardBroker with ..
--   broker `submit` exercise brokerInvCid BrokerInvitation_Accept with name = "Broker Example", ..
--
--   -- onboard issuers
--   btcIssuerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = btcIssuer, ..
--   btcIssuerCid <- btcIssuer `submit` exercise btcIssuerInvCid IssuerInvitation_Accept with ..
--
--   usdtIssuerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = usdtIssuer, ..
--   usdtIssuerCid <- usdtIssuer `submit` exercise usdtIssuerInvCid IssuerInvitation_Accept with ..
--   -- onboard alice
--   aliceInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardInvestor with investor = alice, ..
--   aliceInvestorCid <- alice `submit` exercise aliceInvCid InvestorInvitation_Accept with isPublic = True, ..
--
--   -- issuers establish a relationship with the custodian
--   relationshipReqCid <- btcIssuer `submit` exercise btcIssuerCid Issuer_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   relationshipReqCid <- usdtIssuer `submit` exercise usdtIssuerCid Issuer_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   -- alice establishes a relationship with the custodian
--   relationshipReqCid <- alice `submit` exercise aliceInvestorCid Investor_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   -- issuers issue tokens
--   btcIssuer `submit` exerciseByKey @Issuer (operator, btcIssuer) Issuer_IssueToken with name = "BTC", quantityPrecision = 6, description = "My BTC token", isPublic = False, observers = []
--   usdtIssuer `submit` exerciseByKey @Issuer (operator, usdtIssuer) Issuer_IssueToken with name = "USDT", quantityPrecision = 2, description = "My USDT token", isPublic = True, observers = [public]
--
--   let btcTokenId = Id with signatories = fromList [ btcIssuer ], label = "BTC", version = 0
--   let usdtTokenId = Id with signatories = fromList [ usdtIssuer ], label = "USDT", version = 0
--
--   -- the issuers disclose the tokens to everyone
--   btcIssuer `submit` exerciseByKey @Token btcTokenId Token_AddObservers with party = btcIssuer, newObservers = fromList [custodian, exchange, alice, broker]
--   usdtIssuer `submit` exerciseByKey @Token usdtTokenId Token_AddObservers with party = usdtIssuer, newObservers = fromList [custodian, exchange, alice, broker]
--
--   -- alice deposits some BTC under her account and gets them in a form of a deposit
--   depositCid <- custodian `submit` exerciseByKey @Custodian (operator, custodian) Custodian_CreateDeposit with tokenId = btcTokenId, depositQuantity = 0.01, beneficiary = alice
--
--   -- oboard exchange
--   exchangeInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardExchange with ..
--   exchangeCid <- exchange `submit` exercise exchangeInvCid ExchangeInvitation_Accept with ..
--
--   exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_AddPair with baseTokenId = btcTokenId, quoteTokenId = usdtTokenId, minQuantity = 0.01, maxQuantity = 10000.0
--
--   -- exchange establishes a relationship with the custodian
--   relationshipReqCid <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   -- broker is onboarded as an exchange participant
--   (_, brokerInvCid) <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = broker
--   broker `submit` exercise brokerInvCid ExchangeParticipantInvitation_Accept
--
--   -- broker invites Alice as a customer
--   aliceBrokerInvCid <- broker `submit` exerciseByKey @Broker (operator, broker) Broker_InviteCustomer with brokerCustomer = alice
--   alice `submit` exercise aliceBrokerInvCid BrokerCustomerInvitation_Accept
--
--   -- alice transfers her bitcoin deposit to her brokerage account
--   let receiverAccountId = Id with signatories = fromList [ custodian ], label = getAccountLabel alice broker, version = 0
--   depositTransferRequestCid <- alice `submit` exerciseByKey @Investor (operator, alice) Investor_RequestDepositTransfer with ..
--   depositCid <- custodian `submit` exercise depositTransferRequestCid DepositTransferRequest_Approve
--
--   -- alice wants to sell 0.01 BTC for a price of 10000 USDT/BTC (ie she is looking to buy 100 USDT)
--   brokerOrderReqCid <- alice `submit` exerciseByKey @BrokerCustomer (broker, operator, alice)
--     BrokerCustomer_RequestOffer with pair = (btcTokenId, usdtTokenId), price = 10000.0, ..
--
--   -- broker accepts her request and takes her btc deposit
--   (brokerOrderCid, depositTransferRequestCid) <- broker `submit` exercise brokerOrderReqCid BrokerOrderRequest_Accept with brokerOrderId = 1, ..
--   depositCid <- custodian `submit` exercise depositTransferRequestCid DepositTransferRequest_Approve
--
--   -- (at this point the broker can go and place the offer on the exchange)
--
--   -- broker deposits some USDT under for themselves
--   depositCid <- custodian `submit` exerciseByKey @Custodian (operator, custodian) Custodian_CreateDeposit with tokenId = usdtTokenId, depositQuantity = 100.0, beneficiary = broker
--
--   -- broker fills alice's order with the USDT deposit
--   depositTransferRequestCid <- broker `submit` exercise brokerOrderCid BrokerOrder_Fill with ..
--
--   -- alice gets her USDT deposit at her brokerage account
--   depositCid <- custodian `submit` exercise depositTransferRequestCid DepositTransferRequest_Approve
--
--   return ()
--
--
-- testBinaryOption = scenario do
--   operator <- getParty "Operator"
--   optionIssuer <- getParty "OptionIssuer"
--   usdtIssuer <- getParty "UsdtIssuer"
--   custodian <- getParty "Custodian"
--   exchange <- getParty "Exchange"
--   public <- getParty "Public"
--
--   alice <- getParty "Alice"
--   bob <- getParty "Bob"
--
--   -- some empty strings to fill in registered users...
--   let (name, title, issuerID, location) = ("", "", "", "")
--
--   -- create operator
--   opCid <- operator `submit` create Operator with ..
--
--   -- onboard custodian
--   custodianInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardCustodian with ..
--   custodian `submit` exercise custodianInvCid CustodianInvitation_Accept with ..
--
--   -- onboard issuers
--   optionIssuerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = optionIssuer, ..
--   optionIssuerCid <- optionIssuer `submit` exercise optionIssuerInvCid IssuerInvitation_Accept with ..
--
--   usdtIssuerInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardIssuer with issuer = usdtIssuer, ..
--   usdtIssuerCid <- usdtIssuer `submit` exercise usdtIssuerInvCid IssuerInvitation_Accept with ..
--
--   -- onboard investors
--   aliceInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardInvestor with investor = alice, ..
--   aliceInvestorCid <- alice `submit` exercise aliceInvCid InvestorInvitation_Accept with isPublic = True, ..
--
--   bobInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardInvestor with investor = bob, ..
--   bobInvestorCid <- bob `submit` exercise bobInvCid InvestorInvitation_Accept with isPublic = True, ..
--
--   -- oboard exchange
--   exchangeInvCid <- operator `submit` exerciseByKey @Operator operator Operator_OnboardExchange with ..
--   exchangeCid <- exchange `submit` exercise exchangeInvCid ExchangeInvitation_Accept with ..
--
--   -- issuers establish a relationship with the custodian
--   relationshipReqCid <- optionIssuer `submit` exercise optionIssuerCid Issuer_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   relationshipReqCid <- usdtIssuer `submit` exercise usdtIssuerCid Issuer_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   -- exchange establishes a relationship with the custodian
--   relationshipReqCid <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_RequestCustodianRelationship with ..
--   custodian `submit` exercise relationshipReqCid CustodianRelationshipRequest_Approve
--
--   -- Alice gets onboarded as an exchange participant
--   (_, aliceInvCid) <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = alice
--   alice `submit` exercise aliceInvCid ExchangeParticipantInvitation_Accept
--
--   -- Bob gets onboarded as an exchange participant
--   (_, bobInvCid) <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = bob
--   bob `submit` exercise bobInvCid ExchangeParticipantInvitation_Accept
--
--   optionIssuer `submit` exerciseByKey @Issuer (operator, optionIssuer) Issuer_IssueBinaryOption with name = "Binary Option", description = "coin flip", minPrice = 0.0, maxPrice = 100.0, isPublic = False, observers = [custodian, exchange, alice, bob]
--   usdtIssuer `submit` exerciseByKey @Issuer (operator, usdtIssuer) Issuer_IssueToken with name = "USDT", quantityPrecision = 2, description = "My USDT token", isPublic = True, observers = []
--
--   let binaryOptionId = Id with signatories = fromList [ optionIssuer ], label = "Binary Option", version = 0
--   let usdtTokenId = Id with signatories = fromList [ usdtIssuer ], label = "USDT", version = 0
--
--   -- the issuers disclose the tokens to everyone
--   optionIssuer `submit` exerciseByKey @BinaryOption binaryOptionId BinaryOption_AddObservers with party = optionIssuer, newObservers = fromList [custodian, exchange, alice, bob]
--   usdtIssuer `submit` exerciseByKey @Token usdtTokenId Token_AddObservers with party = usdtIssuer, newObservers = fromList [custodian, exchange, alice, bob]
--
--   -- Alice deposits some USDT under her account
--   depositCid1 <- custodian `submit` exerciseByKey @Custodian (operator, custodian) Custodian_CreateDeposit with tokenId = usdtTokenId, depositQuantity = 1000.0, beneficiary = alice
--
--   -- Bob deposits some USDT under his account
--   depositCid2 <- custodian `submit` exerciseByKey @Custodian (operator, custodian) Custodian_CreateDeposit with tokenId = usdtTokenId, depositQuantity = 1000.0, beneficiary = bob
--
--   -- the exchange adds support for Binary Option / USDT pair
--   exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_AddBinaryOption with binOptionId = binaryOptionId, quoteTokenId = usdtTokenId
--
--   -- Alice places a bid for the Binary Option
--   depositTransferRequest <- alice `submit` exerciseByKey @Investor (operator, alice) Investor_AllocateToProvider with provider = exchange, depositCid = depositCid1, ..
--   depositCid1 <- custodian `submit` exercise depositTransferRequest DepositTransferRequest_Approve
--
--   -- (the price is 80 which is the equivalent of risking 80 for a payoff of 100 or "backing the 1.25 odds for a stake of 2.5 * 80 = 200")
--   bidOrderRequestCid <- alice `submit` exerciseByKey @ExchangeParticipant (exchange, operator, alice) ExchangeParticipant_PlaceBinaryOptionOrder with depositCid = depositCid1, binOption = (binaryOptionId, usdtTokenId), price = 80.00, qty = 2.5, isBid = True
--   bidOrderCid <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_ApproveOrderRequest with orderRequestCid = bidOrderRequestCid, orderId = 1
--
--   -- Bob places an offer for the Binary Option
--   depositTransferRequest <- bob `submit` exerciseByKey @Investor (operator, bob) Investor_AllocateToProvider with provider = exchange, depositCid = depositCid2, ..
--   depositCid2 <- custodian `submit` exercise depositTransferRequest DepositTransferRequest_Approve
--
--   -- (the price is 80 which is the equivalent of risking 100 - 80 = 20 for a payoff of 100 or "laying the 1.25 odds for a stake of 2 * 20 = 40")
--   offerOrderRequestCid <- bob `submit` exerciseByKey @ExchangeParticipant (exchange, operator, bob) ExchangeParticipant_PlaceBinaryOptionOrder with depositCid = depositCid2, binOption = (binaryOptionId, usdtTokenId), price = 80.00, qty = 2.0, isBid = False
--   offerOrderCid <- exchange `submit` exerciseByKey @Exchange (operator, exchange) Exchange_ApproveOrderRequest with orderRequestCid = offerOrderRequestCid, orderId = 2
--
--   -- exchange matches the two orders
--   (buyTradeCid, _) <- exchange `submit` exercise bidOrderCid Order_FillBinaryOption with fillQty = 2.0, fillPrice = 80.0, counterParty = bob, counterOrderId = 2, timestamp = "1601394768171637000"
--   (sellTradeCid, _) <- exchange `submit` exercise offerOrderCid Order_FillBinaryOption with fillQty = 2.0, fillPrice = 80.00, counterParty = alice, counterOrderId = 1, timestamp = "1601394768171637000"
--
--   -- issuer settles the option
--   settledBinOptionCid <- optionIssuer `submit` exerciseByKey @BinaryOption binaryOptionId BinaryOption_Settle with outcome = True
--
--   exchange `submit` exercise buyTradeCid TradeSide_SettleBinaryOption with settledBinOptionCid
--   (_, Some depositTransferRequest) <- exchange `submit` exercise sellTradeCid TradeSide_SettleBinaryOption with settledBinOptionCid
--
--   depositCid1 <- custodian `submit` exercise depositTransferRequest DepositTransferRequest_Approve
--
--   return ()
