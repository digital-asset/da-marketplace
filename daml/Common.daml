module Common where

import ContingentClaims.Claim.Serializable (Claim(Zero))
import Daml.Script
import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Types (Id(..), Asset(..), Account(..))
import DA.Next.Set
import Marketplace.AssetDescription (AssetDescription(..))
import qualified Marketplace.Operator as Operator
import qualified Marketplace.Custodian as Custodian
import qualified Marketplace.Custody as Custody
import qualified Marketplace.Issuance as Issuance
import qualified Marketplace.Trading.Exchange as Exchange
import qualified Marketplace.Trading.Matching as Matching
import qualified Marketplace.Trading.Service as Trading
import qualified Marketplace.Trading.Listing as Listing
import qualified Marketplace.Settlement as Settlement
import qualified Marketplace.Distribution.Distributor as Distributor
import qualified Marketplace.Distribution.Bidding.Service as Bidding
import qualified Marketplace.Regulator as Regulator

data Assets = Assets
  with
    usd : Asset
    tsla : Asset
    nflx : Asset

data Providers = Providers
  with
    operator : Party
    bank : Party
    exchange : Party
    public : Party
    operatorServiceCid : ContractId Operator.Service
    custodianRoleCid : ContractId Custodian.Role
    exchangeRoleCid : ContractId Exchange.Role
    matchingServiceCid : ContractId Matching.Service
    settlementServiceCid : ContractId Settlement.Service
    distributorRoleCid : ContractId Distributor.Role

-- TODO: consider whether these services need to be more granular. i.e. does a custody relationship allow execution, tarde-away, safekeeping etc. in one go
data Customer = Customer
  with
    customer : Party
    tradingServiceCid : ContractId Trading.Service
    listingServiceCid : ContractId Listing.Service
    issuanceServiceCid : ContractId Issuance.Service
    custodyServiceCid : ContractId Custody.Service
    biddingServiceCid : ContractId Bidding.Service
    mainAccount : Account
    exchangeLockedAccount : Account
    auctionLockedAccount : Account

onboardProviders : Script Providers
onboardProviders = do
  -- Parties
  operator <- allocatePartyWithHint "Operator" $ PartyIdHint "Operator"
  bank <- allocatePartyWithHint "Bank" $ PartyIdHint "Bank"
  exchange <- allocatePartyWithHint "Exchange" $ PartyIdHint "Exchange"
  public <- allocatePartyWithHint "Public" $ PartyIdHint "Public"

  -- Roles
  operatorServiceCid <- submit operator do createCmd Operator.Service with ..
  custodianRoleOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferCustodianRole with provider = bank
  custodianRoleCid <- submit bank do exerciseCmd custodianRoleOfferCid Custodian.Accept
  exchangeRoleOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferExchangeRole with provider = exchange
  exchangeRoleCid <- submit exchange do exerciseCmd exchangeRoleOfferCid Exchange.Accept
  matchingServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferMatchingService with provider = exchange
  matchingServiceCid <- submit exchange do exerciseCmd matchingServiceOfferCid Matching.Accept
  settlementServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferSettlementService with provider = exchange
  settlementServiceCid <- submit exchange do exerciseCmd settlementServiceOfferCid Settlement.Accept
  distributorRoleOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferDistributorRole with provider = bank
  distributorRoleCid <- submit bank do exerciseCmd distributorRoleOfferCid Distributor.Accept

  -- Identities
  regulatorServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferRegulatorService with provider = operator; customer = bank
  regulatorServiceCid <- submit bank do exerciseCmd regulatorServiceOfferCid Regulator.Accept
  identityVerificationRequestCid <- submit bank do exerciseCmd regulatorServiceCid Regulator.RequestIdentityVerification with legalName = "BankLegalName"; location = "BankLocation"; observers = [public]
  verifiedIdentity <- submit operator do exerciseCmd regulatorServiceCid Regulator.VerifyIdentity with ..
  regulatorServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferRegulatorService with provider = operator; customer = exchange
  regulatorServiceCid <- submit exchange do exerciseCmd regulatorServiceOfferCid Regulator.Accept
  identityVerificationRequestCid <- submit exchange do exerciseCmd regulatorServiceCid Regulator.RequestIdentityVerification with legalName = "ExchangeLegalName"; location = "ExchangeLocation"; observers = [public]
  verifiedIdentity <- submit operator do exerciseCmd regulatorServiceCid Regulator.VerifyIdentity with ..

  pure Providers with ..

onboardCustomer : Providers -> Text -> Script Customer
onboardCustomer Providers{..} party = do
  customer <- allocatePartyWithHint party $ PartyIdHint party
  let
    mainAccountId      = Id with signatories = fromList [ bank, customer ]; label = "MainAccount-" <> party; version = 0
    mainAccount        = Account with provider = bank; owner = customer; id = mainAccountId
    exchangeLockedAccountId   = Id with signatories = fromList [ bank, customer ]; label = "ExchangeLockedAccount-" <> party; version = 0
    exchangeLockedAccount     = Account with provider = bank; owner = customer; id = exchangeLockedAccountId
    auctionLockedAccountId   = Id with signatories = fromList [ bank, customer ]; label = "AuctionLockedAccount-" <> party; version = 0
    auctionLockedAccount     = Account with provider = bank; owner = customer; id = auctionLockedAccountId

  -- Custody service
  custodyServiceOfferCid <- submit bank do exerciseCmd custodianRoleCid Custodian.OfferCustodyService with ..
  custodyServiceCid <- submit customer do exerciseCmd custodyServiceOfferCid Custody.Accept

  -- Accounts
  openAccountRequestCid <- submit customer do exerciseCmd custodyServiceCid Custody.RequestOpenAccount with accountId = mainAccountId; observers = [exchange, bank]; ctrls = [bank, customer]
  submit bank do exerciseCmd custodyServiceCid Custody.OpenAccount with openAccountRequestCid = openAccountRequestCid
  openAccountRequestCid <- submit customer do exerciseCmd custodyServiceCid Custody.RequestOpenAllocationAccount with accountId = exchangeLockedAccountId; observers = empty; nominee = exchange
  submit bank do exerciseCmd custodyServiceCid Custody.OpenAllocationAccount with openAllocationAccountRequestCid = openAccountRequestCid
  openAccountRequestCid <- submit customer do exerciseCmd custodyServiceCid Custody.RequestOpenAllocationAccount with accountId = auctionLockedAccountId; observers = empty; nominee = bank
  submit bank do exerciseCmd custodyServiceCid Custody.OpenAllocationAccount with openAllocationAccountRequestCid = openAccountRequestCid

  -- Trading and Listing services
  tradingServiceOfferCid <- submit exchange do exerciseCmd exchangeRoleCid Exchange.OfferTradingService with ..
  tradingServiceCid <- submit customer do exerciseCmd tradingServiceOfferCid Trading.Accept with tradingAccount = mainAccount; allocationAccount = exchangeLockedAccount
  listingServiceOfferCid <- submit exchange do exerciseCmd exchangeRoleCid Exchange.OfferListingService with ..
  listingServiceCid <- submit customer do exerciseCmd listingServiceOfferCid Listing.Accept
  issuanceServiceOfferCid <- submit bank do exerciseCmd custodianRoleCid Custodian.OfferIssuanceService with ..
  issuanceServiceCid <- submit customer do exerciseCmd issuanceServiceOfferCid Issuance.Accept

  -- Identity
  regulatorServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferRegulatorService with provider = operator; ..
  regulatorServiceCid <- submit customer do exerciseCmd regulatorServiceOfferCid Regulator.Accept
  identityVerificationRequestCid <- submit customer do exerciseCmd regulatorServiceCid Regulator.RequestIdentityVerification with observers = [public]; legalName = party <> " Legal Name"; location = party <> " Location"
  verifiedIdentity <- submit operator do exerciseCmd regulatorServiceCid Regulator.VerifyIdentity with ..

  -- Bidding Service
  biddingServiceOfferCid <- submit bank do exerciseCmd distributorRoleCid Distributor.OfferBiddingService with ..
  biddingServiceCid <- submit customer do exerciseCmd biddingServiceOfferCid Bidding.Accept with tradingAccount = mainAccount; allocationAccount = auctionLockedAccount

  pure $ Customer with ..

onboardAssets : Providers -> Script Assets
onboardAssets Providers{..} = do
  let
    safekeepingAccountId = Id with signatories = fromList [bank]; label = "BankSafekeepingAccount"; version = 0
    observers = singleton public
    usdId = Id with signatories = fromList [ bank ]; label = "USD"; version = 0
    usd = Asset with id = usdId; quantity = 0.0
    tslaId = Id with signatories = singleton bank; label = "TSLA"; version = 0
    tsla = Asset with id = tslaId; quantity = 0.0
    nflxId = Id with signatories = singleton bank; label = "NFLX"; version = 0
    nflx = Asset with id = nflxId; quantity = 0.0
    dUnitId = Id with signatories = singleton bank; label = "DAH-D"; version = 0
    dUnit = Asset with id = nflxId; quantity = 0.0

  submit bank do createCmd AssetDescription with assetId = usdId; description = "United States Dollar"; issuer = bank; claims = Zero; ..
  submit bank do createCmd AssetDescription with assetId = nflxId; description = "Netflix, Inc. Common Stock"; issuer = bank; claims = Zero; ..
  submit bank do createCmd AssetDescription with assetId = tslaId; description = "Tesla, Inc. Common Stock"; issuer = bank; claims = Zero; ..
  submit bank do createCmd AssetDescription with assetId = dUnitId; description = "Digital Asset Holdings D-Unit"; issuer = bank; claims = Zero; ..

  pure Assets with ..

depositAsset : Providers -> Customer -> Asset -> Id -> Script (ContractId AssetDeposit)
depositAsset Providers{..} Customer{..} asset accountId = do
  -- Assets
  creditAccountRequestCid <- submit customer do exerciseCmd custodyServiceCid Custody.RequestCreditAccount with accountId = accountId; asset
  submit bank do exerciseCmd custodyServiceCid Custody.CreditAccount with ..
