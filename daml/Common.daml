module Common where

import Daml.Script
import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Asset.Settlement (AssetSettlementRule)
import DA.Finance.Types (Id(..), Asset(..), Account(..))
import DA.Next.Set
import Marketplace.Trading.AllocationAccountRule (AllocationAccountRule(..))
import qualified Marketplace.Operator as Operator
import qualified Marketplace.Custodian as Custodian
import qualified Marketplace.Custody as Custody
import qualified Marketplace.Issuance as Issuance
import qualified Marketplace.Trading.Exchange as Exchange
import qualified Marketplace.Trading.Matching as Matching
import qualified Marketplace.Trading.Service as Trading
import qualified Marketplace.Trading.Listing as Listing
import qualified Marketplace.Settlement as Settlement
import qualified Marketplace.Distribution.Distributor as Distributor
import qualified Marketplace.Regulator as Regulator

data CommonContracts = CommonContracts
  with
    operator : Party
    custodian : Party
    exchange : Party
    auctionAgent : Party
    public : Party
    operatorServiceCid : ContractId Operator.Service
    custodianRoleCid : ContractId Custodian.Role
    exchangeRoleCid : ContractId Exchange.Role
    matchingServiceCid : ContractId Matching.Service
    settlementServiceCid : ContractId Settlement.Service
    distributorRoleCid : ContractId Distributor.Role

data CustomerContracts = CustomerContracts
  with
    customer : Party
    tradingServiceCid : ContractId Trading.Service
    listingServiceCid : ContractId Listing.Service
    issuanceServiceCid: ContractId Issuance.Service
    custodyServiceCid: ContractId Custody.Service
    allocationAccountRuleCid : ContractId AllocationAccountRule
    tradingAssetSettlementRuleCid : ContractId AssetSettlementRule
    allocationAccountId : Id
    allocationAccount : Account
    tradingAccountId : Id
    tradingAccount : Account
    awayAccountId : Id
     -- TODO: consider whether these services need to be more granular. i.e. does a custody relationship allow execution, tarde-away, safekeeping etc. in one go
    safekeepingAccountId: Id
    awayAccount : Account
    assetDepositCid : ContractId AssetDeposit

onboardCommon : Script CommonContracts
onboardCommon = do
  -- Parties
  operator <- allocatePartyWithHint "Operator" $ PartyIdHint "Operator"
  custodian <- allocatePartyWithHint "Custodian" $ PartyIdHint "Custodian"
  exchange <- allocatePartyWithHint "Exchange" $ PartyIdHint "Exchange"
  auctionAgent <- allocatePartyWithHint "AuctionAgent" $ PartyIdHint "AuctionAgent"
  public <- allocatePartyWithHint "Public" $ PartyIdHint "Public"

  -- Roles
  operatorServiceCid <- submit operator do createCmd Operator.Service with ..
  custodianRoleOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferCustodianRole with provider = custodian
  custodianRoleCid <- submit custodian do exerciseCmd custodianRoleOfferCid Custodian.Accept
  exchangeRoleOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferExchangeRole with provider = exchange
  exchangeRoleCid <- submit exchange do exerciseCmd exchangeRoleOfferCid Exchange.Accept
  matchingServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferMatchingService with provider = exchange
  matchingServiceCid <- submit exchange do exerciseCmd matchingServiceOfferCid Matching.Accept
  settlementServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferSettlementService with provider = exchange
  settlementServiceCid <- submit exchange do exerciseCmd settlementServiceOfferCid Settlement.Accept
  distributorRoleOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferDistributorRole with provider = auctionAgent
  distributorRoleCid <- submit auctionAgent do exerciseCmd distributorRoleOfferCid Distributor.Accept

  -- Identities
  regulatorServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferRegulatorService with provider = operator; customer = custodian
  regulatorServiceCid <- submit custodian do exerciseCmd regulatorServiceOfferCid Regulator.Accept
  identityVerificationRequestCid <- submit custodian do exerciseCmd regulatorServiceCid Regulator.RequestIdentityVerification with legalName = "CusotidanLegalName"; location = "CustodianLocation"; observers = [public]
  verifiedIdentity <- submit operator do exerciseCmd regulatorServiceCid Regulator.VerifyIdentity with ..
  regulatorServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferRegulatorService with provider = operator; customer = exchange
  regulatorServiceCid <- submit exchange do exerciseCmd regulatorServiceOfferCid Regulator.Accept
  identityVerificationRequestCid <- submit exchange do exerciseCmd regulatorServiceCid Regulator.RequestIdentityVerification with legalName = "ExchangeLegalName"; location = "ExchangeLocation"; observers = [public]
  verifiedIdentity <- submit operator do exerciseCmd regulatorServiceCid Regulator.VerifyIdentity with ..

  pure CommonContracts with ..

onboardCustomer : CommonContracts -> Text -> Asset -> Party -> Script CustomerContracts
onboardCustomer CommonContracts{..} party asset accountNominee = do
  customer <- allocatePartyWithHint party $ PartyIdHint party
  let
    tradingAccountId      = Id with signatories = fromList [ custodian, customer ]; label = "TradingAccount-" <> party; version = 0
    tradingAccount        = Account with provider = custodian; owner = customer; id = tradingAccountId
    allocationAccountId   = Id with signatories = fromList [ custodian, customer ]; label = "AllocationAccount-" <> party; version = 0
    allocationAccount     = Account with provider = custodian; owner = customer; id = allocationAccountId
    awayAccountId         = Id with signatories = fromList [ custodian, customer ]; label = "AwayAccount-" <> party; version = 0
    awayAccount           = Account with provider = custodian; owner = customer; id = awayAccountId
    safekeepingAccountId  = Id with signatories = fromList [ custodian, customer ]; label = "SafekeepingAccount-" <> party; version = 0
    safekeepingAccount    = Account with provider = custodian; owner = customer; id = safekeepingAccountId

  -- Custody service
  custodyServiceOfferCid <- submit custodian do exerciseCmd custodianRoleCid Custodian.OfferCustodyService with ..
  custodyServiceCid <- submit customer do exerciseCmd custodyServiceOfferCid Custody.Accept

  -- Accounts
  tradingOpenAccountRequestCid <- submit customer do exerciseCmd custodyServiceCid Custody.RequestOpenAccount with accountId = tradingAccountId; observers = [accountNominee]; ctrls = [ custodian, customer ]
  tradingAssetSettlementRuleCid <- submit custodian do exerciseCmd custodyServiceCid Custody.OpenAccount with openAccountRequestCid = tradingOpenAccountRequestCid
  allocationOpenAccountRequestCid <- submit customer do exerciseCmd custodyServiceCid Custody.RequestOpenAllocationAccount with accountId = allocationAccountId; observers = empty; nominee = accountNominee
  allocationAccountRuleCid <- submit custodian do exerciseCmd custodyServiceCid Custody.OpenAllocationAccount with openAllocationAccountRequestCid = allocationOpenAccountRequestCid
  awayOpenAccountRequestCid <- submit customer do exerciseCmd custodyServiceCid Custody.RequestOpenAccount with accountId = awayAccountId; observers = [accountNominee]; ctrls = [customer]
  awayAssetSettlementRuleCid <- submit custodian do exerciseCmd custodyServiceCid Custody.OpenAccount with openAccountRequestCid = awayOpenAccountRequestCid
  safekeepingOpenAccountRequestCid <- submit customer do exerciseCmd custodyServiceCid Custody.RequestOpenAccount with accountId = safekeepingAccountId; observers = empty; ctrls = fromList [ custodian, customer ]
  safekeepingAssetSettlementRuleCid <- submit custodian do exerciseCmd custodyServiceCid Custody.OpenAccount with openAccountRequestCid = safekeepingOpenAccountRequestCid

  -- Trading and Listing services
  tradingServiceOfferCid <- submit exchange do exerciseCmd exchangeRoleCid Exchange.OfferTradingService with ..
  tradingServiceCid <- submit customer do exerciseCmd tradingServiceOfferCid Trading.Accept with ..
  listingServiceOfferCid <- submit exchange do exerciseCmd exchangeRoleCid Exchange.OfferListingService with ..
  listingServiceCid <- submit customer do exerciseCmd listingServiceOfferCid Listing.Accept
  issuanceServiceOfferCid <- submit custodian do exerciseCmd custodianRoleCid Custodian.OfferIssuanceService with client = customer, ..
  issuanceServiceCid <- submit customer do exerciseCmd issuanceServiceOfferCid Issuance.Accept

  -- Identitiy
  regulatorServiceOfferCid <- submit operator do exerciseCmd operatorServiceCid Operator.OfferRegulatorService with provider = operator; ..
  regulatorServiceCid <- submit customer do exerciseCmd regulatorServiceOfferCid Regulator.Accept
  identityVerificationRequestCid <- submit customer do exerciseCmd regulatorServiceCid Regulator.RequestIdentityVerification with observers = [public]; legalName = party <> " Legal Name"; location = party <> " Location"
  verifiedIdentity <- submit operator do exerciseCmd regulatorServiceCid Regulator.VerifyIdentity with ..

  -- Assets
  creditAccountRequestCid <- submit customer do exerciseCmd custodyServiceCid Custody.RequestCreditAccount with accountId = tradingAccountId; ..
  assetDepositCid <- submit custodian do exerciseCmd custodyServiceCid Custody.CreditAccount with ..

  pure $ CustomerContracts with ..
