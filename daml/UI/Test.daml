module UI.Test where

import UI.Onboarding
import qualified Marketplace.Operator.Role as Operator
import DA.Set qualified as Set

import Daml.Script

testOnboarding : Script ()
testOnboarding = do
  operator <- allocatePartyWithHint "Operator" $ PartyIdHint "Operator"
  bank <- allocatePartyWithHint "Bank" $ PartyIdHint "Bank"
  distribution <- allocatePartyWithHint "AuctionHouse" $ PartyIdHint "AuctionHouse"
  exchange <- allocatePartyWithHint "Exchange" $ PartyIdHint "Exchange"

  alice  <- allocatePartyWithHint "Alice" $ PartyIdHint "Alice"
  bob    <- allocatePartyWithHint "Bob" $ PartyIdHint "Bob"
  public <- allocatePartyWithHint "Public" $ PartyIdHint "Public"

  operatorRoleCId <- operator `submit` createCmd Operator.Role with observers = Set.fromList [public]; ..
  bank `submit` createCmd ProviderOnboarding with provider = bank; ..
  distribution `submit` createCmd ProviderOnboarding with provider = distribution; ..
  exchange `submit` createCmd ProviderOnboarding with provider = exchange; ..

  let testInvestor = [ OnboardExchange
                     , OnboardCustody with provider = bank
                     , OnboardTrading with provider = exchange,     custodian = bank, optTradingAccount = Some "Main"
                     , OnboardBidding with provider = distribution, custodian = bank, optTradingAccount = Some "Main"
                     , OnboardAuction with provider = distribution, custodian = bank, optTradingAccount = None, optReceivableAccount = None ]

  onboardRequestCid <- alice `submit` createCmd OnboardRequest with instructions = testInvestor; customer = alice; ..
  onboardRequestCid <- bob `submit` createCmd OnboardRequest with instructions = testInvestor;   customer = bob; ..

  operator `submit` exerciseCmd onboardRequestCid ApproveOnboardRequest

  -- assert $ accountsWithObservers testInvestor == Map.fromList [("Main", [exchange, bank])]
  return ()

