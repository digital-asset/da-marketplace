module Tests.BinaryOption where
-- ^ This module tests the full lifecycle of a binary option

import Common (Providers(..), onboardProviders, onboardCustomer)
import DA.Date (date, datetime, Month(Mar))
import DA.Finance.Types (Id(..), Asset(..))
import DA.Finance.Asset.Settlement (AssetSettlementRule(..), AssetSettlement_AddController(..), AssetSettlement_RemoveController(..), AssetSettlement_Transfer(..))
import DA.Finance.Asset (AssetDeposit(..))
import Daml.Script
import DA.Next.Set qualified as Set
import DA.Next.Map qualified as Map
import Marketplace.Issuance (RequestBinaryCallOptionOrigination(..), Originate(..), RequestCreateIssuance(..), CreateIssuance(..))
import Marketplace.Custody (RequestTransferDeposit(..), TransferDeposit(..), RequestLifecycle(..), Lifecycle(..), RequestCreditAccount(..), CreditAccount(..))

endToEnd: Script [ ContractId AssetDeposit ]
endToEnd = do
  providers@Providers{..} <- onboardProviders

  let usdId = Id with
                signatories = Set.singleton bank
                label = "USD"
                version = 0
      usdAsset = Asset with id = usdId, quantity = 100.0
      underlyingId = Id with
                       signatories = Set.singleton bank
                       label = "TSLA"
                       version = 0
      underlyingAsset = Asset with id = underlyingId, quantity = 200.0

  alice <- onboardCustomer providers "Alice"
  bob <- onboardCustomer providers "Bob"

  -- Alice originates the option
  origReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid RequestBinaryCallOptionOrigination with
      assetLabel = "TSLA Mar21 910.0"
      safekeepingAccountId = alice.mainAccount.id
      expiry = date 2020 Mar 18
      underlyingId = underlyingId
      currencyId = usdId
      strike = 910.0
      observers = []
  optionDescCid :: _ <- submit bank $ exerciseCmd alice.issuanceServiceCid $ Originate origReqCid
  Some optionDesc <- queryContractId bank optionDescCid

  -- Alice issues the option
  createReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid
    RequestCreateIssuance with
      issuanceId = "Myissuance"
      accountId = Id (Set.fromList [alice.customer, bank]) alice.mainAccount.id.label 0
      assetId = optionDesc.assetId
      quantity = 1000.0
  (_issuanceCid, optionDepositCid) <- submit bank $ exerciseCmd alice.issuanceServiceCid $ CreateIssuance createReqCid

  -- Alice gifts the option to Bob
  submit bob.customer $ exerciseByKeyCmd @AssetSettlementRule bob.mainAccount.id AssetSettlement_AddController with ctrl = alice.customer
  xferReqCid <- submit alice.customer $ exerciseCmd alice.custodyServiceCid RequestTransferDeposit with accountId = alice.mainAccount.id, transfer = AssetSettlement_Transfer with receiverAccountId = bob.mainAccount.id, depositCid = optionDepositCid
  optionDepositCid <- submit bank $ exerciseCmd alice.custodyServiceCid $ TransferDeposit xferReqCid
  submit bob.customer $ exerciseByKeyCmd @AssetSettlementRule bob.mainAccount.id AssetSettlement_RemoveController with ctrl = alice.customer

  -- The option expires at maturity
  setTime $ datetime 2020 Mar 18 16 30 00

  -- The issuer, Alice, must deposit the payout in the safekeeping account
  corpActReqCid <- submit alice.customer $ exerciseCmd alice.custodyServiceCid RequestCreditAccount with
    accountId = alice.mainAccount.id
    asset = usdAsset
  corpActDepositCid <- submit bank $ exerciseCmd alice.custodyServiceCid CreditAccount with
    creditAccountRequestCid = corpActReqCid

  -- Bob exercises the Option
  lifecycleReqCid <- submit bob.customer $ exerciseCmd bob.custodyServiceCid RequestLifecycle with
    assetDepositCid = optionDepositCid
    postAssetVersion = 1 -- TODO: How do we get this in practice? From a UI?
  submit bank $ exerciseCmd alice.custodyServiceCid $ Lifecycle with
    safekeepingDepositCid = corpActDepositCid -- TODO: how do we get this in practice?
    lifecycleRequestCid = lifecycleReqCid
    fixings = Map.fromList [ ("TSLA", Map.insert (date 2020 Mar 18) 920.0 Map.empty) ]
