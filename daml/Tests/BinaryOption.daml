module Tests.BinaryOption where
-- ^ This module tests the full lifecycle of a binary option

import Common (onboardProviders, onboardCustomer)
import ContingentClaims.Claim (serialize)
import DA.Date (date, Month(Mar))
import DA.Finance.Types (Id(..), Asset(..))
import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Asset.Settlement (AssetSettlementRule(..), AssetSettlement_AddController(..), AssetSettlement_RemoveController(..), AssetSettlement_Transfer(..))
import Daml.Script
import DA.Next.Set qualified as Set
import DA.Map qualified as Map
import Marketplace.Issuance.Service (RequestOrigination(..), Originate(..), RequestCreateIssuance(..), CreateIssuance(..))
import Marketplace.Custody.Service (RequestTransferDeposit(..), TransferDeposit(..), RequestLifecycle(..), Lifecycle(..), RequestCreditAccount(..), CreditAccount(..))
import Tests.Utils (binaryCallOption)
import DA.Time (time)
import DA.Assert

endToEnd = script do
  providers <- onboardProviders

  let usdId = Id with
                signatories = Set.singleton providers.bank
                label = "USD"
                version = 0
      usdAsset = Asset with id = usdId, quantity = 3000.0
      underlyingId = Id with
                       signatories = Set.singleton providers.bank
                       label = "TSLA"
                       version = 0
      strike = 910.0: Decimal
      expiration = date 2020 Mar 18

  alice <- onboardCustomer providers "Alice"
  bob <- onboardCustomer providers "Bob"

  -- Alice originates the option
  let boClaims = binaryCallOption underlyingId usdId strike expiration
  origReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid RequestOrigination with
      assetLabel = "TSLA Mar21 910.0"
      description = "Tesla Binary Option"
      safekeepingAccountId = alice.mainAccount.id
      claims = serialize boClaims
      observers = []
  (optionDescCid, optionDesc) <- submit providers.bank $ exerciseCmd alice.issuanceServiceCid $ Originate origReqCid

  -- Alice issues the option
  createReqCid <- submit alice.customer $ exerciseCmd alice.issuanceServiceCid
    RequestCreateIssuance with
      issuanceId = "Myissuance"
      accountId = Id (Set.fromList [alice.customer, providers.bank]) alice.mainAccount.id.label 0
      assetId = optionDesc.assetId
      quantity = 1000.0 -- TODO is this unused ???
  (_issuanceCid, optionDepositCid) <- submit providers.bank $ exerciseCmd alice.issuanceServiceCid $ CreateIssuance createReqCid

  -- Alice gifts the option to Bob
  submit bob.customer $ exerciseByKeyCmd @AssetSettlementRule bob.mainAccount.id AssetSettlement_AddController with ctrl = alice.customer
  xferReqCid <- submit alice.customer $ exerciseCmd alice.custodyServiceCid RequestTransferDeposit with accountId = alice.mainAccount.id, transfer = AssetSettlement_Transfer with receiverAccountId = bob.mainAccount.id, depositCid = optionDepositCid
  optionDepositCid <- submit providers.bank $ exerciseCmd alice.custodyServiceCid $ TransferDeposit xferReqCid
  submit bob.customer $ exerciseByKeyCmd @AssetSettlementRule bob.mainAccount.id AssetSettlement_RemoveController with ctrl = alice.customer

  -- The option expires at maturity
  setTime $ time expiration 16 30 00

  -- The issuer, Alice, must deposit the payout in the safekeeping account
  corpActReqCid <- submit alice.customer $ exerciseCmd alice.custodyServiceCid RequestCreditAccount with
    accountId = alice.mainAccount.id
    asset = usdAsset
  corpActDepositCid <- submit providers.bank $ exerciseCmd alice.custodyServiceCid CreditAccount with
    creditAccountRequestCid = corpActReqCid

  -- Bob exercises the Option
  lifecycleReqCid <- submit bob.customer $ exerciseCmd bob.custodyServiceCid RequestLifecycle with
    assetDepositCid = optionDepositCid
    choice = optionDesc.claims.obligation.lhs -- TODO: How do we get this in practice? From a UI?
  submit providers.bank $ exerciseCmd alice.custodyServiceCid $ Lifecycle with
    safekeepingDepositCid = corpActDepositCid -- TODO: how do we get this in practice?
    lifecycleRequestCid = lifecycleReqCid
    fixings = Map.fromList [ ("TSLA", Map.insert expiration 920.0 Map.empty) ]

  [(_, bobsOption)] <- queryFilter @AssetDeposit bob.customer (\c -> c.asset.id.label == "TSLA Mar21 910.0")
  bobsOption.asset.id.version === 1
  [(_, bobsMoney)] <- queryFilter @AssetDeposit bob.customer (\c -> c.asset.id.label == "USD")
  bobsMoney.asset.quantity === 1000.0
  [(_, alicesMoney)] <- queryFilter @AssetDeposit alice.customer (\c -> c.asset.id.label == "USD")
  alicesMoney.asset.quantity === 2000.0
