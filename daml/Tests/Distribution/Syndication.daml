module Tests.Distribution.Syndication where

import ContingentClaims.Claim (Claim(Zero), serialize)
import ContingentClaims.FinancialClaim (unrollDates)
import ContingentClaims.Observation (Observation)
import Daml.Script
import DA.Date (Month(..))
import DA.Finance.Asset (AssetDeposit(..), AssetDeposit_Split(..))
import DA.Finance.Types (Account, Asset(..), Id(..))
import DA.List (head)
import DA.Optional (isNone, isSome, mapOptional)
import DA.Set (fromList, empty)
import Marketplace.Operator.Role qualified as Operator
import Marketplace.Custody.Role qualified as Custodian
import Marketplace.Custody.Service qualified as Custody
import Marketplace.Issuance.AssetDescription (AssetDescription)
import Marketplace.Issuance.CFI qualified as CFI
import Marketplace.Issuance.Service qualified as Issuance
import Marketplace.Distribution.Syndication.Bidding.Model qualified as Bidding
import Marketplace.Distribution.Syndication.Bidding.Service qualified as Bidding
import Marketplace.Distribution.Syndication.BookBuilding.Model qualified as BookBuilding
import Marketplace.Distribution.Syndication.BookBuilding.Service qualified as BookBuilding
import Marketplace.Distribution.Syndication.Structurer qualified as Structurer
import Marketplace.Distribution.Syndication.Distributor qualified as Distributor
import Marketplace.Distribution.Syndication.Structuring.Model qualified as Structuring
import Marketplace.Distribution.Syndication.Structuring.Service qualified as Structuring
import Marketplace.Settlement.Hierarchical (SettlementInstruction, Allocate(..), Sign(..), Settle(..))

import Tests.Utils

createCustodianRole : Party -> Party -> Script (ContractId Custodian.Role)
createCustodianRole operator provider = do
  custodianRoleOfferCid <- submit operator do exerciseByKeyCmd @Operator.Role operator Operator.OfferCustodianRole with provider
  submit provider do exerciseCmd custodianRoleOfferCid Custodian.Accept

createCustodyService : Party -> Party -> Party -> Script (ContractId Custody.Service, Account)
createCustodyService operator provider customer = do
  custodyServiceOfferCid <- submit provider do exerciseByKeyCmd @Custodian.Role (operator, provider) Custodian.OfferCustodyService with ..
  serviceCid <- submit customer do exerciseCmd custodyServiceOfferCid Custody.Accept
  Some service <- queryContractId customer serviceCid
  pure (serviceCid, service.account)

createIssuanceService : Party -> Party -> Party -> Script (ContractId Issuance.Service)
createIssuanceService operator provider customer = do
  issuanceServiceOfferCid <- submit provider do exerciseByKeyCmd @Custodian.Role (operator, provider) Custodian.OfferIssuanceService with ..
  submit customer do exerciseCmd issuanceServiceOfferCid Issuance.Accept

createStructurerRole : Party -> Party -> Script (ContractId Structurer.Role)
createStructurerRole operator provider = do
  structurerRoleOfferCid <- submit operator do exerciseByKeyCmd @Operator.Role operator Operator.OfferSyndicationStructurerRole with provider
  submit provider do exerciseCmd structurerRoleOfferCid Structurer.Accept

createDistributorRole : Party -> Party -> Script (ContractId Distributor.Role)
createDistributorRole operator provider = do
  distributorRoleOfferCid <- submit operator do exerciseByKeyCmd @Operator.Role operator Operator.OfferSyndicationDistributorRole with provider
  submit provider do exerciseCmd distributorRoleOfferCid Distributor.Accept

createStructuringService : Party -> Party -> Party -> Script (ContractId Structuring.Service)
createStructuringService operator provider customer = do
  structuringServiceOfferCid <- submit provider do exerciseByKeyCmd @Structurer.Role (operator, provider) Structurer.OfferStructuringService with ..
  submit customer do exerciseCmd structuringServiceOfferCid Structuring.Accept

createBookBuildingService : Party -> Party -> Party -> Script (ContractId BookBuilding.Service)
createBookBuildingService operator provider customer = do
  bookBuildingServiceOfferCid <- submit provider do exerciseByKeyCmd @Distributor.Role (operator, provider) Distributor.OfferBookBuildingService with ..
  submit customer do exerciseCmd bookBuildingServiceOfferCid BookBuilding.Accept

createBiddingService : Party -> Party -> Party -> Script (ContractId Bidding.Service)
createBiddingService operator provider customer = do
  biddingServiceOfferCid <- submit provider do exerciseByKeyCmd @Distributor.Role (operator, provider) Distributor.OfferBiddingService with ..
  submit customer do exerciseCmd biddingServiceOfferCid Bidding.Accept

originate : Party -> Party -> Party -> Party -> Text -> Claim Observation Date Decimal Id -> Script (ContractId AssetDescription, AssetDescription)
originate operator provider customer public assetLabel claims = do
  let
    cfi = CFI.other
    description = assetLabel
    observers = [public]
  createOriginationCid <- submit customer do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.RequestOrigination with claims = serialize claims; ..
  submit provider do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.Originate with createOriginationCid

issue : Party -> Party -> Party -> Text -> Decimal -> Id -> Script (ContractId AssetDeposit)
issue operator provider customer issuanceId quantity assetId = do
  (_, Custody.Service{account}) <- head <$> queryFilter @Custody.Service customer (\s -> s.provider == provider)
  createIssuanceRequestCid <- submit customer do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.RequestCreateIssuance with ..
  snd <$> submit provider do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.CreateIssuance with createIssuanceRequestCid

deposit : Party -> Party -> Party -> Decimal -> Text -> Script (ContractId AssetDeposit)
deposit operator provider customer quantity assetLabel = do
  let asset = Asset with id = (Id with signatories = fromList [provider]; label = assetLabel; version = 0); quantity
  depositRequestCid <- submitMulti [customer] [] do exerciseByKeyCmd @Custody.Service (operator, provider, customer) Custody.RequestDeposit with asset
  submit provider do exerciseByKeyCmd @Custody.Service (operator, provider, customer) Custody.Deposit with depositRequestCid

createDeal : Party -> Party -> Party -> Party -> Party -> Party -> Party -> Text -> Id -> Script (ContractId Structuring.Deal)
createDeal operator provider customer settlementBank bndBank bondRegistrar cashProvider dealId priceId = do
  createDealRequestCid <- submit customer do exerciseByKeyCmd @Structuring.Service (operator, provider, customer) Structuring.RequestCreateDeal with ..
  submit provider do exerciseByKeyCmd @Structuring.Service (operator, provider, customer) Structuring.CreateDeal with ..

addTranche : Party -> Party -> Party -> Text -> Asset -> Script (ContractId Structuring.Deal)
addTranche operator provider customer dealId tranche = do
  addTrancheRequestCid <- submit customer do exerciseByKeyCmd @Structuring.Service (operator, provider, customer) Structuring.RequestAddTranche with ..
  submit provider do exerciseByKeyCmd @Structuring.Service (operator, provider, customer) Structuring.AddTranche with ..

requestBookBuilding : Party -> Party -> Party -> ContractId Structuring.Deal -> Script [ContractId BookBuilding.BuildRequest]
requestBookBuilding operator provider customer dealCid = do
  submit customer do exerciseByKeyCmd @BookBuilding.Service (operator, provider, customer) BookBuilding.RequestBookBuilding with ..

bid : Party -> Party -> Party -> ContractId BookBuilding.BuildRequest -> Decimal -> Decimal -> Script (ContractId Bidding.Bid)
bid operator provider customer bookBuildingRequestCid quantity price = do
  Some BookBuilding.BuildRequest{issuer, dealId, asset, priceId} <- queryContractId provider bookBuildingRequestCid
  bidRequestCid <- submit provider do exerciseByKeyCmd @Bidding.Service (operator, provider, customer) Bidding.RequestBid with ..
  submit customer do exerciseByKeyCmd @Bidding.Service (operator, provider, customer) Bidding.SubmitBid with ..

allocate : Party -> ContractId Bidding.Bid -> Decimal -> Decimal -> Script (ContractId Bidding.Allocation)
allocate bookRunner bidCid offeredQuantity offeredPrice = do
  submit bookRunner do exerciseCmd bidCid Bidding.Allocate with ..

confirm : Party -> ContractId Bidding.Allocation -> Script (ContractId Bidding.Confirmation)
confirm investor allocationCid = do
  submit investor do exerciseCmd allocationCid Bidding.Confirm

-- settle : Party -> ContractId Settlement.SettlementInstruction -> Script ([ContractId AssetDeposit])
-- settle issuer siCid = do
--   submit issuer do exerciseCmd siCid Settlement.Settle

test1 : Script ()
test1 = do
  --- Setup ---
  operator      <- allocatePartyWithHint "Operator" $ PartyIdHint "Operator"
  cashProvider  <- allocatePartyWithHint "CashProvider" $ PartyIdHint "CashProvider"
  bondRegistrar <- allocatePartyWithHint "BondRegistrar" $ PartyIdHint "BondRegistrar"
  lm1  <- allocatePartyWithHint "LeadMgr1" $ PartyIdHint "LeadMgr1"
  lm2  <- allocatePartyWithHint "LeadMgr2" $ PartyIdHint "LeadMgr2"
  lm3  <- allocatePartyWithHint "LeadMgr3" $ PartyIdHint "LeadMgr3"
  cm31  <- allocatePartyWithHint "CoMgr31" $ PartyIdHint "CoMgr31"
  investor11 <- allocatePartyWithHint "Investor11" $ PartyIdHint "Investor11"
  investor21 <- allocatePartyWithHint "Investor21" $ PartyIdHint "Investor21"
  investor311 <- allocatePartyWithHint "Investor311" $ PartyIdHint "Investor311"
  investor312 <- allocatePartyWithHint "Investor312" $ PartyIdHint "Investor312"
  issuer <- allocatePartyWithHint "Issuer" $ PartyIdHint "Issuer"
  public <- allocatePartyWithHint "Public" $ PartyIdHint "Public"
  let
    structurer = lm1
    settlementBank = lm2
    bndBank = lm3

  submit operator do createCmd Operator.Role with operator; observers = empty

  createCustodianRole operator cashProvider
  createCustodianRole operator bondRegistrar
  createCustodianRole operator lm1
  createCustodianRole operator lm2
  createCustodianRole operator lm3
  createCustodianRole operator cm31

  -- 1st level
  (_, lm1CashAccount)     <- createCustodyService operator cashProvider lm1
  (_, lm2CashAccount)     <- createCustodyService operator cashProvider lm2
  (_, lm3CashAccount)     <- createCustodyService operator cashProvider lm3
  (_, issuerCashAccount)  <- createCustodyService operator cashProvider issuer
  (_, lm1BondAccount)     <- createCustodyService operator bondRegistrar lm1
  (_, lm2BondAccount)     <- createCustodyService operator bondRegistrar lm2
  (_, lm3BondAccount)     <- createCustodyService operator bondRegistrar lm3
  (_, issuerBondAccount)  <- createCustodyService operator bondRegistrar issuer

  -- 2nd level
  (_, lm1OwnAccount)        <- createCustodyService operator lm1 lm1
  (_, lm2OwnAccount)        <- createCustodyService operator lm2 lm2
  (_, lm3OwnAccount)        <- createCustodyService operator lm3 lm3
  (_, cm31OwnAccount)       <- createCustodyService operator cm31 cm31
  (_, investor11CashAccount) <- createCustodyService operator lm1 investor11
  (_, investor21CashAccount) <- createCustodyService operator lm2 investor21
  (_, cm31CashAccount)      <- createCustodyService operator lm3 cm31
  let
    investor11BondAccount = investor11CashAccount
    investor21BondAccount = investor21CashAccount
    cm31BondAccount = cm31CashAccount

  -- 3rd level
  (_, investor311CashAccount) <- createCustodyService operator cm31 investor311
  (_, investor312CashAccount) <- createCustodyService operator cm31 investor312
  let
    investor311BondAccount = investor311CashAccount
    investor312BondAccount = investor312CashAccount

  -- Account info
  submitMulti [operator, issuer] [] $ createCmd Structuring.AccountInfo with operator; party = issuer; ownAccount = None; cashAccount = Some issuerCashAccount; securitiesAccount = Some issuerBondAccount
  submitMulti [operator, lm1] [] $ createCmd Structuring.AccountInfo with operator; party = lm1; ownAccount = Some lm1OwnAccount; cashAccount = Some lm1CashAccount; securitiesAccount = Some lm1BondAccount
  submitMulti [operator, lm2] [] $ createCmd Structuring.AccountInfo with operator; party = lm2; ownAccount = Some lm2OwnAccount; cashAccount = Some lm2CashAccount; securitiesAccount = Some lm2BondAccount
  submitMulti [operator, lm3] [] $ createCmd Structuring.AccountInfo with operator; party = lm3; ownAccount = Some lm3OwnAccount; cashAccount = Some lm3CashAccount; securitiesAccount = Some lm3BondAccount
  submitMulti [operator, cm31] [] $ createCmd Structuring.AccountInfo with operator; party = cm31; ownAccount = Some cm31OwnAccount; cashAccount = Some cm31CashAccount; securitiesAccount = Some cm31BondAccount
  submitMulti [operator, investor11] [] $ createCmd Structuring.AccountInfo with operator; party = investor11; ownAccount = None; cashAccount = Some investor11CashAccount; securitiesAccount = Some investor11BondAccount
  submitMulti [operator, investor21] [] $ createCmd Structuring.AccountInfo with operator; party = investor21; ownAccount = None; cashAccount = Some investor21CashAccount; securitiesAccount = Some investor21BondAccount
  submitMulti [operator, investor311] [] $ createCmd Structuring.AccountInfo with operator; party = investor311; ownAccount = None; cashAccount = Some investor311CashAccount; securitiesAccount = Some investor311BondAccount
  submitMulti [operator, investor312] [] $ createCmd Structuring.AccountInfo with operator; party = investor312; ownAccount = None; cashAccount = Some investor312CashAccount; securitiesAccount = Some investor312BondAccount

  createIssuanceService operator bondRegistrar issuer
  createIssuanceService operator cashProvider cashProvider

  (_, usd)  <- originate operator cashProvider cashProvider public "USD" Zero
  (_, bond) <- originate operator bondRegistrar issuer public "BOND1" $ bond usd.assetId 100_000_000.0 0.02275 (unrollDates 2021 2023 [Jan,Jul] 15)

  lm1Deposit1Cid        <- deposit operator cashProvider lm1 100_000_000.0 "USD"
  lm2Deposit2Cid        <- deposit operator cashProvider lm2 100_000_000.0 "USD"
  lm3Deposit3Cid        <- deposit operator cashProvider lm3 100_000_000.0 "USD"
  investorDeposit11Cid  <- deposit operator lm1 investor11 100_000_000.0 "USD"
  investorDeposit21Cid  <- deposit operator lm2 investor21 100_000_000.0 "USD"
  cm31DepositCid        <- deposit operator lm3 cm31 100_000_000.0 "USD"
  investorDeposit311Cid <- deposit operator cm31 investor311 100_000_000.0 "USD"
  investorDeposit312Cid <- deposit operator cm31 investor312 100_000_000.0 "USD"

  bondDepositCid <- issue operator bondRegistrar issuer "BondIssuance" 100_000_000.0 bond.assetId
  Some bondDeposit <- queryContractId @AssetDeposit issuer bondDepositCid

  --- Syndication ---
  createStructurerRole operator lm1

  createDistributorRole operator issuer
  createDistributorRole operator lm1
  createDistributorRole operator lm2
  createDistributorRole operator lm3
  createDistributorRole operator cm31

  createStructuringService operator structurer issuer

  createBookBuildingService operator lm1 issuer
  createBookBuildingService operator lm2 issuer
  createBookBuildingService operator lm3 issuer
  createBookBuildingService operator cm31 lm3
  createBiddingService operator lm1 investor11
  createBiddingService operator lm2 investor21
  createBiddingService operator cm31 investor311
  createBiddingService operator cm31 investor312

  let
    dealId = "DEAL1"
    priceId = Id with signatories = fromList [cashProvider]; label = "USD"; version = 0
    tranche = Asset with id = bond.assetId; quantity = 100_000_000.0
  dealCid <- createDeal operator structurer issuer settlementBank bndBank bondRegistrar cashProvider dealId priceId
  dealCid <- addTranche operator structurer issuer dealId tranche

  [bookBuildingRequest1Cid] <- requestBookBuilding operator lm1 issuer dealCid
  [bookBuildingRequest2Cid] <- requestBookBuilding operator lm2 issuer dealCid
  [bookBuildingRequest3Cid] <- requestBookBuilding operator lm3 issuer dealCid
  [bookBuildingRequest4Cid] <- requestBookBuilding operator cm31 lm3 dealCid

  bid1Cid <- bid operator lm1 investor11 bookBuildingRequest1Cid 10_000_000.0 1.001
  bid2Cid <- bid operator lm2 investor21 bookBuildingRequest2Cid 20_000_000.0 0.999
  bid3Cid <- bid operator cm31 investor311 bookBuildingRequest4Cid 30_000_000.0 0.997
  bid4Cid <- bid operator cm31 investor312 bookBuildingRequest4Cid 40_000_000.0 0.995

  let offeredPrice = 0.998
  allocation1Cid <- allocate issuer bid1Cid 10_000_000.0 offeredPrice
  allocation2Cid <- allocate issuer bid2Cid 20_000_000.0 offeredPrice
  allocation3Cid <- allocate issuer bid3Cid 30_000_000.0 offeredPrice
  allocation4Cid <- allocate issuer bid4Cid 40_000_000.0 offeredPrice

  confirmation1Cid <- confirm investor11 allocation1Cid
  confirmation2Cid <- confirm investor21 allocation2Cid
  confirmation3Cid <- confirm investor311 allocation3Cid
  confirmation4Cid <- confirm investor312 allocation4Cid

  let
    allocateSi party (siCid, si) = do
      adsAllocated <- mapOptional ((.depositCid) . snd) <$> queryFilter @SettlementInstruction party (\si -> si.sender == party && isSome si.depositCid)
      ads <- filter ((`notElem` adsAllocated) . fst) <$> queryFilter @AssetDeposit party (\ad -> ad.account.owner == party)
      let
        valid (_, ad) = ad.account.owner == party && ad.account == si.senderAccount && ad.asset.id == si.asset.id && ad.asset.quantity >= si.asset.quantity
        adCids = filter valid ads
      case adCids of
        [] ->
          if si.senderAccount.provider == party && si.senderAccount.owner == party then do
            adCid <- submit party do createCmd AssetDeposit with asset = si.asset; account = si.senderAccount; observers = empty; lockers = empty
            submit party do exerciseCmd siCid Allocate with settlementDepositCid = adCid
            pure ()
          else do
            adCids <- query @AssetDeposit party
            -- debug si
            -- debug adCids
            pure () --fail $ "Cannot find deposit for asset " <> si.asset.id.label <> " in account " <> si.senderAccount.id.label
        (adCid, ad) :: _ ->
          if ad.asset.quantity > si.asset.quantity then do
            debug ("Split " <> show si.asset.quantity)
            adCid :: _ <- submit party do exerciseCmd adCid AssetDeposit_Split with quantities = [ si.asset.quantity ]
            submit party do exerciseCmd siCid Allocate with settlementDepositCid = adCid
            pure ()
          else do
            submit party do exerciseCmd siCid Allocate with settlementDepositCid = adCid
            pure ()
    allocate party = do
      sisUnallocated <- queryFilter @SettlementInstruction party (\si -> si.sender == party && isNone si.depositCid)
      mapA (allocateSi party) sisUnallocated
    sign party = do
      sis <- queryFilter @SettlementInstruction party (\si -> si.receiver == party)
      mapA (\(siCid, _) -> submit party do exerciseCmd siCid Sign) sis
    settle party dvpCid = do
      submit party do exerciseCmd dvpCid Settle

  let
    confirmationCids = [ confirmation1Cid, confirmation2Cid, confirmation3Cid, confirmation4Cid ]
    price = offeredPrice

  -- Step 1
  dvpCids1 <- submit operator do exerciseCmd dealCid Structuring.InstructIssuerSettlement with ..
  allocate issuer
  allocate settlementBank
  sign issuer
  sign settlementBank
  adCids1 <- mapA (settle operator) dvpCids1

  -- Step 2
  dvpCids2 <- submit operator do exerciseCmd dealCid Structuring.InstructBndSettlement with ..
  allocate settlementBank
  allocate bndBank
  sign settlementBank
  sign bndBank
  adCids2 <- mapA (settle operator) dvpCids2

  -- Step 3
  dvpCids3 <- submit operator do exerciseCmd dealCid Structuring.InstructInvestorSettlement with ..
  allocate bndBank
  allocate lm1
  allocate lm2
  allocate lm3
  allocate cm31
  allocate investor11
  allocate investor21
  allocate investor311
  allocate investor312
  sign lm1
  sign lm2
  sign lm3
  sign cm31
  sign investor11
  sign investor21
  sign investor311
  sign investor312
  adCids3 <- mapA (settle operator) dvpCids3

  pure ()
