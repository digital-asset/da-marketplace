module Tests.Distribution.Syndication where

import ContingentClaims.Claim (Claim(Zero), serialize)
import ContingentClaims.FinancialClaim (unrollDates)
import ContingentClaims.Observation (Observation)
import Daml.Script
import DA.Date (Month(..))
import DA.Finance.Asset (AssetDeposit, AssetDeposit_Split(..))
import DA.Finance.Types (Account, Asset(..), Id(..))
import DA.Foldable (forA_)
import DA.List (head)
import DA.Optional (catOptionals)
import DA.Set
import Marketplace.Operator.Role qualified as Operator
import Marketplace.Custody.Role qualified as Custodian
import Marketplace.Custody.Service qualified as Custody
import Marketplace.Issuance.AssetDescription (AssetDescription)
import Marketplace.Issuance.CFI qualified as CFI
import Marketplace.Issuance.Service qualified as Issuance
import Marketplace.Distribution.Syndication.Bidding.Model qualified as Bidding
import Marketplace.Distribution.Syndication.Bidding.Service qualified as Bidding
import Marketplace.Distribution.Syndication.Structuring.Model qualified as Structuring
import Marketplace.Distribution.Syndication.Structuring.Service qualified as Structuring
import Marketplace.Distribution.Syndication.BookBuilding.Model qualified as BookBuilding
import Marketplace.Distribution.Syndication.BookBuilding.Service qualified as BookBuilding
import Marketplace.Distribution.Syndication.BookRunner qualified as BookRunner
import Marketplace.Distribution.Syndication.Distributor qualified as Distributor
import Tests.Utils

createCustodianRole : Party -> Party -> Script (ContractId Custodian.Role)
createCustodianRole operator provider = do
  custodianRoleOfferCid <- submit operator do exerciseByKeyCmd @Operator.Role operator Operator.OfferCustodianRole with provider
  (custodianRoleCid, _, _)  <- submit provider do exerciseCmd custodianRoleOfferCid Custodian.Accept
  pure custodianRoleCid

createCustodyService : Party -> Party -> Party -> Script (ContractId Custody.Service, Account)
createCustodyService operator provider customer = do
  custodyServiceOfferCid <- submit provider do exerciseByKeyCmd @Custodian.Role (operator, provider) Custodian.OfferCustodyService with ..
  serviceCid <- submit customer do exerciseCmd custodyServiceOfferCid Custody.Accept
  Some service <- queryContractId customer serviceCid
  pure (serviceCid, service.account)

createIssuanceService : Party -> Party -> Party -> Script (ContractId Issuance.Service)
createIssuanceService operator provider customer = do
  issuanceServiceOfferCid <- submit provider do exerciseByKeyCmd @Custodian.Role (operator, provider) Custodian.OfferIssuanceService with ..
  submit customer do exerciseCmd issuanceServiceOfferCid Issuance.Accept

createBookRunnerRole : Party -> Party -> Script (ContractId BookRunner.Role)
createBookRunnerRole operator provider = do
  bookRunnerRoleOfferCid <- submit operator do exerciseByKeyCmd @Operator.Role operator Operator.OfferSyndicationBookRunnerRole with provider
  submit provider do exerciseCmd bookRunnerRoleOfferCid BookRunner.Accept

createDistributorRole : Party -> Party -> Script (ContractId Distributor.Role)
createDistributorRole operator provider = do
  distributorRoleOfferCid <- submit operator do exerciseByKeyCmd @Operator.Role operator Operator.OfferSyndicationDistributorRole with provider
  submit provider do exerciseCmd distributorRoleOfferCid Distributor.Accept

createStructuringService : Party -> Party -> Party -> Script (ContractId Structuring.Service)
createStructuringService operator provider customer = do
  structuringServiceOfferCid <- submit provider do exerciseByKeyCmd @BookRunner.Role (operator, provider) BookRunner.OfferStructuringService with ..
  submit customer do exerciseCmd structuringServiceOfferCid Structuring.Accept

createBookBuildingService : Party -> Party -> Party -> Script (ContractId BookBuilding.Service)
createBookBuildingService operator provider customer = do
  bookBuildingServiceOfferCid <- submit provider do exerciseByKeyCmd @Distributor.Role (operator, provider) Distributor.OfferBookBuildingService with ..
  submit customer do exerciseCmd bookBuildingServiceOfferCid BookBuilding.Accept

createBiddingService : Party -> Party -> Party -> Script (ContractId Bidding.Service)
createBiddingService operator provider customer = do
  biddingServiceOfferCid <- submit provider do exerciseByKeyCmd @Distributor.Role (operator, provider) Distributor.OfferBiddingService with ..
  submit customer do exerciseCmd biddingServiceOfferCid Bidding.Accept

originate : Party -> Party -> Party -> Party -> Text -> Claim Observation Date Decimal Id -> Script (ContractId AssetDescription, AssetDescription)
originate operator provider customer public assetLabel claims = do
  let
    cfi = CFI.other
    description = assetLabel
    observers = [public]
  createOriginationCid <- submit customer do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.RequestOrigination with claims = serialize claims; ..
  submit provider do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.Originate with createOriginationCid

issue : Party -> Party -> Party -> Text -> Decimal -> Id -> Script (ContractId AssetDeposit)
issue operator provider customer issuanceId quantity assetId = do
  (_, Custody.Service{account}) <- head <$> queryFilter @Custody.Service customer (\s -> s.provider == provider)
  createIssuanceRequestCid <- submit customer do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.RequestCreateIssuance with ..
  snd <$> submit provider do exerciseByKeyCmd @Issuance.Service (operator, provider, customer) Issuance.CreateIssuance with createIssuanceRequestCid

deposit : Party -> Party -> Party -> Party -> Decimal -> Text -> Script (ContractId AssetDeposit)
deposit operator provider customer public quantity assetLabel = do
  let asset = Asset with id = (Id with signatories = fromList [provider]; label = assetLabel; version = 0); quantity
  depositRequestCid <- submitMulti [customer] [public] do exerciseByKeyCmd @Custody.Service (operator, provider, customer) Custody.RequestDeposit with asset
  submit provider do exerciseByKeyCmd @Custody.Service (operator, provider, customer) Custody.Deposit with depositRequestCid

createDeal : Party -> Party -> Party -> Text -> Id -> Script (ContractId Structuring.Deal)
createDeal operator provider customer dealId priceId = do
  createDealRequestCid <- submit customer do exerciseByKeyCmd @Structuring.Service (operator, provider, customer) Structuring.RequestCreateDeal with ..
  submit provider do exerciseByKeyCmd @Structuring.Service (operator, provider, customer) Structuring.CreateDeal with ..

addTranche : Party -> Party -> Party -> Text -> Asset -> Script (ContractId Structuring.Deal)
addTranche operator provider customer dealId tranche = do
  addTrancheRequestCid <- submit customer do exerciseByKeyCmd @Structuring.Service (operator, provider, customer) Structuring.RequestAddTranche with ..
  submit provider do exerciseByKeyCmd @Structuring.Service (operator, provider, customer) Structuring.AddTranche with ..

requestBookBuilding : Party -> Party -> Party -> ContractId Structuring.Deal -> Account -> Account -> Account -> Account -> Script [ContractId BookBuilding.BuildRequest]
requestBookBuilding operator provider customer dealCid providerPaymentAccount providerDeliveryAccount customerPaymentAccount customerDeliveryAccount = do
  submit customer do exerciseByKeyCmd @BookBuilding.Service (operator, provider, customer) BookBuilding.RequestBookBuilding with ..

bid : Party -> Party -> Party -> ContractId BookBuilding.BuildRequest -> Account -> Account -> Decimal -> Decimal -> Script (ContractId Bidding.Bid)
bid operator provider customer bookBuildingRequestCid providerPaymentAccount providerDeliveryAccount quantity price = do
  Some BookBuilding.BuildRequest{issuer, bookRunner, dealId, asset, priceId} <- queryContractId provider bookBuildingRequestCid
  -- (_, Custody.Service{account=investorPaymentAccount}) <- head <$> queryFilter @Custody.Service customer (\s -> s.provider == cashProvider)
  -- (_, Custody.Service{account=investorDeliveryAccount}) <- head <$> queryFilter @Custody.Service customer (\s -> s.provider == bondRegistrar)
  bidRequestCid <- submit provider do exerciseByKeyCmd @Bidding.Service (operator, provider, customer) Bidding.RequestBid with ..
  submit customer do exerciseByKeyCmd @Bidding.Service (operator, provider, customer) Bidding.SubmitBid with ..

allocate : Party -> ContractId Bidding.Bid -> Decimal -> Decimal -> Script (ContractId Bidding.Allocation)
allocate bookRunner bidCid offeredQuantity offeredPrice = do
  submit bookRunner do exerciseCmd bidCid Bidding.Allocate with ..

confirm : Party -> ContractId Bidding.Allocation -> Account -> Account -> Script (ContractId Bidding.Confirmation)
confirm investor allocationCid customerPaymentAccount customerDeliveryAccount = do
  submit investor do exerciseCmd allocationCid Bidding.Confirm with ..

-- settle : Party -> ContractId Settlement.SettlementInstruction -> Script ([ContractId AssetDeposit])
-- settle issuer siCid = do
--   submit issuer do exerciseCmd siCid Settlement.Settle

hierarchy : Script ()
hierarchy = do
  --- Setup ---
  operator      <- allocatePartyWithHint "Operator" $ PartyIdHint "Operator"
  cashProvider  <- allocatePartyWithHint "CashProvider" $ PartyIdHint "CashProvider"
  bondRegistrar <- allocatePartyWithHint "BondRegistrar" $ PartyIdHint "BondRegistrar"
  lm1  <- allocatePartyWithHint "LeadMgr1" $ PartyIdHint "LeadMgr1"
  lm2  <- allocatePartyWithHint "LeadMgr2" $ PartyIdHint "LeadMgr2"
  lm3  <- allocatePartyWithHint "LeadMgr3" $ PartyIdHint "LeadMgr3"
  cm31  <- allocatePartyWithHint "CoMgr31" $ PartyIdHint "CoMgr31"
  investor11 <- allocatePartyWithHint "Investor11" $ PartyIdHint "Investor11"
  investor21 <- allocatePartyWithHint "Investor21" $ PartyIdHint "Investor21"
  investor311 <- allocatePartyWithHint "Investor311" $ PartyIdHint "Investor311"
  investor312 <- allocatePartyWithHint "Investor312" $ PartyIdHint "Investor312"
  issuer <- allocatePartyWithHint "Issuer" $ PartyIdHint "Issuer"
  public <- allocatePartyWithHint "Public" $ PartyIdHint "Public"

  submit operator do createCmd Operator.Role with operator; observers = empty

  createCustodianRole operator cashProvider
  createCustodianRole operator bondRegistrar
  createCustodianRole operator lm1
  createCustodianRole operator lm2
  createCustodianRole operator lm3
  createCustodianRole operator cm31

  -- 1st level
  (_, lm1CashAccount)     <- createCustodyService operator cashProvider lm1
  (_, lm2CashAccount)     <- createCustodyService operator cashProvider lm2
  (_, lm3CashAccount)     <- createCustodyService operator cashProvider lm3
  (_, issuerCashAccount)  <- createCustodyService operator cashProvider issuer
  (_, lm1BondAccount)     <- createCustodyService operator bondRegistrar lm1
  (_, lm2BondAccount)     <- createCustodyService operator bondRegistrar lm2
  (_, lm3BondAccount)     <- createCustodyService operator bondRegistrar lm3
  (_, issuerBondAccount)  <- createCustodyService operator bondRegistrar issuer

  -- 2nd level
  (_, lm1OwnAccount)        <- createCustodyService operator lm1 lm1
  (_, lm2OwnAccount)        <- createCustodyService operator lm2 lm2
  (_, lm3OwnAccount)        <- createCustodyService operator lm3 lm3
  (_, cm31OwnAccount)       <- createCustodyService operator cm31 cm31
  (_, investor1CashAccount) <- createCustodyService operator lm1 investor11
  (_, investor2CashAccount) <- createCustodyService operator lm2 investor21
  (_, cm31CashAccount)      <- createCustodyService operator lm3 cm31
  let
    investor1BondAccount = investor1CashAccount
    investor2BondAccount = investor2CashAccount
    cm31BondAccount = cm31CashAccount

  -- 3rd level
  (_, investor311CashAccount) <- createCustodyService operator cm31 investor311
  (_, investor312CashAccount) <- createCustodyService operator cm31 investor312
  let
    investor311BondAccount = investor311CashAccount
    investor312BondAccount = investor312CashAccount
  -- (_, investor312BondAccount) <- createCustodyService operator lm3 investor312

  createIssuanceService operator bondRegistrar issuer

  (_, usd)  <- originate operator cashProvider cashProvider public "USD" Zero
  (_, bond) <- originate operator bondRegistrar issuer public "BOND1" $ bond usd.assetId 100_000_000.0 0.02275 (unrollDates 2021 2023 [Jan,Jul] 15)

  investorDeposit1Cid <- deposit operator cashProvider lm1 public 100_000_000.0 "USD"
  investorDeposit2Cid <- deposit operator cashProvider lm2 public 100_000_000.0 "USD"
  investorDeposit3Cid <- deposit operator cashProvider lm3 public 100_000_000.0 "USD"
  investorDeposit1Cid <- deposit operator lm1 investor11 public 100_000_000.0 "USD"
  investorDeposit2Cid <- deposit operator lm2 investor21 public 100_000_000.0 "USD"
  investorDeposit2Cid <- deposit operator lm3 cm31 public 100_000_000.0 "USD"
  investorDeposit2Cid <- deposit operator cm31 investor311 public 100_000_000.0 "USD"
  investorDeposit3Cid <- deposit operator cm31 investor312 public 100_000_000.0 "USD"

  bondDepositCid <- issue operator bondRegistrar issuer "BondIssuance" 100_000_000.0 bond.assetId
  Some bondDeposit <- queryContractId @AssetDeposit issuer bondDepositCid

  --- Syndication ---
  createBookRunnerRole operator lm1

  createDistributorRole operator issuer
  createDistributorRole operator lm1
  createDistributorRole operator lm2
  createDistributorRole operator lm3
  createDistributorRole operator cm31

  createStructuringService operator lm1 issuer

  createBookBuildingService operator lm1 issuer
  createBookBuildingService operator lm2 issuer
  createBookBuildingService operator lm3 issuer
  createBookBuildingService operator cm31 lm3
  createBiddingService operator lm1 investor11
  createBiddingService operator lm2 investor21
  createBiddingService operator cm31 investor311
  createBiddingService operator cm31 investor312

  let
    dealId = "DEAL1"
    priceId = Id with signatories = fromList [cashProvider]; label = "USD"; version = 0
    tranche = Asset with id = (Id with signatories = fromList [bondRegistrar, issuer]; label = "TRANCHE1"; version = 0); quantity = 100_000_000.0
  dealCid <- createDeal operator lm1 issuer dealId priceId
  dealCid <- addTranche operator lm1 issuer dealId tranche

  [bookBuildingRequest1Cid] <- requestBookBuilding operator lm1 issuer dealCid lm1CashAccount lm1BondAccount issuerCashAccount issuerBondAccount
  [bookBuildingRequest2Cid] <- requestBookBuilding operator lm2 issuer dealCid lm2CashAccount lm2BondAccount issuerCashAccount issuerBondAccount
  [bookBuildingRequest3Cid] <- requestBookBuilding operator lm3 issuer dealCid lm3CashAccount lm3BondAccount issuerCashAccount issuerBondAccount
  [bookBuildingRequest4Cid] <- requestBookBuilding operator cm31 lm3 dealCid cm31CashAccount cm31BondAccount lm3OwnAccount lm3OwnAccount

  bid1Cid <- bid operator lm1 investor11 bookBuildingRequest1Cid lm1OwnAccount lm1OwnAccount 10_000_000.0 1.001
  bid2Cid <- bid operator lm2 investor21 bookBuildingRequest2Cid lm2OwnAccount lm2OwnAccount 20_000_000.0 0.999
  bid3Cid <- bid operator cm31 investor311 bookBuildingRequest4Cid cm31OwnAccount cm31OwnAccount 30_000_000.0 0.997
  bid4Cid <- bid operator cm31 investor312 bookBuildingRequest4Cid cm31OwnAccount cm31OwnAccount 40_000_000.0 0.995

  let offeredPrice = 0.998
  allocation1Cid <- allocate issuer bid1Cid 10_000_000.0 offeredPrice
  allocation2Cid <- allocate issuer bid2Cid 20_000_000.0 offeredPrice
  allocation3Cid <- allocate issuer bid3Cid 30_000_000.0 offeredPrice
  allocation4Cid <- allocate issuer bid4Cid 40_000_000.0 offeredPrice

  -- investorDeposit1Cid <- head <$> submit investor11 do exerciseCmd investorDeposit1Cid AssetDeposit_Split with quantities = [ quantity1 * offeredPrice ]
  -- investorDeposit2Cid <- head <$> submit investor21 do exerciseCmd investorDeposit2Cid AssetDeposit_Split with quantities = [ quantity2 * offeredPrice ]
  -- investorDeposit3Cid <- head <$> submit investor31 do exerciseCmd investorDeposit3Cid AssetDeposit_Split with quantities = [ quantity3 * offeredPrice ]

  confirmation1Cid <- confirm investor11 allocation1Cid investor1CashAccount investor1BondAccount
  confirmation2Cid <- confirm investor21 allocation2Cid investor2CashAccount investor2BondAccount
  confirmation3Cid <- confirm investor311 allocation3Cid investor311CashAccount investor311BondAccount
  confirmation4Cid <- confirm investor312 allocation4Cid investor312CashAccount investor312BondAccount

  let
    bookBuildingRequestCids = [ bookBuildingRequest1Cid, bookBuildingRequest2Cid, bookBuildingRequest3Cid, bookBuildingRequest4Cid ]
    confirmationCids = [ confirmation1Cid, confirmation2Cid, confirmation3Cid, confirmation4Cid ]
    price = offeredPrice
  siCids <- submit issuer do exerciseCmd dealCid Structuring.InstructConfirmations with ..
  sisOpt <- mapA (queryContractId operator) siCids
  let sis = catOptionals sisOpt
  forA_ sis debug
  -- settle issuer si1Cid
  -- settle issuer si2Cid
  -- settle issuer si3Cid

  pure ()
