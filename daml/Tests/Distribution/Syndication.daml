module Tests.Distribution.Syndication where

import ContingentClaims.Claim (Claim(Zero))
import ContingentClaims.FinancialClaim (unrollDates)
import Daml.Script
import DA.Date (Month(..))
import DA.Finance.Asset (AssetDeposit(..))
import DA.Finance.Types (Asset(..), Id(..))
import DA.Set (fromList, empty)
import Marketplace.Operator.Role qualified as Operator
import Marketplace.Distribution.Syndication.Structuring.Model qualified as Structuring
import Tests.Utils
import Tests.Distribution.Util

data Parties = Parties
  with
    operator : Party
    cashProvider : Party
    bondRegistrar : Party
    lm1 : Party
    lm2 : Party
    lm3 : Party
    cm1 : Party
    investor1 : Party
    investor2 : Party
    investor3 : Party
    investor4 : Party
    custodian1 : Party
    custodian2 : Party
    custodian3 : Party
    custodian4 : Party
    custodian5 : Party
    issuer : Party
    public : Party
    structurer : Party
    settlementBank : Party
    bndBank : Party

setup : Script Parties
setup = do
  operator      <- allocatePartyWithHint "Operator" $ PartyIdHint "Operator"
  cashProvider  <- allocatePartyWithHint "CashProvider" $ PartyIdHint "CashProvider"
  bondRegistrar <- allocatePartyWithHint "BondRegistrar" $ PartyIdHint "BondRegistrar"
  lm1  <- allocatePartyWithHint "LeadMgr1" $ PartyIdHint "LeadMgr1"
  lm2  <- allocatePartyWithHint "LeadMgr2" $ PartyIdHint "LeadMgr2"
  lm3  <- allocatePartyWithHint "LeadMgr3" $ PartyIdHint "LeadMgr3"
  cm1  <- allocatePartyWithHint "CoMgr31" $ PartyIdHint "CoMgr31"
  investor1 <- allocatePartyWithHint "Investor1" $ PartyIdHint "Investor1"
  investor2 <- allocatePartyWithHint "Investor2" $ PartyIdHint "Investor2"
  investor3 <- allocatePartyWithHint "Investor3" $ PartyIdHint "Investor3"
  investor4 <- allocatePartyWithHint "Investor4" $ PartyIdHint "Investor4"
  custodian1 <- allocatePartyWithHint "Custodian1" $ PartyIdHint "Custodian1"
  custodian2 <- allocatePartyWithHint "Custodian2" $ PartyIdHint "Custodian2"
  custodian3 <- allocatePartyWithHint "Custodian3" $ PartyIdHint "Custodian3"
  custodian4 <- allocatePartyWithHint "Custodian4" $ PartyIdHint "Custodian4"
  custodian5 <- allocatePartyWithHint "Custodian5" $ PartyIdHint "Custodian5"
  issuer <- allocatePartyWithHint "Issuer" $ PartyIdHint "Issuer"
  public <- allocatePartyWithHint "Public" $ PartyIdHint "Public"
  let
    structurer = lm1
    settlementBank = lm2
    bndBank = lm3

  submit operator do createCmd Operator.Role with operator; observers = empty

  createCustodianRole operator cashProvider
  createCustodianRole operator bondRegistrar
  createCustodianRole operator lm1
  createCustodianRole operator lm2
  createCustodianRole operator lm3
  createCustodianRole operator custodian1
  createCustodianRole operator custodian2
  createCustodianRole operator custodian3
  createCustodianRole operator custodian4
  createCustodianRole operator custodian5

  -- 1st level
  (_, lm1CashAccount)         <- createCustodyService operator cashProvider lm1
  (_, lm2CashAccount)         <- createCustodyService operator cashProvider lm2
  (_, lm3CashAccount)         <- createCustodyService operator cashProvider lm3
  (_, issuerCashAccount)      <- createCustodyService operator cashProvider issuer
  (_, custodian1BondAccount)  <- createCustodyService operator bondRegistrar custodian1
  (_, custodian2BondAccount)  <- createCustodyService operator bondRegistrar custodian2
  (_, custodian3BondAccount)  <- createCustodyService operator bondRegistrar custodian3
  (_, custodian4BondAccount)  <- createCustodyService operator bondRegistrar custodian4
  (_, issuerBondAccount)      <- createCustodyService operator bondRegistrar issuer

  -- 2nd level
  (_, lm1OwnAccount)          <- createCustodyService operator lm1 lm1
  (_, lm2OwnAccount)          <- createCustodyService operator lm2 lm2
  (_, lm3OwnAccount)          <- createCustodyService operator lm3 lm3
  (_, custodian1OwnAccount)   <- createCustodyService operator custodian1 custodian1
  (_, custodian2OwnAccount)   <- createCustodyService operator custodian2 custodian2
  (_, custodian3OwnAccount)   <- createCustodyService operator custodian3 custodian3
  (_, custodian4OwnAccount)   <- createCustodyService operator custodian4 custodian4
  (_, custodian5OwnAccount)   <- createCustodyService operator custodian5 custodian5
  (_, investor1CashAccount)   <- createCustodyService operator lm1 investor1
  (_, investor2CashAccount)   <- createCustodyService operator lm2 investor2
  (_, investor3CashAccount)   <- createCustodyService operator lm3 investor3
  (_, investor4CashAccount)   <- createCustodyService operator lm3 investor4
  (_, lm1BondAccount)         <- createCustodyService operator custodian1 lm1
  (_, lm2BondAccount)         <- createCustodyService operator custodian2 lm2
  (_, lm3BondAccount)         <- createCustodyService operator custodian3 lm3
  (_, custodian5BondAccount)  <- createCustodyService operator custodian4 custodian5
  (_, investor1BondAccount)   <- createCustodyService operator custodian1 investor1
  (_, investor2BondAccount)   <- createCustodyService operator custodian2 investor2

  -- 3rd level
  (_, investor3BondAccount)   <- createCustodyService operator custodian5 investor3
  (_, investor4BondAccount)   <- createCustodyService operator custodian5 investor4

  -- Account info
  submitMulti [operator, issuer] []     $ createCmd Structuring.AccountInfo with operator; party = issuer; ownAccount = None; cashAccount = Some issuerCashAccount; securitiesAccount = Some issuerBondAccount
  submitMulti [operator, lm1] []        $ createCmd Structuring.AccountInfo with operator; party = lm1; ownAccount = Some lm1OwnAccount; cashAccount = Some lm1CashAccount; securitiesAccount = Some lm1BondAccount
  submitMulti [operator, lm2] []        $ createCmd Structuring.AccountInfo with operator; party = lm2; ownAccount = Some lm2OwnAccount; cashAccount = Some lm2CashAccount; securitiesAccount = Some lm2BondAccount
  submitMulti [operator, lm3] []        $ createCmd Structuring.AccountInfo with operator; party = lm3; ownAccount = Some lm3OwnAccount; cashAccount = Some lm3CashAccount; securitiesAccount = Some lm3BondAccount
  submitMulti [operator, custodian1] [] $ createCmd Structuring.AccountInfo with operator; party = custodian1; ownAccount = Some custodian1OwnAccount; cashAccount = None; securitiesAccount = Some custodian1BondAccount
  submitMulti [operator, custodian2] [] $ createCmd Structuring.AccountInfo with operator; party = custodian2; ownAccount = Some custodian2OwnAccount; cashAccount = None; securitiesAccount = Some custodian2BondAccount
  submitMulti [operator, custodian3] [] $ createCmd Structuring.AccountInfo with operator; party = custodian3; ownAccount = Some custodian3OwnAccount; cashAccount = None; securitiesAccount = Some custodian3BondAccount
  submitMulti [operator, custodian4] [] $ createCmd Structuring.AccountInfo with operator; party = custodian4; ownAccount = Some custodian4OwnAccount; cashAccount = None; securitiesAccount = Some custodian4BondAccount
  submitMulti [operator, custodian5] [] $ createCmd Structuring.AccountInfo with operator; party = custodian5; ownAccount = Some custodian5OwnAccount; cashAccount = None; securitiesAccount = Some custodian5BondAccount
  submitMulti [operator, investor1] []  $ createCmd Structuring.AccountInfo with operator; party = investor1; ownAccount = None; cashAccount = Some investor1CashAccount; securitiesAccount = Some investor1BondAccount
  submitMulti [operator, investor2] []  $ createCmd Structuring.AccountInfo with operator; party = investor2; ownAccount = None; cashAccount = Some investor2CashAccount; securitiesAccount = Some investor2BondAccount
  submitMulti [operator, investor3] []  $ createCmd Structuring.AccountInfo with operator; party = investor3; ownAccount = None; cashAccount = Some investor3CashAccount; securitiesAccount = Some investor3BondAccount
  submitMulti [operator, investor4] []  $ createCmd Structuring.AccountInfo with operator; party = investor4; ownAccount = None; cashAccount = Some investor4CashAccount; securitiesAccount = Some investor4BondAccount

  createIssuanceService operator cashProvider cashProvider
  createIssuanceService operator bondRegistrar issuer

  createStructurerRole operator lm1

  createDistributorRole operator issuer
  createDistributorRole operator lm1
  createDistributorRole operator lm2
  createDistributorRole operator lm3
  createDistributorRole operator cm1

  createStructuringService operator structurer issuer

  createBookBuildingService operator lm1 issuer
  createBookBuildingService operator lm2 issuer
  createBookBuildingService operator lm3 issuer
  createBookBuildingService operator cm1 lm3
  createBiddingService operator lm1 investor1
  createBiddingService operator lm2 investor2
  createBiddingService operator cm1 investor3
  createBiddingService operator cm1 investor4

  pure Parties with ..

e2e : Script ()
e2e = do

  Parties{..} <- setup

  (_, usd)  <- originate operator cashProvider cashProvider public "USD" Zero
  (_, bond) <- originate operator bondRegistrar issuer public "BOND1" $ bond usd.assetId 100_000_000.0 0.02275 (unrollDates 2021 2023 [Jan,Jul] 15)

  lm1DepositCid         <- deposit operator cashProvider lm1 10_000_000.0 "USD"
  lm2DepositCid         <- deposit operator cashProvider lm2 100_000_000.0 "USD"
  lm3DepositCid         <- deposit operator cashProvider lm3 100_000_000.0 "USD"
  investor1DepositCid   <- deposit operator lm1 investor1 10_000_000.0 "USD"
  investor2DepositCid   <- deposit operator lm2 investor2 20_000_000.0 "USD"
  investor3DepositCid   <- deposit operator lm3 investor3 30_000_000.0 "USD"
  investor4DepositCid   <- deposit operator lm3 investor4 40_000_000.0 "USD"

  bondDepositCid <- issue operator bondRegistrar issuer "BondIssuance" 100_000_000.0 bond.assetId
  Some bondDeposit <- queryContractId @AssetDeposit issuer bondDepositCid

  let
    dealId = "DEAL1"
    priceId = Id with signatories = fromList [cashProvider]; label = "USD"; version = 0
    tranche = Asset with id = bond.assetId; quantity = 100_000_000.0
  dealCid <- createDeal operator structurer issuer settlementBank bndBank bondRegistrar cashProvider dealId priceId
  dealCid <- addTranche operator structurer issuer dealId tranche

  [bookBuildingRequest1Cid] <- requestBookBuilding operator lm1 issuer dealCid
  [bookBuildingRequest2Cid] <- requestBookBuilding operator lm2 issuer dealCid
  [bookBuildingRequest3Cid] <- requestBookBuilding operator lm3 issuer dealCid
  [bookBuildingRequest4Cid] <- requestBookBuilding operator cm1 lm3 dealCid

  bid1Cid <- bid operator lm1 investor1 bookBuildingRequest1Cid 10_000_000.0 1.001
  bid2Cid <- bid operator lm2 investor2 bookBuildingRequest2Cid 20_000_000.0 0.999
  bid3Cid <- bid operator cm1 investor3 bookBuildingRequest4Cid 30_000_000.0 0.997
  bid4Cid <- bid operator cm1 investor4 bookBuildingRequest4Cid 40_000_000.0 0.995

  let offeredPrice = 1.0
  allocation1Cid <- allocate issuer bid1Cid 10_000_000.0 offeredPrice
  allocation2Cid <- allocate issuer bid2Cid 20_000_000.0 offeredPrice
  allocation3Cid <- allocate issuer bid3Cid 30_000_000.0 offeredPrice
  allocation4Cid <- allocate issuer bid4Cid 40_000_000.0 offeredPrice

  confirmation1Cid <- confirm investor1 allocation1Cid
  confirmation2Cid <- confirm investor2 allocation2Cid
  confirmation3Cid <- confirm investor3 allocation3Cid
  confirmation4Cid <- confirm investor4 allocation4Cid

  let
    confirmationCids = [ confirmation1Cid, confirmation2Cid, confirmation3Cid, confirmation4Cid ]
    price = offeredPrice

  -- Step 1
  dvpCids1 <- submit operator do exerciseCmd dealCid Structuring.InstructIssuerSettlement with ..
  allocateSis issuer
  allocateSis custodian2
  allocateSis settlementBank
  sign issuer
  sign custodian2
  sign settlementBank
  adCids1 <- mapA (settle bondRegistrar) dvpCids1

  -- -- Step 2
  dvpCids2 <- submit operator do exerciseCmd dealCid Structuring.InstructBndSettlement with ..
  allocateSis settlementBank
  allocateSis custodian2
  allocateSis custodian3
  allocateSis bndBank
  sign settlementBank
  sign custodian2
  sign custodian3
  sign bndBank
  adCids2 <- mapA (settle bondRegistrar) dvpCids2

  -- -- Step 3
  dvpCids3 <- submit operator do exerciseCmd dealCid Structuring.InstructInvestorSettlement with ..
  allocateSis bndBank
  allocateSis lm1
  allocateSis lm2
  allocateSis lm3
  allocateSis custodian1
  allocateSis custodian2
  allocateSis custodian3
  allocateSis custodian4
  allocateSis custodian5
  allocateSis investor1
  allocateSis investor2
  allocateSis investor3
  allocateSis investor4
  sign bndBank
  sign lm1
  sign lm2
  sign lm3
  sign custodian1
  sign custodian2
  sign custodian3
  sign custodian4
  sign custodian5
  sign investor1
  sign investor2
  sign investor3
  sign investor4
  adCids3 <- mapA (settle bondRegistrar) dvpCids3

  -- Clean up
  consolidate issuer
  consolidate settlementBank
  consolidate bndBank
  consolidate lm1
  consolidate lm2
  consolidate lm3
  consolidate custodian1
  consolidate custodian2
  consolidate custodian3
  consolidate custodian4
  consolidate custodian5
  pure ()
