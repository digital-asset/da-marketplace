module Tests.Distribution.Syndication.Origination where

import ContingentClaims.Claim (Claim(Zero))
import Daml.Script
import DA.Date (date, Month(..), DayOfWeek(Saturday, Sunday))
import DA.Finance.Base.DayCount (DayCountConvention(..))
import DA.Finance.Base.HolidayCalendar (BusinessDayConventionEnum(..), HolidayCalendarData(..), HolidayCalendar(..))
import DA.Finance.Base.RollConvention (PeriodEnum(..), RollConventionEnum(..))
import DA.Finance.Types (Id(..))
import DA.Set (fromList)
import Marketplace.Issuance.AssetDescription (AssetDescription)
import Marketplace.Issuance.Instrument.Model qualified as Instrument
import Tests.Distribution.Syndication.Setup (setup, Parties(..))
import Tests.Distribution.Syndication.Util

data Origination = Origination
  with
    usd : AssetDescription
    libor6m : Id
    bond1Desc : AssetDescription
    bond2Desc : AssetDescription
    bond3Desc : AssetDescription
    swap1Desc : AssetDescription
    bond1 : Instrument.Bond
    bond2 : Instrument.Bond
    bond3 : Instrument.Bond
    swap1 : Instrument.Swap

test : Script Origination
test = do
  parties <- setup
  origination parties

origination : Parties -> Script Origination
origination Parties{..} = do

  (_, usd)  <- originate operator cashProvider cashProvider public "USD" Zero

  let
    fedHolidays =
      [ date 2021 Jan 1, date 2021 Jan 18, date 2021 Feb 15, date 2021 May 31, date 2021 Jun 19, date 2021 Jul 5, date 2021 Sep 6, date 2021 Oct 11, date 2021 Nov 11, date 2021 Nov 25, date 2021 Dec 25,
        date 2022 Jan 1, date 2022 Jan 17, date 2022 Feb 21, date 2022 May 30, date 2022 Jun 20, date 2022 Jul 4, date 2022 Sep 5, date 2022 Oct 10, date 2022 Nov 11, date 2022 Nov 24, date 2022 Dec 26,
        date 2023 Jan 2, date 2023 Jan 16, date 2023 Feb 20, date 2023 May 29, date 2023 Jun 19, date 2023 Jul 4, date 2023 Sep 4, date 2023 Oct 9,  date 2023 Nov 11, date 2023 Nov 23, date 2023 Dec 25,
        date 2024 Jan 1, date 2024 Jan 15, date 2024 Feb 19, date 2024 May 27, date 2024 Jun 19, date 2024 Jul 4, date 2024 Sep 2, date 2024 Oct 14, date 2024 Nov 11, date 2024 Nov 28, date 2024 Dec 25,
        date 2025 Jan 1, date 2025 Jan 20, date 2025 Feb 17, date 2025 May 26, date 2025 Jun 19, date 2025 Jul 4, date 2025 Sep 1, date 2025 Oct 13, date 2025 Nov 11, date 2025 Nov 27, date 2025 Dec 25 ]
    fedCalendar = HolidayCalendarData with id = "FED"; weekend = [ Saturday, Sunday ]; holidays = fedHolidays
    libor6m = Id with signatories = fromList [bondRegistrar, issuer]; label = "LIBOR-6M"; version = 0
    bond1Id = Id with signatories = fromList [bondRegistrar, issuer]; label = "BOND1"; version = 0
    bond2Id = Id with signatories = fromList [bondRegistrar, issuer]; label = "BOND2"; version = 0
    bond3Id = Id with signatories = fromList [bondRegistrar, issuer]; label = "BOND3"; version = 0
    swap1Id = Id with signatories = fromList [bondRegistrar, issuer]; label = "SWAP1"; version = 0
    bondSched1 = createSchedule (date 2021 Dec 20) (date 2022 Dec 20) M 3 ["FED"] MODFOLLOWING DC_Act_Act_ISDA (DOM 20)
    bondSched2 = createSchedule (date 2021 Dec 20) (date 2023 Dec 20) M 6 ["FED"] MODFOLLOWING DC_Act_Act_ISDA (DOM 20)
    bondSched3 = createSchedule (date 2021 Dec 20) (date 2023 Dec 20) M 6 ["FED"] MODFOLLOWING DC_Act_Act_ISDA (DOM 20)
    swapPaySched = createSchedule (date 2021 Dec 20) (date 2023 Dec 20) M 6 ["FED"] MODFOLLOWING DC_Act_Act_ISDA (DOM 20)
    swapRecSched = createSchedule (date 2021 Dec 20) (date 2023 Dec 20) M 6 ["FED"] MODFOLLOWING DC_Act_Act_ISDA (DOM 20)
    swapPayAmount = Instrument.Float with rateId = libor6m; periodSpread = 0.00
    swapRecAmount = Instrument.Fixed with annualRate = 0.01
    swapPay = Instrument.InterestStream with schedule = swapPaySched; amount = swapPayAmount
    swapRec = Instrument.InterestStream with schedule = swapRecSched; amount = swapRecAmount
    bond1 = createFixedRateBond     bond1Id "ISIN" usd.assetId bondSched1.startDate bondSched1.endDate bondSched1 0.04 True True [public, operator]
    bond2 = createFixedRateBond     bond2Id "ISIN" usd.assetId bondSched2.startDate bondSched2.endDate bondSched2 0.05 True True [public, operator]
    bond3 = createFloatingRateBond  bond3Id "ISIN" usd.assetId bondSched3.startDate bondSched3.endDate bondSched3 libor6m 0.01 True True [public, operator]
    swap1 = createSwap              swap1Id usd.assetId usd.assetId swapPaySched.startDate swapPaySched.endDate swapPay swapRec True [public]

  submitMulti [operator, bondRegistrar] [] do createCmd HolidayCalendar with operator; provider = bondRegistrar; calendar = fedCalendar; observers = fromList [issuer]

  (bond1Desc, _) <- originateBond operator bondRegistrar issuer public bond1
  (bond2Desc, _) <- originateBond operator bondRegistrar issuer public bond2
  (bond3Desc, _) <- originateBond operator bondRegistrar issuer public bond3
  (swap1Desc, _) <- originateSwap operator bondRegistrar issuer public swap1

  pure Origination with ..
