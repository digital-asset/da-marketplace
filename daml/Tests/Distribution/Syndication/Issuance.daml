module Tests.Distribution.Syndication.Issuance where

import Daml.Script
import DA.Date (Month(Dec), date)
import DA.Set (singleton)
import DA.Text (sha256)
import DA.Time (addRelTime, hours)
import Marketplace.Distribution.Syndication.Structuring.Model qualified as Structuring
import Marketplace.Settlement.Hierarchical (SettlementMode(..))
import Tests.Distribution.Syndication.Origination (origination, Origination(..))
import Tests.Distribution.Syndication.Setup (setup, Parties(..))
import Tests.Distribution.Syndication.Util

test : Script ()
test = do
  parties <- setup
  orig <- origination parties
  issuance parties orig

issuance : Parties -> Origination -> Script ()
issuance Parties{..} Origination{..} = do

  let dealId = "DEAL1"
  dealCid     <- createDeal operator structurer issuer dealId
  (dealCid, tranche1Cid) <- addTranche operator structurer issuer settlementBank bndBank bondRegistrar cashProvider payingAgent dealId "TRANCHE1" bond1.id usd.assetId 100_000_000.0 Dvp Dvp
  (dealCid, tranche2Cid) <- addTranche operator structurer issuer settlementBank bndBank bondRegistrar cashProvider payingAgent dealId "TRANCHE2" bond2.id usd.assetId 100_000_000.0 Fop Fop
  (dealCid, tranche3Cid) <- addTranche operator structurer issuer settlementBank bndBank bondRegistrar cashProvider payingAgent dealId "TRANCHE3" bond3.id usd.assetId 100_000_000.0 Htlc Htlc

  deposit operator cashProvider  issuer     14_000_000.0 usd.assetId
  deposit operator cashProvider  lm1        10_000_000.0 usd.assetId
  deposit operator cashProvider  lm2       100_000_000.0 usd.assetId
  deposit operator cashProvider  lm3       100_000_000.0 usd.assetId
  deposit operator lm1           investor1  10_000_000.0 (usd.assetId with signatories = singleton lm1)
  deposit operator lm2           investor2  20_000_000.0 (usd.assetId with signatories = singleton lm2)
  deposit operator lm3           investor3  30_000_000.0 (usd.assetId with signatories = singleton lm3)
  deposit operator lm3           investor4  40_000_000.0 (usd.assetId with signatories = singleton lm3)

  issue operator bondRegistrar issuer "BOND1-Issuance" tranche1Cid
  issue operator bondRegistrar issuer "BOND2-Issuance" tranche2Cid
  issue operator bondRegistrar issuer "BOND3-Issuance" tranche3Cid

  requestBookBuilding operator lm1 issuer tranche1Cid
  requestBookBuilding operator lm1 issuer tranche2Cid
  requestBookBuilding operator lm1 issuer tranche3Cid
  requestBookBuilding operator lm2 issuer tranche1Cid
  requestBookBuilding operator lm2 issuer tranche2Cid
  requestBookBuilding operator lm2 issuer tranche3Cid
  requestBookBuilding operator lm3 issuer tranche1Cid
  requestBookBuilding operator lm3 issuer tranche2Cid
  requestBookBuilding operator lm3 issuer tranche3Cid
  requestBookBuilding operator cm1 lm3 tranche1Cid
  requestBookBuilding operator cm1 lm3 tranche2Cid
  requestBookBuilding operator cm1 lm3 tranche3Cid

  bid operator lm1 investor1 dealId "TRANCHE1" 10_000_000.0 1.009
  bid operator lm1 investor1 dealId "TRANCHE2" 10_000_000.0 1.009
  bid operator lm1 investor1 dealId "TRANCHE3" 10_000_000.0 1.009
  bid operator lm2 investor2 dealId "TRANCHE1" 20_000_000.0 1.008
  bid operator lm2 investor2 dealId "TRANCHE2" 20_000_000.0 1.008
  bid operator lm2 investor2 dealId "TRANCHE3" 20_000_000.0 1.008
  bid operator cm1 investor3 dealId "TRANCHE1" 30_000_000.0 1.007
  bid operator cm1 investor3 dealId "TRANCHE2" 30_000_000.0 1.007
  bid operator cm1 investor3 dealId "TRANCHE3" 30_000_000.0 1.007
  bid operator cm1 investor4 dealId "TRANCHE1" 40_000_000.0 1.006
  bid operator cm1 investor4 dealId "TRANCHE2" 40_000_000.0 1.006
  bid operator cm1 investor4 dealId "TRANCHE3" 40_000_000.0 1.006

  let
    allocations = [ (investor1, 10_000_000.0), (investor2, 20_000_000.0), (investor3, 30_000_000.0), (investor4, 40_000_000.0) ]
    offeredPrice = 1.0
  closeBook operator structurer issuer dealId "TRANCHE1" allocations offeredPrice
  closeBook operator structurer issuer dealId "TRANCHE2" allocations offeredPrice
  closeBook operator structurer issuer dealId "TRANCHE3" allocations offeredPrice

  let 
    secret1 = "investor1Sceret"
    hashlock1 = sha256 secret1
    secret2 = "investor2Sceret"
    hashlock2 = sha256 secret2
    secret3 = "investor3Sceret"
    hashlock3 = sha256 secret3
    secret4 = "investor4Sceret"
    hashlock4 = sha256 secret4

  confirmation11Cid <- confirm investor1 dealId "TRANCHE1" Dvp None
  confirmation12Cid <- confirm investor1 dealId "TRANCHE2" Fop None
  confirmation13Cid <- confirm investor1 dealId "TRANCHE3" Htlc (Some hashlock1)
  confirmation21Cid <- confirm investor2 dealId "TRANCHE1" Dvp None
  confirmation22Cid <- confirm investor2 dealId "TRANCHE2" Fop None
  confirmation23Cid <- confirm investor2 dealId "TRANCHE3" Htlc (Some hashlock2)
  confirmation31Cid <- confirm investor3 dealId "TRANCHE1" Dvp None
  confirmation32Cid <- confirm investor3 dealId "TRANCHE2" Fop None
  confirmation33Cid <- confirm investor3 dealId "TRANCHE3" Htlc (Some hashlock3)
  confirmation41Cid <- confirm investor4 dealId "TRANCHE1" Dvp None
  confirmation42Cid <- confirm investor4 dealId "TRANCHE2" Fop None
  confirmation43Cid <- confirm investor4 dealId "TRANCHE3" Htlc (Some hashlock4)

  let
    confirmationCids1 = [ confirmation11Cid, confirmation21Cid, confirmation31Cid, confirmation41Cid ]
    confirmationCids2 = [ confirmation12Cid, confirmation22Cid, confirmation32Cid, confirmation42Cid ]
    confirmationCids3 = [ confirmation13Cid, confirmation23Cid, confirmation33Cid, confirmation43Cid ]
    price = offeredPrice
    dateOfSettlement = date 2021 Dec 20
    dateOfTrade = dateOfSettlement

  -- Step 1
  now <- getTime
  let
    expiry = addRelTime now $ hours 1
    secret = "settlementBankSecret"
    hashlock = sha256 secret
  dvpCid11 <- submit operator do exerciseCmd tranche1Cid Structuring.InstructIssuerSettlement with price; dateOfSettlement; dateOfTrade
  dvpCid12 <- submit operator do exerciseCmd tranche2Cid Structuring.InstructIssuerSettlement with price; dateOfSettlement; dateOfTrade
  dvpCid13 <- submit operator do exerciseCmd tranche3Cid Structuring.InstructIssuerSettlementHtlc with price; dateOfSettlement; dateOfTrade; hashlock; expiry
  allocateInstructions [ issuer, custodian2, settlementBank ]
  allocateInstructionsHtlc [ issuer, custodian2 ]
  signInstructions [ issuer, custodian2, settlementBank ]
  signInstructionsHtlc [ custodian2, settlementBank ]
  settleTrades bondRegistrar [ dvpCid11, dvpCid12 ]
  settleTradeHtlc settlementBank (secret, dvpCid13)

  -- Step 2
  let 
    secret = "bndBankSecret"
    hashlock = sha256 secret
  dvpCid21 <- submit operator do exerciseCmd tranche1Cid Structuring.InstructBndSettlement with price; dateOfSettlement; dateOfTrade
  dvpCid22 <- submit operator do exerciseCmd tranche2Cid Structuring.InstructBndSettlement with price; dateOfSettlement; dateOfTrade
  dvpCid23 <- submit operator do exerciseCmd tranche3Cid Structuring.InstructBndSettlementHtlc with price; dateOfSettlement; dateOfTrade; hashlock; expiry
  allocateInstructions [ settlementBank, custodian2, custodian3, bndBank ]
  allocateInstructionsHtlc [ settlementBank, custodian2, custodian3 ]
  signInstructions [ settlementBank, custodian2, custodian3, bndBank ]
  signInstructionsHtlc [ custodian2, custodian3, bndBank ]
  settleTrades bondRegistrar [ dvpCid21, dvpCid22 ]
  settleTradeHtlc bndBank (secret, dvpCid23)

  -- -- -- Step 3
  dvpCids31 <- submit operator do exerciseCmd tranche1Cid Structuring.InstructInvestorSettlement with confirmationCids = confirmationCids1; price; dateOfSettlement; dateOfTrade
  dvpCids32 <- submit operator do exerciseCmd tranche2Cid Structuring.InstructInvestorSettlement with confirmationCids = confirmationCids2; price; dateOfSettlement; dateOfTrade
  dvpCids33 <- submit operator do exerciseCmd tranche3Cid Structuring.InstructInvestorSettlementHtlc with confirmationCids = confirmationCids3; price; dateOfSettlement; dateOfTrade; expiry
  allocateInstructions [ bndBank, lm1, lm2, lm3, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]
  allocateInstructionsHtlc [ bndBank, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]
  signInstructions [ bndBank, lm1, lm2, lm3, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]
  signInstructionsHtlc [ custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]
  settleTrades bondRegistrar $ dvpCids31 <> dvpCids32
  let
    investorSecretDvpTuples = zip3 [investor1, investor2, investor3, investor4] [secret1, secret2, secret3, secret4] dvpCids33
  settleTradesHtlc investorSecretDvpTuples
  -- Clean up
  consolidate [ issuer, settlementBank, bndBank, lm1, lm2, lm3, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]

  pure ()