module Tests.Distribution.Syndication.Issuance where

import Daml.Script
import DA.Set (singleton)
import Marketplace.Distribution.Syndication.Structuring.Model qualified as Structuring
import Tests.Distribution.Syndication.Origination (origination, Origination(..))
import Tests.Distribution.Syndication.Setup (setup, Parties(..))
import Tests.Distribution.Syndication.Util
import DA.Date (Month(Dec), date)

test : Script ()
test = do
  parties <- setup
  orig <- origination parties
  issuance parties orig

issuance : Parties -> Origination -> Script ()
issuance Parties{..} Origination{..} = do

  let dealId = "DEAL1"
  dealCid     <- createDeal operator structurer issuer dealId
  (dealCid, tranche1Cid) <- addTranche operator structurer issuer settlementBank bndBank bondRegistrar cashProvider payingAgent dealId "TRANCHE1" bond1.id usd.assetId 100_000_000.0
  (dealCid, tranche2Cid) <- addTranche operator structurer issuer settlementBank bndBank bondRegistrar cashProvider payingAgent dealId "TRANCHE2" bond2.id usd.assetId 100_000_000.0

  deposit operator cashProvider  issuer     14_000_000.0 usd.assetId
  deposit operator cashProvider  lm1        20_000_000.0 usd.assetId
  deposit operator cashProvider  lm2       200_000_000.0 usd.assetId
  deposit operator cashProvider  lm3       200_000_000.0 usd.assetId
  deposit operator lm1           investor1  20_000_000.0 (usd.assetId with signatories = singleton lm1)
  deposit operator lm2           investor2  40_000_000.0 (usd.assetId with signatories = singleton lm2)
  deposit operator lm3           investor3  60_000_000.0 (usd.assetId with signatories = singleton lm3)
  deposit operator lm3           investor4  80_000_000.0 (usd.assetId with signatories = singleton lm3)

  issue operator bondRegistrar issuer "BOND1-Issuance" 100_000_000.0 bond1.id
  issue operator bondRegistrar issuer "BOND2-Issuance" 100_000_000.0 bond2.id

  bookBuildingRequest11Cid <- requestBookBuilding operator lm1 issuer tranche1Cid
  bookBuildingRequest12Cid <- requestBookBuilding operator lm1 issuer tranche2Cid
  bookBuildingRequest21Cid <- requestBookBuilding operator lm2 issuer tranche1Cid
  bookBuildingRequest22Cid <- requestBookBuilding operator lm2 issuer tranche2Cid
  bookBuildingRequest31Cid <- requestBookBuilding operator lm3 issuer tranche1Cid
  bookBuildingRequest32Cid <- requestBookBuilding operator lm3 issuer tranche2Cid
  bookBuildingRequest41Cid <- requestBookBuilding operator cm1 lm3 tranche1Cid
  bookBuildingRequest42Cid <- requestBookBuilding operator cm1 lm3 tranche2Cid

  bid11Cid <- bid operator lm1 investor1 bookBuildingRequest11Cid 10_000_000.0 1.009
  bid12Cid <- bid operator lm1 investor1 bookBuildingRequest12Cid 10_000_000.0 1.008
  bid21Cid <- bid operator lm2 investor2 bookBuildingRequest21Cid 20_000_000.0 1.007
  bid22Cid <- bid operator lm2 investor2 bookBuildingRequest22Cid 20_000_000.0 1.008
  bid31Cid <- bid operator cm1 investor3 bookBuildingRequest41Cid 30_000_000.0 1.005
  bid32Cid <- bid operator cm1 investor3 bookBuildingRequest42Cid 30_000_000.0 1.006
  bid41Cid <- bid operator cm1 investor4 bookBuildingRequest41Cid 40_000_000.0 1.003
  bid42Cid <- bid operator cm1 investor4 bookBuildingRequest42Cid 40_000_000.0 1.004

  let offeredPrice = 1.0
  allocation11Cid <- allocate issuer bid11Cid 10_000_000.0 offeredPrice
  allocation12Cid <- allocate issuer bid12Cid 10_000_000.0 offeredPrice
  allocation21Cid <- allocate issuer bid21Cid 20_000_000.0 offeredPrice
  allocation22Cid <- allocate issuer bid22Cid 20_000_000.0 offeredPrice
  allocation31Cid <- allocate issuer bid31Cid 30_000_000.0 offeredPrice
  allocation32Cid <- allocate issuer bid32Cid 30_000_000.0 offeredPrice
  allocation41Cid <- allocate issuer bid41Cid 40_000_000.0 offeredPrice
  allocation42Cid <- allocate issuer bid42Cid 40_000_000.0 offeredPrice

  confirmation11Cid <- confirm investor1 allocation11Cid
  confirmation12Cid <- confirm investor1 allocation12Cid
  confirmation21Cid <- confirm investor2 allocation21Cid
  confirmation22Cid <- confirm investor2 allocation22Cid
  confirmation31Cid <- confirm investor3 allocation31Cid
  confirmation32Cid <- confirm investor3 allocation32Cid
  confirmation41Cid <- confirm investor4 allocation41Cid
  confirmation42Cid <- confirm investor4 allocation42Cid

  let
    confirmationCids = [ confirmation11Cid, confirmation12Cid, confirmation21Cid, confirmation22Cid, confirmation31Cid, confirmation32Cid, confirmation41Cid, confirmation42Cid ]
    price = offeredPrice
    dateOfSettlement = date 2021 Dec 20
    dateOfTrade = dateOfSettlement

  -- Step 1
  dvpCid11 <- submit operator do exerciseCmd tranche1Cid Structuring.InstructIssuerSettlement with confirmationCids; price; dateOfSettlement; dateOfTrade
  dvpCid12 <- submit operator do exerciseCmd tranche2Cid Structuring.InstructIssuerSettlement with confirmationCids; price; dateOfSettlement; dateOfTrade
  allocateInstructions [ issuer, custodian2, settlementBank ]
  signInstructions [ issuer, custodian2, settlementBank ]
  settleTrades bondRegistrar [ dvpCid11, dvpCid12 ]

  -- Step 2
  dvpCid21 <- submit operator do exerciseCmd tranche1Cid Structuring.InstructBndSettlement with confirmationCids; price; dateOfSettlement; dateOfTrade
  dvpCid22 <- submit operator do exerciseCmd tranche2Cid Structuring.InstructBndSettlement with confirmationCids; price; dateOfSettlement; dateOfTrade
  allocateInstructions [ settlementBank, custodian2, custodian3, bndBank ]
  signInstructions [ settlementBank, custodian2, custodian3, bndBank ]
  settleTrades bondRegistrar [ dvpCid21, dvpCid22 ]

  -- -- Step 3
  dvpCids31 <- submit operator do exerciseCmd tranche1Cid Structuring.InstructInvestorSettlement with confirmationCids; price; dateOfSettlement; dateOfTrade
  dvpCids32 <- submit operator do exerciseCmd tranche2Cid Structuring.InstructInvestorSettlement with confirmationCids; price; dateOfSettlement; dateOfTrade
  allocateInstructions [ bndBank, lm1, lm2, lm3, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]
  signInstructions [ bndBank, lm1, lm2, lm3, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]
  settleTrades bondRegistrar $ dvpCids31 <> dvpCids32

  -- Clean up
  consolidate [ issuer, settlementBank, bndBank, lm1, lm2, lm3, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]

  pure ()