module Tests.Distribution.Syndication.Issuance where

import Daml.Script
import DA.Set (singleton)
import Marketplace.Distribution.Syndication.Structuring.Model qualified as Structuring
import Tests.Distribution.Syndication.Origination (origination, Origination(..))
import Tests.Distribution.Syndication.Setup (setup, Parties(..))
import Tests.Distribution.Syndication.Util
import DA.Date (Month(Dec), date)

test : Script ()
test = do
  parties <- setup
  orig <- origination parties
  issuance parties orig

issuance : Parties -> Origination -> Script ()
issuance Parties{..} Origination{..} = do

  let dealId = "DEAL1"
  dealCid     <- createDeal operator structurer issuer dealId
  (dealCid, tranche1Cid) <- addTranche operator structurer issuer settlementBank bndBank bondRegistrar cashProvider payingAgent dealId "TRANCHE1" bond1.id usd.assetId 100_000_000.0
  (dealCid, tranche2Cid) <- addTranche operator structurer issuer settlementBank bndBank bondRegistrar cashProvider payingAgent dealId "TRANCHE2" bond2.id usd.assetId 100_000_000.0

  deposit operator cashProvider  issuer     14_000_000.0 usd.assetId
  deposit operator cashProvider  lm1        20_000_000.0 usd.assetId
  deposit operator cashProvider  lm2       200_000_000.0 usd.assetId
  deposit operator cashProvider  lm3       200_000_000.0 usd.assetId
  deposit operator lm1           investor1  20_000_000.0 (usd.assetId with signatories = singleton lm1)
  deposit operator lm2           investor2  40_000_000.0 (usd.assetId with signatories = singleton lm2)
  deposit operator lm3           investor3  60_000_000.0 (usd.assetId with signatories = singleton lm3)
  deposit operator lm3           investor4  80_000_000.0 (usd.assetId with signatories = singleton lm3)

  issue operator bondRegistrar issuer "BOND1-Issuance" tranche1Cid
  issue operator bondRegistrar issuer "BOND2-Issuance" tranche2Cid

  requestBookBuilding operator lm1 issuer tranche1Cid
  requestBookBuilding operator lm1 issuer tranche2Cid
  requestBookBuilding operator lm2 issuer tranche1Cid
  requestBookBuilding operator lm2 issuer tranche2Cid
  requestBookBuilding operator lm3 issuer tranche1Cid
  requestBookBuilding operator lm3 issuer tranche2Cid
  requestBookBuilding operator cm1 lm3 tranche1Cid
  requestBookBuilding operator cm1 lm3 tranche2Cid

  bid operator lm1 investor1 dealId "TRANCHE1" 10_000_000.0 1.009
  bid operator lm1 investor1 dealId "TRANCHE2" 10_000_000.0 1.008
  bid operator lm2 investor2 dealId "TRANCHE1" 20_000_000.0 1.007
  bid operator lm2 investor2 dealId "TRANCHE2" 20_000_000.0 1.008
  bid operator cm1 investor3 dealId "TRANCHE1" 30_000_000.0 1.005
  bid operator cm1 investor3 dealId "TRANCHE2" 30_000_000.0 1.006
  bid operator cm1 investor4 dealId "TRANCHE1" 40_000_000.0 1.003
  bid operator cm1 investor4 dealId "TRANCHE2" 40_000_000.0 1.004

  let
    allocations = [ (investor1, 10_000_000.0), (investor2, 20_000_000.0), (investor3, 30_000_000.0), (investor4, 40_000_000.0) ]
    offeredPrice = 1.0
  closeBook operator structurer issuer dealId "TRANCHE1" allocations offeredPrice
  closeBook operator structurer issuer dealId "TRANCHE2" allocations offeredPrice

  confirmation11Cid <- confirm investor1 dealId "TRANCHE1"
  confirmation12Cid <- confirm investor1 dealId "TRANCHE2"
  confirmation21Cid <- confirm investor2 dealId "TRANCHE1"
  confirmation22Cid <- confirm investor2 dealId "TRANCHE2"
  confirmation31Cid <- confirm investor3 dealId "TRANCHE1"
  confirmation32Cid <- confirm investor3 dealId "TRANCHE2"
  confirmation41Cid <- confirm investor4 dealId "TRANCHE1"
  confirmation42Cid <- confirm investor4 dealId "TRANCHE2"

  let
    confirmationCids1 = [ confirmation11Cid, confirmation21Cid, confirmation31Cid, confirmation41Cid ]
    confirmationCids2 = [ confirmation12Cid, confirmation22Cid, confirmation32Cid, confirmation42Cid ]
    price = offeredPrice
    dateOfSettlement = date 2021 Dec 20
    dateOfTrade = dateOfSettlement

  -- Step 1
  dvpCid11 <- submit operator do exerciseCmd tranche1Cid Structuring.InstructIssuerSettlement with price; dateOfSettlement; dateOfTrade
  dvpCid12 <- submit operator do exerciseCmd tranche2Cid Structuring.InstructIssuerSettlement with price; dateOfSettlement; dateOfTrade
  allocateInstructions [ issuer, custodian2, settlementBank ]
  signInstructions [ issuer, custodian2, settlementBank ]
  settleTrades bondRegistrar [ dvpCid11, dvpCid12 ]

  -- Step 2
  dvpCid21 <- submit operator do exerciseCmd tranche1Cid Structuring.InstructBndSettlement with price; dateOfSettlement; dateOfTrade
  dvpCid22 <- submit operator do exerciseCmd tranche2Cid Structuring.InstructBndSettlement with price; dateOfSettlement; dateOfTrade
  allocateInstructions [ settlementBank, custodian2, custodian3, bndBank ]
  signInstructions [ settlementBank, custodian2, custodian3, bndBank ]
  settleTrades bondRegistrar [ dvpCid21, dvpCid22 ]

  -- -- Step 3
  dvpCids31 <- submit operator do exerciseCmd tranche1Cid Structuring.InstructInvestorSettlement with confirmationCids = confirmationCids1; price; dateOfSettlement; dateOfTrade
  dvpCids32 <- submit operator do exerciseCmd tranche2Cid Structuring.InstructInvestorSettlement with confirmationCids = confirmationCids2; price; dateOfSettlement; dateOfTrade
  allocateInstructions [ bndBank, lm1, lm2, lm3, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]
  signInstructions [ bndBank, lm1, lm2, lm3, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]
  settleTrades bondRegistrar $ dvpCids31 <> dvpCids32

  -- Clean up
  consolidate [ issuer, settlementBank, bndBank, lm1, lm2, lm3, custodian1, custodian2, custodian3, custodian4, custodian5, investor1, investor2, investor3, investor4 ]

  pure ()