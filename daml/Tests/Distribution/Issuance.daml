module Tests.Distribution.Issuance where

import ContingentClaims.Claim (Claim(Zero))
import ContingentClaims.FinancialClaim (unrollDates)
import Daml.Script
import DA.Date (Month(..))
import DA.Finance.Asset (AssetDeposit(..))
import DA.Finance.Types (Asset(..), Id(..))
import DA.Set (fromList)
import Marketplace.Issuance.AssetDescription (AssetDescription)
import Marketplace.Distribution.Syndication.Structuring.Model qualified as Structuring
import Tests.Utils
import Tests.Distribution.Setup (setup, Parties(..))
import Tests.Distribution.Util

data Issuance = Issuance
  with
    parties : Parties
    cash : AssetDescription
    security : AssetDescription

issuance : Script Issuance
issuance = do

  p@Parties{..} <- setup

  (_, usd)  <- originate operator cashProvider cashProvider public "USD" Zero
  (_, bond) <- originate operator bondRegistrar issuer public "BOND1" $ bond usd.assetId 1.0 0.02275 (unrollDates 2021 2023 [Jan,Jul] 15)

  lm1DepositCid         <- deposit operator cashProvider lm1 10_000_000.0 "USD"
  lm2DepositCid         <- deposit operator cashProvider lm2 100_000_000.0 "USD"
  lm3DepositCid         <- deposit operator cashProvider lm3 100_000_000.0 "USD"
  investor1DepositCid   <- deposit operator lm1 investor1 10_000_000.0 "USD"
  investor2DepositCid   <- deposit operator lm2 investor2 20_000_000.0 "USD"
  investor3DepositCid   <- deposit operator lm3 investor3 30_000_000.0 "USD"
  investor4DepositCid   <- deposit operator lm3 investor4 40_000_000.0 "USD"

  bondDepositCid <- issue operator bondRegistrar issuer "BondIssuance" 100_000_000.0 bond.assetId
  Some bondDeposit <- queryContractId @AssetDeposit issuer bondDepositCid

  let
    dealId = "DEAL1"
    priceId = Id with signatories = fromList [cashProvider]; label = "USD"; version = 0
    tranche = Asset with id = bond.assetId; quantity = 100_000_000.0
  dealCid <- createDeal operator structurer issuer settlementBank bndBank bondRegistrar cashProvider dealId priceId
  dealCid <- addTranche operator structurer issuer dealId tranche

  [bookBuildingRequest1Cid] <- requestBookBuilding operator lm1 issuer dealCid
  [bookBuildingRequest2Cid] <- requestBookBuilding operator lm2 issuer dealCid
  [bookBuildingRequest3Cid] <- requestBookBuilding operator lm3 issuer dealCid
  [bookBuildingRequest4Cid] <- requestBookBuilding operator cm1 lm3 dealCid

  bid1Cid <- bid operator lm1 investor1 bookBuildingRequest1Cid 10_000_000.0 1.001
  bid2Cid <- bid operator lm2 investor2 bookBuildingRequest2Cid 20_000_000.0 0.999
  bid3Cid <- bid operator cm1 investor3 bookBuildingRequest4Cid 30_000_000.0 0.997
  bid4Cid <- bid operator cm1 investor4 bookBuildingRequest4Cid 40_000_000.0 0.995

  let offeredPrice = 1.0
  allocation1Cid <- allocate issuer bid1Cid 10_000_000.0 offeredPrice
  allocation2Cid <- allocate issuer bid2Cid 20_000_000.0 offeredPrice
  allocation3Cid <- allocate issuer bid3Cid 30_000_000.0 offeredPrice
  allocation4Cid <- allocate issuer bid4Cid 40_000_000.0 offeredPrice

  confirmation1Cid <- confirm investor1 allocation1Cid
  confirmation2Cid <- confirm investor2 allocation2Cid
  confirmation3Cid <- confirm investor3 allocation3Cid
  confirmation4Cid <- confirm investor4 allocation4Cid

  let
    confirmationCids = [ confirmation1Cid, confirmation2Cid, confirmation3Cid, confirmation4Cid ]
    price = offeredPrice

  -- Step 1
  dvpCids1 <- submit operator do exerciseCmd dealCid Structuring.InstructIssuerSettlement with ..
  allocateSis issuer
  allocateSis custodian2
  allocateSis settlementBank
  sign issuer
  sign custodian2
  sign settlementBank
  adCids1 <- mapA (settle bondRegistrar) dvpCids1

  -- Step 2
  dvpCids2 <- submit operator do exerciseCmd dealCid Structuring.InstructBndSettlement with ..
  allocateSis settlementBank
  allocateSis custodian2
  allocateSis custodian3
  allocateSis bndBank
  sign settlementBank
  sign custodian2
  sign custodian3
  sign bndBank
  adCids2 <- mapA (settle bondRegistrar) dvpCids2

  -- Step 3
  dvpCids3 <- submit operator do exerciseCmd dealCid Structuring.InstructInvestorSettlement with ..
  allocateSis bndBank
  allocateSis lm1
  allocateSis lm2
  allocateSis lm3
  allocateSis custodian1
  allocateSis custodian2
  allocateSis custodian3
  allocateSis custodian4
  allocateSis custodian5
  allocateSis investor1
  allocateSis investor2
  allocateSis investor3
  allocateSis investor4
  sign bndBank
  sign lm1
  sign lm2
  sign lm3
  sign custodian1
  sign custodian2
  sign custodian3
  sign custodian4
  sign custodian5
  sign investor1
  sign investor2
  sign investor3
  sign investor4
  adCids3 <- mapA (settle bondRegistrar) dvpCids3

  -- Clean up
  consolidate issuer
  consolidate settlementBank
  consolidate bndBank
  consolidate lm1
  consolidate lm2
  consolidate lm3
  consolidate custodian1
  consolidate custodian2
  consolidate custodian3
  consolidate custodian4
  consolidate custodian5

  pure Issuance with parties = p; cash = usd; security = bond
