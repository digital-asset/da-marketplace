module Tests.Distribution.Setup where

import Daml.Script
import DA.Set (empty)
import Marketplace.Operator.Role qualified as Operator
import Tests.Distribution.Util

data Parties = Parties
  with
    operator : Party
    cashProvider : Party
    bondRegistrar : Party
    lm1 : Party
    lm2 : Party
    lm3 : Party
    cm1 : Party
    investor1 : Party
    investor2 : Party
    investor3 : Party
    investor4 : Party
    custodian1 : Party
    custodian2 : Party
    custodian3 : Party
    custodian4 : Party
    custodian5 : Party
    issuer : Party
    public : Party
    structurer : Party
    settlementBank : Party
    bndBank : Party

setup : Script Parties
setup = do
  operator      <- allocatePartyWithHint "Operator" $ PartyIdHint "Operator"
  cashProvider  <- allocatePartyWithHint "CashProvider" $ PartyIdHint "CashProvider"
  bondRegistrar <- allocatePartyWithHint "BondRegistrar" $ PartyIdHint "BondRegistrar"
  lm1  <- allocatePartyWithHint "LeadMgr1" $ PartyIdHint "LeadMgr1"
  lm2  <- allocatePartyWithHint "LeadMgr2" $ PartyIdHint "LeadMgr2"
  lm3  <- allocatePartyWithHint "LeadMgr3" $ PartyIdHint "LeadMgr3"
  cm1  <- allocatePartyWithHint "CoMgr31" $ PartyIdHint "CoMgr31"
  investor1 <- allocatePartyWithHint "Investor1" $ PartyIdHint "Investor1"
  investor2 <- allocatePartyWithHint "Investor2" $ PartyIdHint "Investor2"
  investor3 <- allocatePartyWithHint "Investor3" $ PartyIdHint "Investor3"
  investor4 <- allocatePartyWithHint "Investor4" $ PartyIdHint "Investor4"
  custodian1 <- allocatePartyWithHint "Custodian1" $ PartyIdHint "Custodian1"
  custodian2 <- allocatePartyWithHint "Custodian2" $ PartyIdHint "Custodian2"
  custodian3 <- allocatePartyWithHint "Custodian3" $ PartyIdHint "Custodian3"
  custodian4 <- allocatePartyWithHint "Custodian4" $ PartyIdHint "Custodian4"
  custodian5 <- allocatePartyWithHint "Custodian5" $ PartyIdHint "Custodian5"
  issuer <- allocatePartyWithHint "Issuer" $ PartyIdHint "Issuer"
  public <- allocatePartyWithHint "Public" $ PartyIdHint "Public"
  let
    structurer = lm1
    settlementBank = lm2
    bndBank = lm3

  submit operator do createCmd Operator.Role with operator; observers = empty

  -- 1st level
  createCustodianRole operator cashProvider None None
  (_, issuerCashAccount)        <- createCustodyService operator cashProvider issuer
  (_, lm1CashAccount)           <- createCustodyService operator cashProvider lm1
  (_, lm2CashAccount)           <- createCustodyService operator cashProvider lm2
  (_, lm3CashAccount)           <- createCustodyService operator cashProvider lm3
  createCustodianRole operator bondRegistrar None None
  (_, issuerBondAccount)        <- createCustodyService operator bondRegistrar issuer
  (_, custodian1BondAccount)    <- createCustodyService operator bondRegistrar custodian1
  (_, custodian2BondAccount)    <- createCustodyService operator bondRegistrar custodian2
  (_, custodian3BondAccount)    <- createCustodyService operator bondRegistrar custodian3
  (_, custodian4BondAccount)    <- createCustodyService operator bondRegistrar custodian4

  -- 2nd level
  createCustodianRole operator custodian1 None (Some custodian1BondAccount)
  (_, lm1BondAccount)         <- createCustodyService operator custodian1 lm1
  (_, investor1BondAccount)   <- createCustodyService operator custodian1 investor1
  createCustodianRole operator custodian2 None (Some custodian2BondAccount)
  (_, lm2BondAccount)         <- createCustodyService operator custodian2 lm2
  (_, investor2BondAccount)   <- createCustodyService operator custodian2 investor2
  createCustodianRole operator custodian3 None (Some custodian3BondAccount)
  (_, lm3BondAccount)         <- createCustodyService operator custodian3 lm3
  createCustodianRole operator custodian4 None (Some custodian4BondAccount)
  (_, custodian5BondAccount)  <- createCustodyService operator custodian4 custodian5

  -- 3rd level
  createCustodianRole operator custodian5 None (Some custodian5BondAccount)
  (_, investor3BondAccount)   <- createCustodyService operator custodian5 investor3
  (_, investor4BondAccount)   <- createCustodyService operator custodian5 investor4
  createCustodianRole operator lm1 (Some lm1CashAccount) (Some lm1BondAccount)
  (_, investor1CashAccount)   <- createCustodyService operator lm1 investor1
  createCustodianRole operator lm2 (Some lm2CashAccount) (Some lm2BondAccount)
  (_, investor2CashAccount)   <- createCustodyService operator lm2 investor2
  createCustodianRole operator lm3 (Some lm3CashAccount) (Some lm3BondAccount)
  (_, investor3CashAccount)   <- createCustodyService operator lm3 investor3
  (_, investor4CashAccount)   <- createCustodyService operator lm3 investor4

  -- Investor roles
  createInvestorRole operator investor1 investor1CashAccount investor1BondAccount
  createInvestorRole operator investor2 investor2CashAccount investor2BondAccount
  createInvestorRole operator investor3 investor3CashAccount investor3BondAccount
  createInvestorRole operator investor4 investor4CashAccount investor4BondAccount

  -- Issuer role
  createIssuerRole operator issuer issuerCashAccount issuerBondAccount
  createIssuanceService operator cashProvider cashProvider
  createIssuanceService operator bondRegistrar issuer

  -- Structurer role
  createStructurerRole operator structurer
  createStructuringService operator structurer issuer

  -- Distributor roles
  -- createDistributorRole operator issuer
  createDistributorRole operator lm1
  createBookBuildingService operator lm1 issuer
  createBiddingService operator lm1 investor1

  createDistributorRole operator lm2
  createBookBuildingService operator lm2 issuer
  createBiddingService operator lm2 investor2

  createDistributorRole operator lm3
  createBookBuildingService operator lm3 issuer

  createDistributorRole operator cm1
  createBookBuildingService operator cm1 lm3
  createBiddingService operator cm1 investor3
  createBiddingService operator cm1 investor4

  -- Lifecycling
  createLifecycleService operator issuer bondRegistrar cashProvider

  pure Parties with ..
