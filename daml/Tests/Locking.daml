module Tests.Locking where

import Daml.Script
import DA.Finance.Asset.Settlement (AssetSettlement_Transfer(..))
import DA.Finance.Types (Id(..), Asset(..))
import DA.Next.Set
import Marketplace.Trading.Service qualified as Trading
import Marketplace.Trading.Order qualified as Order
import Common

traderCannotMoveAllocatedAsset : Script ()
traderCannotMoveAllocatedAsset = do
  cr@CommonContracts{..} <- onboardCommon

  -- Assets
  let
    shareId = Id with signatories = fromList [ custodian ]; label = "JPM.N"; version = 0
    cashId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
    shareAsset = Asset with id = shareId; quantity = 200.0
    cashAsset = Asset with id = cashId; quantity = 20000.0
    priceAsset = Asset with id = cashId; quantity = 100.0

  alice <- onboardCustomer cr "Alice" shareAsset
  bob <- onboardCustomer cr "Bob" cashAsset

  -- Create orders
  let aliceOrderId = Id with signatories = fromList [ alice.customer ], label = "1", version = 0
  (aliceOrderCid, aliceCreateOrderRequestCid, aliceAssetDepositCid) <- submit alice.customer do exerciseCmd alice.tradingServiceCid Trading.RequestCreateOrder with depositCid = alice.assetDepositCid; orderDetails = Order.OrderDetails with id = aliceOrderId, symbol = "JPM.N/USD", asset = shareAsset, side = Order.Sell, timeInForce = Order.GTC, orderType = Order.Limit with price = 100.0

  let bobOrderId = Id with signatories = fromList [ bob.customer ], label = "2", version = 0
  (bobOrderCid, bobCreateOrderRequestCid, bobAssetDepositCid) <- submit bob.customer do exerciseCmd bob.tradingServiceCid Trading.RequestCreateOrder with depositCid = bob.assetDepositCid; orderDetails = Order.OrderDetails with id = bobOrderId, symbol = "JPM.N/USD", asset = shareAsset, side = Order.Buy, timeInForce = Order.GTC, orderType = Order.Limit with price = 100.0

  -- Can't move asset pledged as order collateral
  -- submitMustFail alice.customer do exerciseCmd alice.allocationAssetSettlementRuleCid AssetSettlement_Transfer with depositCid = aliceAssetDepositCid; receiverAccountId = alice.tradingAccountId
  -- submitMustFail bob.customer do exerciseCmd bob.allocationAssetSettlementRuleCid AssetSettlement_Transfer with depositCid = bobAssetDepositCid; receiverAccountId = bob.tradingAccountId

  -- Cancel order
  (aliceOrderCid, aliceCancelOrderRequestCid) <- submit alice.customer do exerciseCmd alice.tradingServiceCid Trading.RequestCancelOrder with orderCid = aliceOrderCid
  (aliceOrderCid, aliceAssetDepositCid2) <- submit exchange do exerciseCmd alice.tradingServiceCid Trading.CancelOrder with cancelOrderRequestCid = aliceCancelOrderRequestCid
  (bobOrderCid, bobCancelOrderRequestCid) <- submit bob.customer do exerciseCmd bob.tradingServiceCid Trading.RequestCancelOrder with orderCid = bobOrderCid
  (bobOrderCid, bobAssetDepositCid2) <- submit exchange do exerciseCmd bob.tradingServiceCid Trading.CancelOrder with cancelOrderRequestCid = bobCancelOrderRequestCid

  -- submit alice.customer do exerciseCmd alice.tradingAssetSettlementRuleCid AssetSettlement_Transfer with depositCid = aliceAssetDepositCid2; receiverAccountId = alice.awayAccountId
  -- submit bob.customer do exerciseCmd bob.tradingAssetSettlementRuleCid AssetSettlement_Transfer with depositCid = bobAssetDepositCid2; receiverAccountId = bob.awayAccountId

  pure ()
