module Tests.ExchangeTrade where

import Daml.Script

import Marketplace.Custodian
import Marketplace.Exchange
import Marketplace.ExchangeParticipant
import Marketplace.Investor
import Marketplace.Issuer
import Marketplace.Operator

import Marketplace.Trading
import Marketplace.Transfer
import Marketplace.Utils

import DA.Finance.Asset
import DA.Finance.Types

import Setup

import DA.Next.Set
import DA.List (head)

setupTransfer : Script ()
setupTransfer = allocateParties >>= doSetupTransfer

doSetupTransfer : LedgerParties -> Script ()
doSetupTransfer lp@(LedgerParties operator public custodian exchange issuer _ alice bob _) = do

  -- Onboard and create relationships
  handleOnboarding lp

  -- onbard investors
  aliceInvestorCid <- onboardInvestor lp alice "Alice the Investor"
  bobInvestorCid   <- onboardInvestor lp bob "Bob the Investor"

  let observers = [operator, public, custodian, issuer, exchange, alice, bob]

  btcTokenId <- createToken operator issuer "BTC" "Bitcoin" 2 observers
  ethTokenId <- createToken operator issuer "ETH" "ETH Coin" 2 observers
  usdTokenId <- createToken operator issuer "USD" "US Dollars" 2 observers

  let btcPair = (btcTokenId, usdTokenId)
  let ethPair = (btcTokenId, usdTokenId)

  -- the exchange adds support for BTC/USDT pair
  exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_AddPair
      with baseTokenId = btcTokenId, baseType = TokenAsset, quoteTokenId = usdTokenId, quoteType = TokenAsset
           minQuantity = 0.01, maxQuantity = 10000.0, clearedMarket = False, defaultCCP = None

  aliceUsdId <- setupExchangeAccount DepositDirect lp custodian usdTokenId 150.0 alice
  bobBtcId   <- setupExchangeAccount DepositRequest lp custodian btcTokenId 10.0 bob

  handleTrade lp btcTokenId usdTokenId aliceUsdId bobBtcId 1

  -- Test multiple Custodians

  -- onboard custodian
  custodianInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardCustodian with custodian = issuer, ..
  issuer `submit` exerciseCmd custodianInvCid CustodianInvitation_Accept with name = "Bank of Issuer", location = "", ..

  relationshipReqCid <- alice `submit` exerciseCmd aliceInvestorCid Investor_RequestCustodianRelationship with custodian = issuer, ..
  issuer `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve

  aliceUsdId <- setupExchangeAccount DepositRequest lp issuer usdTokenId 150.0 alice
  bobBtcId   <- setupExchangeAccount DepositRequest lp custodian btcTokenId 10.0 bob

  handleTrade lp btcTokenId usdTokenId aliceUsdId bobBtcId 3


  -- setup done --

handleTrade : LedgerParties -> Id -> Id -> ContractId AssetDeposit -> ContractId AssetDeposit -> Int -> Script ()
handleTrade lp@LedgerParties{userAdmin = operator, exchange, bob, alice} btcTokenId usdTokenId aliceUsdId bobBtcId orderId = do

  -- > alice places a bid for BTC
  bidOrderRequestCid <- alice `submit` exerciseByKeyCmd @ExchangeParticipant (exchange, operator, alice) ExchangeParticipant_PlaceBid
      with depositCids = [aliceUsdId], amount = 150.0, pair = (btcTokenId, usdTokenId), price = 50.00

  -- > exchange rejects bid
  aliceUsdId <- exchange `submit` exerciseCmd bidOrderRequestCid OrderRequest_Reject

  -- > alice places a new bid for BTC
  bidOrderRequestCid <- alice `submit` exerciseByKeyCmd @ExchangeParticipant (exchange, operator, alice) ExchangeParticipant_PlaceBid
      with depositCids = [aliceUsdId], amount = 150.0, pair = (btcTokenId, usdTokenId), price = 50.00
  bidOrderCid <- exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_ApproveOrderRequest
      with orderRequestCid = bidOrderRequestCid, orderId = orderId

  -- > bob places a new offer for BTC
  offerOrderRequestCid <- bob `submit` exerciseByKeyCmd @ExchangeParticipant (exchange, operator, bob) ExchangeParticipant_PlaceOffer
      with depositCids = [bobBtcId], amount = 1.0, pair = (btcTokenId, usdTokenId), price = 40.00
  offerOrderCid <- exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_ApproveOrderRequest
      with orderRequestCid = offerOrderRequestCid, orderId = orderId + 1

  -- exchange matches the two orders
  (buyTradeCid, _) <- exchange `submit` exerciseCmd bidOrderCid Order_Fill
      with fillQty = 1.0, fillPrice = 40.0, counterParty = bob, counterOrderId = orderId, timeMatched = "1601394768171637000"
  (sellTradeCid, _) <- exchange `submit` exerciseCmd offerOrderCid Order_Fill
      with fillQty = 1.0, fillPrice = 40.0, counterParty = alice, counterOrderId = orderId + 1, timeMatched = "1601394768171637000"

  (_, depositCids1) <- exchange `submit` exerciseCmd buyTradeCid TradeSide_Settle
  (_, depositCids2) <- exchange `submit` exerciseCmd sellTradeCid TradeSide_Settle

  let bobDepositCid   = head depositCids1
  let aliceDepositCid = head depositCids2

  (Some bobDeposit)   <- queryContractId bob bobDepositCid
  (Some aliceDeposit) <- queryContractId alice aliceDepositCid

  assert $ aliceDeposit.asset.quantity == 1.0
  assert $ bobDeposit.asset.quantity == 40.0

  -- return ()


onboardInvestor : LedgerParties -> Party -> Text-> Script (ContractId Investor)
onboardInvestor lp investor name = do
  let name     = "default name"
      title    = "default title"
      issuerID = "default issuerID"
      location = "default location"

  let operator  = lp.userAdmin
      custodian = lp.custodian
      exchange  = lp.exchange

  -- register investor
  inviteCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardInvestor with investor = investor, ..
  investorCid <- investor `submit` exerciseCmd inviteCid InvestorInvitation_Accept with isPublic = True, ..

  -- establish relationship with custodian
  relationshipRequestCid <- investor `submit` exerciseCmd investorCid Investor_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipRequestCid CustodianRelationshipRequest_Approve

  -- become exchange participant
  (_, exchInviteCid) <- exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_InviteParticipant with exchParticipant = investor
  investor `submit` exerciseCmd exchInviteCid ExchangeParticipantInvitation_Accept

  return investorCid

data DepositAction = DepositDirect | DepositRequest deriving (Show,Eq)

setupExchangeAccount : DepositAction -> LedgerParties -> Party -> Id -> Decimal -> Party -> Script (ContractId AssetDeposit)
setupExchangeAccount da lp custodian tokenId depositQuantity investor = do

  let operator  = lp.userAdmin
      exchange  = lp.exchange

  -- deposit USD into account
  depositCid <- case da of
          DepositDirect  -> custodian `submit` exerciseByKeyCmd @Custodian (operator, custodian) Custodian_CreateDeposit
                              with tokenId, depositQuantity, beneficiary = investor
          DepositRequest -> do
                depositRequestCid <- investor `submit` exerciseByKeyCmd @Investor (operator, investor) Investor_RequestDeposit
                  with custodian = custodian, tokenId, depositQuantity
                custodian `submit` exerciseCmd depositRequestCid DepositCreditRequest_Approve

  -- move to exchange account
  investor `submit` exerciseByKeyCmd @Investor (operator, investor) Investor_AllocateToProvider
      with depositCids = [depositCid], amount = depositQuantity, provider = exchange

createToken : Party -> Party -> Text -> Text -> Int -> [Party] -> Script Id
createToken operator issuer name description quantityPrecision observers = do
  issuer `submit` exerciseByKeyCmd @Issuer (operator, issuer) Issuer_IssueToken with name, description, quantityPrecision, isPublic = True, observers
  return $ Id with signatories = fromList [ issuer ], label = name, version = 0


handleOnboarding : LedgerParties -> Script ()
handleOnboarding lp@(LedgerParties operator public custodian exchange btcIssuer usdtIssuer alice bob broker) = do
  let name = "default name"
      title = "default title"
      issuerID = "default issuerID"
      location = "default location"

  -- create operator
  operator `submit` createCmd Operator with ..

  -- onboard custodian
  custodianInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardCustodian with ..
  custodian `submit` exerciseCmd custodianInvCid CustodianInvitation_Accept with name = "Bank of Example", ..

  -- onboard issuers
  btcIssuerInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardIssuer with issuer = btcIssuer, ..
  btcIssuerCid <- btcIssuer `submit` exerciseCmd btcIssuerInvCid IssuerInvitation_Accept with name = "BTC Issuer", ..

  usdtIssuerInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardIssuer with issuer = usdtIssuer, ..
  usdtIssuerCid <- usdtIssuer `submit` exerciseCmd usdtIssuerInvCid IssuerInvitation_Accept with name = "USDT Issuer", ..

  -- oboard exchange
  exchangeInvCid <- operator `submit` exerciseByKeyCmd @Operator operator Operator_OnboardExchange with ..
  exchangeCid <- exchange `submit` exerciseCmd exchangeInvCid ExchangeInvitation_Accept with name = "Exberry Exchange", ..

  -- issuers establish a relationship with the custodian
  relationshipReqCid <- btcIssuer `submit` exerciseCmd btcIssuerCid Issuer_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve

  relationshipReqCid <- usdtIssuer `submit` exerciseCmd usdtIssuerCid Issuer_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve

  -- exchange establishes a relationship with the custodian
  relationshipReqCid <- exchange `submit` exerciseCmd exchangeCid Exchange_RequestCustodianRelationship with ..
  custodian `submit` exerciseCmd relationshipReqCid CustodianRelationshipRequest_Approve

  return ()
