module Tests.ExchangeTrade where

import Common
import Daml.Script
import DA.Finance.Types (Id(..), Asset(..))
import DA.Next.Set
import qualified Marketplace.Matching as Matching
import qualified Marketplace.Settlement as Settlement
import qualified Marketplace.Trading as Trading

setup : Script ()
setup = do
  cr@CommonContracts{..} <- onboardCommon

  -- Assets
  let
    shareId = Id with signatories = fromList [ custodian ]; label = "JPM"; version = 0
    cashId = Id with signatories = fromList [ custodian ]; label = "USD"; version = 0
    shareAsset = Asset with id = shareId; quantity = 200.0
    cashAsset = Asset with id = cashId; quantity = 20000.0
    priceAsset = Asset with id = cashId; quantity = 100.0

  alice <- onboardCustomer cr "Alice" shareAsset
  bob <- onboardCustomer cr "Bob" cashAsset

  -- > Alice places a bid for JPM
  (aliceOrderCid, aliceCreateOrderRequestCid, _) <- submit alice.customer do
    exerciseByKeyCmd @Trading.Service (operator, exchange, alice.customer) Trading.RequestCreateOrder
      with
        orderDetails = Trading.OrderDetails with
          id = Id with signatories = fromList [ alice.customer ]; label = "123"; version = 0
          symbol = "JPM/USD"
          asset = shareAsset
          orderType = Trading.Limit with
            price = 100.0
          side = Trading.Buy
          timeInForce = Trading.GTC
        depositCid = alice.assetDepositCid

  -- > Bob places a new offer for JPM
  (bobOrderCid, bobCreateOrderRequestCid, _) <- submit bob.customer do
    exerciseByKeyCmd @Trading.Service (operator, exchange, bob.customer) Trading.RequestCreateOrder
      with
        orderDetails = Trading.OrderDetails with
          id = Id with signatories = fromList [ bob.customer ]; label = "456"; version = 0
          symbol = "JPM/USD"
          asset = shareAsset
          orderType = Trading.Limit with
            price = 100.0
          side = Trading.Sell
          timeInForce = Trading.GTC
        depositCid = bob.assetDepositCid

  -- Exchange matches the two orders
  tradeCid <- submit exchange do
    exerciseCmd matchingServiceCid Matching.MatchOrders
      with
        fill = Trading.ExecutionFill with
          matchId = "789"
          makerOrderId = "123"
          takerOrderId = "456"
          executedQuantity = 200.0
          executedPrice = 100.0
          executedTimestamp = ""

  -- Exchange settles the instructed trade
  submit exchange do exerciseCmd settlementServiceCid Settlement.SettleTrade with ..

  pure ()
