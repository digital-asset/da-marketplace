module Tests.ExchangeTrade where

import Common
import Daml.Script
import DA.Finance.Asset (AssetDeposit_Split(..))
import DA.Foldable (forA_)
import qualified Marketplace.Settlement.Model as Settlement
import qualified Marketplace.Trading.Matching.Service as Matching
import qualified Marketplace.Trading.Model as Order
import qualified Marketplace.Trading.Service as TradingService
import qualified Marketplace.Listing.Service as Listing
import qualified Marketplace.Listing.Model as Listing

import DA.List

setup : Script ()
setup = do
  parties@Parties{..} <- allocateParties
  providers@Providers{operator; exchange; matchingServiceCid} <- onboardProviders parties

  alice  <- onboardCustomer providers "Alice" alice
  bob    <- onboardCustomer providers "Bob" bob
  issuer <- onboardCustomer providers "Issuer" issuer

  Assets{usd; tsla} <- onboardAssets providers issuer

  -- Assets
  let
    shareAsset = tsla with quantity = 200.0
    cashAsset = usd with quantity = 20000.0
    priceAsset = usd with quantity = 100.0

  aliceDepositCid <- depositAsset providers alice shareAsset alice.mainAccount.id
  bobDepositCid <- depositAsset providers bob cashAsset bob.mainAccount.id

  -- List a Security to trade
  (listingServiceCid, _) <- head <$> query @Listing.Service alice.customer
  let
    symbol = "TSLAUSD"
    listingType = Listing.CollateralizedRequest
    calendarId = "1"
    description = "Tesla Inc."
    tradedAssetId = shareAsset.id
    quotedAssetId = cashAsset.id
    tradedAssetPrecision = 2
    quotedAssetPrecision = 2
    minimumTradableQuantity = 1.0
    maximumTradableQuantity = 1000000.0
    providerId = "12345"
    observers = []
  createListingRequestCid <- alice.customer `submit` do exerciseCmd listingServiceCid Listing.RequestCreateListing with ..
  listingCid <- exchange `submit` do exerciseCmd listingServiceCid Listing.CreateListing with ..
  (Some Listing.Listing{listingId}) <- queryContractId @Listing.Listing exchange listingCid

  -- > Alice places a bid for shares
  Right (aliceOrderCid, aliceCreateOrderRequestCid, _) <- submit alice.customer do
    exerciseByKeyCmd @TradingService.T (operator, exchange, alice.customer) TradingService.RequestCreateOrder
      with
        details = Order.Details with
          id = "123"
          listingId
          asset = shareAsset
          optExchangeFee = None
          orderType = Order.Limit with
            price = 100.0
          side = Order.Buy
          timeInForce = Order.GTC
        collateral = Order.Collateral aliceDepositCid

  -- > Bob places a new offer for shares
  Right (bobOrderCid, bobCreateOrderRequestCid, _) <- submit bob.customer do
    exerciseByKeyCmd @TradingService.T (operator, exchange, bob.customer) TradingService.RequestCreateOrder
      with
        details = Order.Details with
          id = "456"
          listingId
          asset = shareAsset
          optExchangeFee = None
          orderType = Order.Limit with
            price = 100.0
          side = Order.Sell
          timeInForce = Order.GTC
        collateral = Order.Collateral bobDepositCid

  -- Exchange matches the two orders
  Matching.Collateralized settlementInstructionCid <- submit exchange do
    exerciseCmd matchingServiceCid Matching.MatchOrders
      with
        execution = Order.Execution with
          matchId = "789"
          makerOrderId = "123"
          takerOrderId = "456"
          quantity = 200.0
          price = 100.0
          timestamp = ""

  -- Exchange settles the instructed trade
  submit exchange do exerciseCmd settlementInstructionCid Settlement.Settle

  pure ()

partialExecutionsTest : Script ()
partialExecutionsTest = do
  parties@Parties{..} <- allocateParties
  providers@Providers{operator; exchange; matchingServiceCid} <- onboardProviders parties

  alice  <- onboardCustomer providers "Alice" alice
  bob    <- onboardCustomer providers "Bob" bob
  issuer <- onboardCustomer providers "Issuer" issuer

  Assets{usd; tsla} <- onboardAssets providers issuer

  -- Assets
  let
    shareAsset = tsla with quantity = 200.0
    cashAsset = usd with quantity = 20000.0
    priceAsset = usd with quantity = 100.0

  aliceDepositCid <- depositAsset providers alice cashAsset alice.mainAccount.id
  bobDepositCid <- depositAsset providers bob shareAsset bob.mainAccount.id

  -- List a Security to trade
  (listingServiceCid, _) <- head <$> query @Listing.Service alice.customer
  let
    symbol = "TSLAUSD"
    listingType = Listing.CollateralizedRequest
    calendarId = "1"
    description = "Tesla Inc."
    tradedAssetId = shareAsset.id
    quotedAssetId = cashAsset.id
    tradedAssetPrecision = 2
    quotedAssetPrecision = 2
    minimumTradableQuantity = 1.0
    maximumTradableQuantity = 1000000.0
    providerId = "12345"
    observers = []
  createListingRequestCid <- alice.customer `submit` do exerciseCmd listingServiceCid Listing.RequestCreateListing with ..
  listingCid <- exchange `submit` do exerciseCmd listingServiceCid Listing.CreateListing with ..
  (Some Listing.Listing{listingId}) <- queryContractId @Listing.Listing exchange listingCid

  -- > Alice places an order to buy shares
  submit alice.customer do
    exerciseByKeyCmd @TradingService.T (operator, exchange, alice.customer) TradingService.RequestCreateOrder
      with
        details = Order.Details with
          id = "001"
          listingId
          asset = shareAsset
          orderType = Order.Limit with price = 100.0
          side = Order.Buy
          timeInForce = Order.GTC
          optExchangeFee = None
        collateral = Order.Collateral aliceDepositCid

  -- > Bob places 4 offers for his shares
  ( bobDepositCid :: bobRemainingDepositCid :: _ ) <- bob.customer `submit` do exerciseCmd bobDepositCid AssetDeposit_Split with quantities = [50.0]
  submit bob.customer do
    exerciseByKeyCmd @TradingService.T (operator, exchange, bob.customer) TradingService.RequestCreateOrder
      with
        details = Order.Details with
          id = "100"
          listingId
          asset = shareAsset with quantity = 50.0
          orderType = Order.Limit with price = 100.0
          side = Order.Sell
          timeInForce = Order.GTC
          optExchangeFee = None
        collateral = Order.Collateral bobDepositCid

  ( bobDepositCid :: bobRemainingDepositCid :: _ ) <- bob.customer `submit` do exerciseCmd bobRemainingDepositCid AssetDeposit_Split with quantities = [50.0]
  submit bob.customer do
    exerciseByKeyCmd @TradingService.T (operator, exchange, bob.customer) TradingService.RequestCreateOrder
      with
        details = Order.Details with
          id = "101"
          listingId
          asset = shareAsset with quantity = 50.0
          orderType = Order.Limit with price = 100.0
          side = Order.Sell
          timeInForce = Order.GTC
          optExchangeFee = None
        collateral = Order.Collateral bobDepositCid

  ( bobDepositCid :: bobRemainingDepositCid :: _ ) <- bob.customer `submit` do exerciseCmd bobRemainingDepositCid AssetDeposit_Split with quantities = [50.0]
  submit bob.customer do
    exerciseByKeyCmd @TradingService.T (operator, exchange, bob.customer) TradingService.RequestCreateOrder
      with
        details = Order.Details with
          id = "102"
          listingId
          asset = shareAsset with quantity = 50.0
          orderType = Order.Limit with price = 100.0
          side = Order.Sell
          timeInForce = Order.GTC
          optExchangeFee = None
        collateral = Order.Collateral bobDepositCid

  ( bobDepositCid :: _ ) <- bob.customer `submit` do exerciseCmd bobRemainingDepositCid AssetDeposit_Split with quantities = [50.0]
  submit bob.customer do
    exerciseByKeyCmd @TradingService.T (operator, exchange, bob.customer) TradingService.RequestCreateOrder
      with
        details = Order.Details with
          id = "103"
          listingId
          asset = shareAsset with quantity = 50.0
          orderType = Order.Limit with price = 100.0
          side = Order.Sell
          timeInForce = Order.GTC
          optExchangeFee = None
        collateral = Order.Collateral bobDepositCid

  -- Exchange matches the the buy order to the 4 sell orders
  settlementInstructionCids <- forA ["100", "101", "102", "103"] (\orderId ->
    submit exchange do
      exerciseCmd matchingServiceCid Matching.MatchOrders
        with
          execution = Order.Execution with
            matchId = "1"
            makerOrderId = "001"
            takerOrderId = orderId
            quantity = 50.0
            price = 100.0
            timestamp = ""
    )

  -- Exchange settles the instructed trade
  forA_ settlementInstructionCids (\(Matching.Collateralized settlementInstructionCid) ->
    submit exchange do exerciseCmd settlementInstructionCid Settlement.Settle)

  pure ()
