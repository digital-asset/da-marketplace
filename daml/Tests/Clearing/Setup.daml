module Tests.Clearing.Setup where

import Daml.Script
import Common
import ContingentClaims.Claim (Claim(Zero))
import DA.Assert ((===))
import Marketplace.Trading.Service qualified as Trading
import Marketplace.Trading.Model qualified as Order
import Marketplace.Clearing.Role qualified as Clearing
import Marketplace.Clearing.Model qualified as Clearing
import Marketplace.Clearing.Service qualified as Clearing
import Marketplace.Clearing.Market.Service qualified as ClearedMarket
import Marketplace.Trading.Matching.Service qualified as Matching
import Marketplace.Listing.Service qualified as Listing
import Marketplace.Listing.Model qualified as Listing
import Marketplace.Issuance.AssetDescription (AssetDescription(..))
import Marketplace.Issuance.AssetDescription qualified as AD

import DA.Finance.Types
import DA.Set qualified as Set

checkOrderStatusMatches : ContractId Order.T -> Party -> Order.Status -> Script ()
checkOrderStatusMatches orderCid party status = do
  Some order <- queryContractId @Order.T party orderCid
  order.status === status
  pure ()

setupClearingCustomer : Providers -> Assets -> Text -> Script Customer
setupClearingCustomer providers@Providers{clearinghouse} Assets{..} name = do
  customer <- onboardCustomer providers name
  let
    cashAsset = usd with quantity = 2000000.0

  depositCid <- depositAsset providers customer cashAsset customer.clearingAccount.id

  calculationCid <- submit clearinghouse $
    exerciseCmd customer.clearingServiceCid Clearing.CreateMarginCalculation with
      currency = usd.id; targetAmount = 4000.0; calculationId = "123456"; ..

  Clearing.CalculationSuccess _ (Some marginWithRemaining) <- submit clearinghouse $
    exerciseCmd customer.clearingServiceCid Clearing.PerformMarginFill
      with depositCids = [depositCid]; marginDepositCids = []; ..

  return customer

clearedTradingTest : Script ()
clearedTradingTest = do

  providers@Providers{operator; exchange; matchingServiceCid; clearinghouse, clearingRoleCid, bank, public} <- onboardProviders

  issuer <- onboardCustomer providers "Issuer"
  assets@Assets{usd} <- onboardAssets providers issuer

  alice <- setupClearingCustomer providers assets "Alice"
  bob <- setupClearingCustomer providers assets "Bob"
  charlie <- setupClearingCustomer providers assets "Charlie"
  dana <- setupClearingCustomer providers assets "Dana"


  -- Setup clearing market service
  marketServiceOfferCid <- submit clearinghouse do exerciseCmd clearingRoleCid Clearing.OfferMarketService with customer = exchange; ..
  marketServiceCid <- submit exchange do exerciseCmd marketServiceOfferCid ClearedMarket.Accept

  (_, AssetDescription{assetId = h2oId}) <- originate providers issuer "H2O" "H2O Spot" AD.equity Zero

  let mkSimpleH2OFuture name description = do
      (_, AssetDescription{assetId}) <- originate providers issuer name description AD.future Zero
      return assetId

  h2oQ121DerId <- mkSimpleH2OFuture "H2OQ121" "H2O Q1 21"
  h2oQ221DerId <- mkSimpleH2OFuture "H2OQ221" "H2O Q2 21"
  h2oQ321DerId <- mkSimpleH2OFuture "H2OQ321" "H2O Q3 21"
  h2oQ421DerId <- mkSimpleH2OFuture "H2OQ421" "H2O Q4 21"

  -- List a Security to trade
  Some (listingServiceCid, _) <- queryContractKey @Listing.Service exchange (operator, exchange, exchange)

  let mkMarket : Id -> Id -> Script Id
      mkMarket quoteId tradedId = do
        let
          symbol = quoteId.label <> tradedId.label
          listingType = Listing.ClearedRequest clearinghouse
          calendarId = "1261007448"
          description = quoteId.label <> " vs " <> tradedId.label
          tradedAssetId = tradedId
          quotedAssetId = quoteId
          tradedAssetPrecision = 8
          quotedAssetPrecision = 8
          minimumTradableQuantity = 1.0
          maximumTradableQuantity = 1000000.0
          providerId = "123"
          observers = [public]
        createListingRequestCid <- exchange `submit` do exerciseCmd listingServiceCid Listing.RequestCreateListing with ..
        listingCid <- exchange `submit` do exerciseCmd listingServiceCid Listing.CreateListing with ..
        (Some Listing.Listing{listingId}) <- queryContractId @Listing.Listing exchange listingCid
        return listingId

  h2oQ121Id <- mkMarket usd.id h2oQ121DerId
  h2oQ221Id <- mkMarket usd.id h2oQ221DerId
  h2oQ321Id <- mkMarket usd.id h2oQ321DerId
  h2oQ421Id <- mkMarket usd.id h2oQ421DerId

  makeTrade providers h2oQ121Id alice bob 50.0 1000.0 1
  makeTrade providers h2oQ221Id alice charlie 10.0 3000.0 3
  makeTrade providers h2oQ321Id bob dana 200.0 5000.0 5
  makeTrade providers h2oQ421Id dana alice 15.0 2500.0 7
  makeTrade providers h2oQ121Id bob charlie 500.0 1000.0 9

  return ()

makeTrade : Providers -> Id -> Customer -> Customer -> Decimal -> Decimal -> Int -> Script ()
makeTrade Providers{..} listingId buyer seller price qty currentId = do
  (Some (_,listing)) <- queryContractKey @Listing.T exchange listingId
  -- Create orders
  let sellerOrderId = Id with signatories = Set.fromList [ seller.customer ], label = show currentId, version = 0
  Right (sellerOrderCid, sellerCreateOrderRequestCid, _) <- seller.customer `submit` do
    exerciseCmd seller.tradingServiceCid Trading.RequestCreateOrder with
        collateral = Order.Cleared clearinghouse
        details = Order.Details with
            id = sellerOrderId
            optExchangeFee = None
            listingId
            asset = Asset with id = listing.tradedAssetId; quantity = qty
            side = Order.Sell
            timeInForce = Order.GTC
            orderType = Order.Limit with price

  let buyerOrderId = Id with signatories = Set.fromList [ buyer.customer ], label = show (currentId + 1), version = 0
  Right (buyerOrderCid, buyerCreateOrderRequestCid, _) <- submitMulti [buyer.customer] [public] $ do
    exerciseCmd buyer.tradingServiceCid Trading.RequestCreateOrder with
        collateral = Order.Cleared clearinghouse
        details = Order.Details with
            id = buyerOrderId
            listingId
            asset = Asset with id = listing.quotedAssetId; quantity = price * qty
            optExchangeFee = None
            side = Order.Buy
            timeInForce = Order.GTC
            orderType = Order.Limit with price

  -- Acknowledge Orders
  sellerOrderCid <- exchange `submit` do
    exerciseCmd seller.tradingServiceCid Trading.AcknowledgeOrderRequest with
        createOrderRequestCid = sellerCreateOrderRequestCid
        providerOrderId = "seller's exchange order id"
  checkOrderStatusMatches sellerOrderCid seller.customer Order.PendingExecution

  buyerOrderCid <- exchange `submit` do
    exerciseCmd buyer.tradingServiceCid Trading.AcknowledgeOrderRequest with
        createOrderRequestCid = buyerCreateOrderRequestCid
        providerOrderId = "buyer's exchange order id"
  checkOrderStatusMatches buyerOrderCid buyer.customer Order.PendingExecution

  -- Confirm order matches
  let execution = Order.Execution with
        matchId = show currentId
        makerOrderId = sellerOrderId.label
        takerOrderId = buyerOrderId.label
        quantity = 200.0
        price = 100.0
        timestamp = "123456"

  Matching.Cleared clearedTradeCid <- exchange `submit` exerciseCmd matchingServiceCid Matching.MatchOrders with execution

  (sellerClearedTradeSideCid, buyerClearedTradeSideCid) <- clearinghouse `submit` exerciseCmd clearedTradeCid Clearing.ClearedTrade_Novate
  return ()
