module Tests.Clearing where

import Daml.Script
import DA.Finance.Asset
import DA.Finance.Types
import Marketplace.Clearing.Model
import Marketplace.Clearing.Service (DepositWithRemaining(..),CalculationResult(..))
import Marketplace.Clearing.Service qualified as Clearing

import Common
import DA.Action (void)

testClearingTransfers : Script ()
testClearingTransfers = do
  time <- getTime
  providers@Providers{clearinghouse} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  -- Assets
  let
    cashAsset = usd with quantity = 20000.0

  alice <- onboardCustomer providers "Alice"
  bob   <- onboardCustomer providers "Bob"

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  bobDepositCid   <- depositAsset providers bob cashAsset bob.clearingAccount.id

  marginDepositWithRemaining <- submit clearinghouse $
    exerciseCmd alice.clearingServiceCid Clearing.TransferToMargin
      with depositCids = [aliceDepositCid]; amount = 5000.0

  clearingDepositCid <- submit clearinghouse $
    exerciseCmd alice.clearingServiceCid Clearing.TransferFromMargin
      with amount = 1000.0, marginDepositCids = [marginDepositWithRemaining.deposit]
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 4000.0

  (DepositWithRemaining providerDepositCid _) <- submit clearinghouse $
    exerciseCmd bob.clearingServiceCid Clearing.TransferToProvider
      with amount = 2000.0; depositCids = [bobDepositCid]

  submit clearinghouse $ exerciseCmd alice.clearingServiceCid Clearing.TransferFromProvider
      with amount = 1000.0; depositCids = [providerDepositCid]
  assert =<< depositsQuantityEquals alice.customer alice.clearingAccount 17_000.0

  return ()

testMarginCalls : Script ()
testMarginCalls = do
  time <- getTime
  providers@Providers{clearinghouse; operator} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  -- Assets
  let cashAsset = usd with quantity = 20000.0

  alice <- onboardCustomer providers "Alice"
  bob   <- onboardCustomer providers "Bob"

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  calculationCid <- submit clearinghouse $
    exerciseCmd alice.clearingServiceCid Clearing.CreateMarginCalculation with
      currency = usd.id; targetAmount = 4000.0; calculationId = "123456"; ..

  CalculationSuccess _ (Some marginWithRemaining) <- submit clearinghouse $
    exerciseCmd alice.clearingServiceCid Clearing.PerformMarginFill
      with depositCids = [aliceDepositCid]; marginDepositCids = []; ..
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 4000.0

  calculationCid <- submit clearinghouse $
    exerciseCmd alice.clearingServiceCid Clearing.CreateMarginCalculation with
      currency = usd.id; targetAmount = 1000.0; calculationId = "456789"

  CalculationSuccess _ (Some clearingWithRemaining) <- submit clearinghouse $
    exerciseByKeyCmd @Clearing.Service (operator, clearinghouse, alice.customer) Clearing.PerformMarginFill
      with depositCids = marginWithRemaining.remaining; marginDepositCids = [marginWithRemaining.deposit]; ..
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 1000.0

  -- Fail margin calculation
  calculationCid <- submit clearinghouse $
    exerciseCmd alice.clearingServiceCid Clearing.CreateMarginCalculation with
      currency = usd.id; targetAmount = 50_000.0; calculationId = "34556"

  void $ submit clearinghouse $
    exerciseByKeyCmd @Clearing.Service (operator, clearinghouse, alice.customer) Clearing.PerformMarginFill
      with depositCids = [clearingWithRemaining.deposit]; marginDepositCids = clearingWithRemaining.remaining; ..
  assert =<< depositsQuantityEquals alice.customer alice.marginAccount 1000.0

  (Some (_,aliceStanding)) <- queryContractKey @MemberStanding clearinghouse (clearinghouse, alice.customer)
  assert $ not aliceStanding.marginSatisfied

  return ()

testMarkToMarket : Script ()
testMarkToMarket = do
  time <- getTime
  providers@Providers{clearinghouse} <- onboardProviders
  Assets{usd; tsla} <- onboardAssets providers

  -- Assets
  let cashAsset = usd with quantity = 20000.0

  alice <- onboardCustomer providers "Alice"
  bob   <- onboardCustomer providers "Bob"

  aliceDepositCid <- depositAsset providers alice cashAsset alice.clearingAccount.id
  bobDepositCid   <- depositAsset providers bob cashAsset bob.clearingAccount.id

  calculationCid <- submit clearinghouse $
    exerciseCmd alice.clearingServiceCid Clearing.CreateMarkToMarket with
      currency = usd.id; mtmAmount = -5000.0; calculationId = "34567"

  CalculationSuccess _ (Some depositWithRemaining) <- submit clearinghouse $
    exerciseCmd alice.clearingServiceCid Clearing.PerformMarkToMarket
      with customerDepositCids = [aliceDepositCid]; providerDepositCids = []; ..

  calculationCid2 <- submit clearinghouse $
    exerciseCmd bob.clearingServiceCid Clearing.CreateMarkToMarket with
      currency = usd.id; mtmAmount = 5000.0; calculationId = "34567"

  _ <- submit clearinghouse $
    exerciseCmd bob.clearingServiceCid Clearing.PerformMarkToMarket
      with customerDepositCids = []; providerDepositCids = [depositWithRemaining.deposit]; calculationCid = calculationCid2

  assert =<< depositsQuantityEquals alice.customer alice.clearingAccount 15_000.0
  assert =<< depositsQuantityEquals bob.customer bob.clearingAccount 25_000.0

  return ()

-- |Check if the given account has deposits equaling the given amount
depositsQuantityEquals : Party -> Account -> Decimal -> Script Bool
depositsQuantityEquals party account amount = do
  accountQuantity <- getDepositQuantities party =<< getDepositsForAccount party account
  return $ amount == accountQuantity

getDepositsForAccount : Party -> Account -> Script [ContractId AssetDeposit]
getDepositsForAccount party account = map fst . filter (\(_,d) -> d.account == account) <$> query @AssetDeposit party

getDepositQuantities : Party -> [ContractId AssetDeposit] -> Script Decimal
getDepositQuantities party depositCids = do
  foldl (+) 0.0 <$> forA depositCids (\dcid -> do
      Some d <- queryContractId party dcid
      return d.asset.quantity)

