module ClaimToken.Model where

import DA.Finance.Types
import DA.Finance.Asset (AssetDeposit_Transfer(..), AssetDeposit)
import DA.Set (Set)

template ClaimToken -- claim token id -> bond id
  with
    id: Id
    originalId: Id
    observers: Set Party
  where
    signatory id.signatories
    observer observers

    key (id.signatories, id.label): (Set Party, Text)
    maintainer key._1

    ensure 
      id.signatories == originalId.signatories

template ClaimTokenR -- reverse search (bond id -> claim token id)
  with
    id: Id
    originalId: Id
    observers: Set Party
  where
    signatory id.signatories
    observer observers

    key (id.signatories, originalId.label): (Set Party, Text)
    maintainer key._1

    ensure 
      id.signatories == originalId.signatories

template TransferRelationshipOffer
  with
    asset: Asset
    operator: Party
    provider: Party
    sender: Party
    receiver: Party
  where
    signatory operator, provider, sender

    controller receiver can
      AcceptOffer: ContractId TransferRelationship
        do 
          create TransferRelationship with ..

template TransferRelationship
  with 
    operator: Party
    provider: Party
    sender: Party
    receiver: Party
  where
    signatory operator, provider, sender, receiver

    nonconsuming choice TransferClaimToken: ContractId AssetDeposit
      with 
        ctrl: Party
        assetDepositCid: ContractId AssetDeposit
        receiverAccount: Account
      controller ctrl 
        do
          assetDeposit <- fetch assetDepositCid
          assertMsg "account provider does not match" (assetDeposit.account.provider == provider && receiverAccount.provider == provider)
          assertMsg "sender should match with account owner" (assetDeposit.account.owner == sender)
          exercise assetDepositCid AssetDeposit_Transfer with receiverAccount



    

