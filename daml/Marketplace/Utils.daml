module Marketplace.Utils where

import DA.Finance.Asset
import DA.Finance.Types

import DA.List (head)
import DA.Set qualified as Set
import DA.Optional
import DA.Text


type IdPair = (Id, Id)

data MarketRole = CustodianRole | IssuerRole | ExchangeRole | InvestorRole | BrokerRole | CCPRole
    deriving (Show, Eq)

data AssetType = TokenAsset | DerivativeAsset deriving (Show,Eq)

template ExberrySID
  with
    exchange : Party
    sid      : Int
  where
    signatory exchange

    choice ExberrySID_Ack : ()
      controller exchange
      do return ()

-- |Retrieve the Custodian who allocated this AssetDeposit
getCustodian : Id -> Party -> Party
getCustodian accountId operator = head $ Set.toList $ Set.delete operator $ accountId.signatories

getAccountId : Party -> Party -> [Party] -> Id
getAccountId owner provider signatories = Id with
    signatories = Set.fromList signatories
    label = getAccountLabel owner provider
    version = 0


getAccountLabel : Party -> Party -> Text
getAccountLabel owner provider = show owner <> "@" <> show provider


getAccountOwnerProvider: Text -> (Party, Party)
getAccountOwnerProvider label =
  let [owner, provider] = map (fromSomeNote "account owner provider" . partyFromText . replace "'" "") (splitOn "@" label)
  in (owner, provider)


getDepositQuantities : [ContractId AssetDeposit] -> Update (Decimal)
getDepositQuantities depositCids = do
  foldl (+) 0.0 <$> forA depositCids (\dcid -> do
      d <- fetch dcid
      return d.asset.quantity)


-- |Version of AssetDeposit_Split that works on only decimals
splitDecimals : Decimal -> [Decimal] -> [Decimal]
splitDecimals qty quantities = quantitiesAll
  where
    quantitySum = foldl (+) 0.0 quantities
    quantitiesAll = if quantitySum == qty
                    then quantities
                    else quantities ++ [qty - quantitySum]


-- |More error friendly version of 'head'
headNote : Text -> [a] -> a
headNote msg [] = error ("headNote: " <> msg)
headNote _   xs = head xs

type OptionalCreate a = Optional (ContractId a)

createWhenNotExists : forall t k. (Template t, TemplateKey t k) => t -> Update (OptionalCreate t)
createWhenNotExists t = visibleByKey @t (key t) >>= \case
    True  -> Some <$> create t
    False -> return None

createOrLookup : forall t k. (Template t, TemplateKey t k) => t -> Update (ContractId t)
createOrLookup t = lookupByKey @t (key t) >>= \case
    (Some cid) -> return cid
    None       -> create t
