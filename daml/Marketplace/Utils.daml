module Marketplace.Utils where

import DA.Finance.Types (Account(..), Id(..))
import DA.Set (fromList)

createWhenNotExists : forall t k. (Template t, TemplateKey t k) => t -> Update (Optional (ContractId t))
createWhenNotExists t = visibleByKey @t (key t) >>= \case
    True  -> Some <$> create t
    False -> return None

createOrLookup : forall t k. (Template t, TemplateKey t k) => t -> Update (ContractId t)
createOrLookup t = lookupByKey @t (key t) >>= \case
    (Some cid) -> return cid
    None       -> create t

createAccount : Party -> Party -> Account
createAccount provider customer =
  let
    id = Id with signatories = fromList [provider, customer]; label = partyToText customer <> "@" <> partyToText provider; version = 0
    owner = customer
  in Account with id; owner; provider
