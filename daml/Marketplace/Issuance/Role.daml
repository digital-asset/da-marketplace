module Marketplace.Issuance.Role where

import DA.Finance.Types (Asset, Id)
import DA.Map (empty)
import Marketplace.Issuance.Instrument.Model qualified as Instrument
import Marketplace.Lifecycle.Redemption qualified as Lifecycle
import Marketplace.Custody.Model qualified as Custody

template Role
  with
    operator : Party
    issuer : Party
  where
    signatory operator, issuer

    key (operator, issuer) :  (Party, Party)
    maintainer key._1

    controller issuer can

      nonconsuming RequestRedemption : ContractId Lifecycle.IssuerRedemptionRequest
        with
          bondRegistrar : Party
          cashProvider : Party
          payingAgent : Party
          assetId : Id
          price : Asset
        do
          (_, bond) <- fetchByKey @Instrument.Bond (assetId.signatories, assetId.label)
          assertMsg "Bond is not callable" bond.isCallable
          create Lifecycle.IssuerRedemptionRequest with operator; issuer; bondRegistrar; cashProvider; payingAgent; assetId; price

    controller operator can
      TerminateRole: ()
        do
          return ()

template Offer
  with
    operator : Party
    issuer : Party
  where
    signatory operator

    controller issuer can
      Accept : (ContractId Role, ContractId Custody.SettlementInfo)
        do
          infoCid <- create Custody.SettlementInfo with operator; party = issuer; ownAccount = None; omnibusCashAccount = None; omnibusSecuritiesAccount = None; cashAccounts = empty; securitiesAccounts = empty
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

      Decline : ()
        do
          return ()

template Request
  with
    operator : Party
    issuer : Party
  where
    signatory issuer

    controller operator can
      Approve : (ContractId Role, ContractId Custody.SettlementInfo)
        do
          infoCid <- create Custody.SettlementInfo with operator; party = issuer; ownAccount = None; omnibusCashAccount = None; omnibusSecuritiesAccount = None; cashAccounts = empty; securitiesAccounts = empty
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

      Reject : ()
        do
          return ()
