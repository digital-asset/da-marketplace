module Marketplace.Issuance.Role where

import DA.Finance.Types (Asset, Id)
import Marketplace.Issuance.Instrument.Model qualified as Instrument
import Marketplace.Lifecycle.Redemption qualified as Lifecycle
import DA.Finance.Types (Account)
import Marketplace.Lifecycle.Service qualified as Lifecycle
import Marketplace.Settlement.Hierarchical qualified as Settlement

template Role
  with
    operator : Party
    issuer : Party
  where
    signatory operator, issuer

    key (operator, issuer) :  (Party, Party)
    maintainer key._1

    controller issuer can

      nonconsuming UpdateAccountInfo : ContractId Settlement.AccountInfo
        with
          ownAccount : Optional Account
          cashAccount : Optional Account
          securitiesAccount : Optional Account
        do
          (infoCid, _) <- fetchByKey @Settlement.AccountInfo (operator, issuer)
          archive infoCid
          create Settlement.AccountInfo with party = issuer; ..

      nonconsuming OfferLifecycleService : ContractId Lifecycle.Offer
        with
          bondRegistrar : Party
          cashProvider : Party
          payingAgent : Party
        do
          create Lifecycle.Offer with ..

      nonconsuming ApproveLifecycleRequest : ContractId Lifecycle.Service
        with
          requestCid : ContractId Lifecycle.Request
        do
          exercise requestCid Lifecycle.Approve

      nonconsuming RequestRedemption : ContractId Lifecycle.IssuerRedemptionRequest
        with
          bondRegistrar : Party
          cashProvider : Party
          payingAgent : Party
          assetId : Id
          price : Asset
        do
          (_, bond) <- fetchByKey @Instrument.Bond (assetId.signatories, assetId.label)
          assertMsg "Bond is not callable" bond.isCallable
          create Lifecycle.IssuerRedemptionRequest with operator; issuer; bondRegistrar; cashProvider; payingAgent; assetId; price

    controller operator can
      TerminateRole: ()
        do
          return ()

template Offer
  with
    operator : Party
    issuer : Party
  where
    signatory operator

    controller issuer can
      Accept : (ContractId Role, ContractId Settlement.AccountInfo)
        with
          cashAccount : Optional Account
          securitiesAccount : Optional Account
        do
          infoCid <- create Settlement.AccountInfo with party = issuer; ownAccount = None; ..
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

      Decline : ()
        do
          return ()

template Request
  with
    operator : Party
    issuer : Party
    cashAccount : Optional Account
    securitiesAccount : Optional Account
  where
    signatory issuer

    controller operator can
      Approve : (ContractId Role, ContractId Settlement.AccountInfo)
        do
          infoCid <- create Settlement.AccountInfo with party = issuer; ownAccount = None; ..
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

      Reject : ()
        do
          return ()
