module Marketplace.Issuance.Service where

import DA.Finance.Asset
import DA.Finance.Types
import DA.Finance.Utils (fetchAndArchive)
import DA.Map qualified as Map
import DA.Set (Set, fromList, empty)
import Marketplace.Issuance.Model (Issuance(..))
import Marketplace.Issuance.CFI
import Marketplace.Issuance.AssetDescription (AssetDescription(..), Claims)
import Marketplace.Issuance.AssetDescription qualified as AssetDescription
import Marketplace.Utils

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    controller customer can
      nonconsuming RequestOrigination: ContractId OriginationRequest
        with
          assetLabel : Text
          cfi : CFI
          description : Text
          claims : Claims
          observers : [Party]
        do
          create OriginationRequest with observers = fromList observers; ..

      nonconsuming RequestCreateIssuance : ContractId CreateIssuanceRequest
        with
          issuanceId : Text
          account : Account
          assetId : Id
          quantity : Decimal
        do
          create CreateIssuanceRequest with ..

      nonconsuming RequestReduceIssuance : ContractId ReduceIssuanceRequest
        with
          issuanceId : Text
          accountId : Id
          depositCid : ContractId AssetDeposit
        do
          create ReduceIssuanceRequest with ..

    controller provider can
      nonconsuming Originate: (ContractId AssetDescription, AssetDescription)
        with
          createOriginationCid: ContractId OriginationRequest
        do
          OriginationRequest{assetLabel; cfi; description; claims; observers} <- fetch createOriginationCid
          -- assertMsg "issued must be 0" $ description.issued == 0.0
          -- assertMsg "authorized must be > 0" $ description.authorized > 0.0
          archive createOriginationCid
          let assetId = Id with signatories = fromList [ provider, customer ]; label = assetLabel; version = 0
              issuer = customer
              registrar = provider

          create AssetDescription.Index
                   with
                     assetLabel
                     descriptionSignatories = assetId.signatories
                     versions = Map.insert claims 0 Map.empty
          let ad = AssetDescription
                   with
                     assetId
                     cfi
                     description
                     issuer
                     registrar
                     observers
                     claims
          adCid <- create ad
          pure (adCid, ad)

      nonconsuming CreateIssuance : (ContractId Issuance, ContractId AssetDeposit)
        with
          createIssuanceRequestCid : ContractId CreateIssuanceRequest
        do
          CreateIssuanceRequest{issuanceId; assetId; account; quantity} <- fetchAndArchive createIssuanceRequestCid
          issuanceCid <- create Issuance with ..

          (_, AssetDescription{issuer}) <- fetchByKey @AssetDescription assetId
          let asset = Asset with id = assetId; quantity
          depositCid <- create AssetDeposit with account; asset; lockers = empty; observers = empty--fromList [ issuer ]

          pure (issuanceCid, depositCid)

      nonconsuming ReduceIssuance : ContractId Issuance
        with
          reduceIssuanceRequestCid : ContractId ReduceIssuanceRequest
        do
          ReduceIssuanceRequest{issuanceId; accountId; depositCid} <- fetchAndArchive reduceIssuanceRequestCid
          deposit <- fetchAndArchive depositCid

          (issuanceCid, issuance) <- fetchByKey @Issuance (operator, provider, issuanceId)
          archive issuanceCid

          create issuance with quantity = issuance.quantity - deposit.asset.quantity

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        do
          createOrLookup Service with ..

      Decline : ()
        do pure ()

    controller provider can
      Withdraw : ()
        do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    controller customer can
      Cancel : ()
        do pure ()

    controller provider can
      Reject : ()
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        createOrLookup Service with ..

template CreateIssuanceRequest
  with
    operator : Party
    provider : Party
    customer : Party
    issuanceId : Text
    assetId : Id
    account : Account
    quantity : Decimal
  where
    signatory operator, provider, customer

template ReduceIssuanceRequest
  with
    operator : Party
    provider : Party
    customer : Party
    issuanceId : Text
    accountId : Id
    depositCid : ContractId AssetDeposit
  where
    signatory operator, provider, customer

template OriginationRequest
  with
    operator : Party
    provider : Party
    customer : Party
    assetLabel : Text
    cfi : CFI
    description : Text
    claims : Claims
    observers : Set Party
  where
     signatory operator, provider, customer
