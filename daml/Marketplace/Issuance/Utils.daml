module Marketplace.Issuance.Utils (
    binaryCallOption
) where

import ContingentClaims.Claim (Claim, Claim(..), cond, one)
import ContingentClaims.FinancialClaim (european)
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation (Observation)
import ContingentClaims.Observation qualified as O
import DA.Finance.Types (Id(..))
import Prelude hiding (sum)

type C = Claim Observation Date Id

-- TODO: 'european' creates a superfluous 'Or' node which doesn't really serve any purpose.
binaryCallOption : Date -> Decimal -> Id -> Id -> C
binaryCallOption expiry strike underlyingId currencyId =
  european expiry (binary strike underlyingId.label currencyId)
    where binary : Decimal -> Text -> Id -> C
          binary strike spot ccy = cond (O.pure strike O.<= O.observe spot) (one currencyId) Zero
