module Marketplace.CentralCounterpartyCustomer where

import Marketplace.Clearing
import Marketplace.Notification
import Marketplace.Token
import Marketplace.Trading
import Marketplace.Transfer
import Marketplace.Utils

import DA.Finance.Asset
import DA.Finance.Types

import DA.Action
import DA.List
import DA.Optional


template CCPCustomerInvitation
  with
    operator : Party
    ccp : Party
    ccpCustomer : Party
    custodian : Party
  where
    signatory ccp
    observer ccpCustomer

    choice CCPCustomerInvitation_Accept : ContractId CCPCustomer
      controller ccpCustomer
      do
        let custodianAccountId = getAccountId ccpCustomer custodian [custodian]
            accountId = getAccountId ccpCustomer ccp [custodian]

            custodianAccount = Account
              with id = custodianAccountId, provider = custodian, owner = ccpCustomer

            ccpAccount = Account
              with id = accountId, provider = ccp, owner = ccpCustomer

        create DismissibleNotification with
          sender = ccpCustomer, senderRole = Some InvestorRole
          receiver = ccp, text = "CCP customer invitation accepted."
        createOrLookup CCPCustomer with inGoodStanding = True, marginDepositCids = [], ..

    choice CCPCustomerInvitation_Reject : ()
      controller ccpCustomer
      do
        create DismissibleNotification with
          sender = ccpCustomer, senderRole = Some InvestorRole
          receiver = ccp, text = "CCP customer invitation rejected."
        return ()


-- |Reject 'MarginCalculation' and set CCPCustomer to not 'inGoodStanding'
rejectMarginCalculation
  : ContractId MarginCalculation
  -> CCPCustomer
  -> Text
  -> Update (ContractId CCPCustomer)
rejectMarginCalculation mcCid ccpCustomer reason = do
  exercise mcCid MarginCalculation_Reject with note = reason
  create ccpCustomer with inGoodStanding = False


-- |Resolve 'MarginCalculation' and recreate 'CCPCustomer' with new margin deposit cids
resolveMarginCalculation
  : ContractId MarginCalculation
  -> CCPCustomer
  -> [ContractId AssetDeposit]
  -> Text
  -> Update (ContractId CCPCustomer)
resolveMarginCalculation mcCid ccpCustomer newMarginCids reason = do
  exercise mcCid MarginCalculation_Resolve with note = reason
  create ccpCustomer with marginDepositCids = newMarginCids, inGoodStanding = True


template CCPCustomer
  with
    operator : Party
    ccp : Party
    custodian : Party
    ccpCustomer : Party
    marginDepositCids : [ContractId AssetDeposit]
    inGoodStanding : Bool
  where
    signatory ccp, ccpCustomer

    key (ccp, operator, ccpCustomer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice CCPCustomer_MakeClearedOrder : ContractId ClearedOrderRequest
      with
        -- exchange : Party
        order : ClearedOrder
        pair : IdPair
        quoteType : AssetType
        price : Decimal
        optOrderId : Optional Int
      controller ccpCustomer
      do
        quantityPrecision <- (.quantityPrecision) <$> tokenOrUnderlying quoteType pair._2
        assertMsg ("price should be rounded to at most " <> show quantityPrecision <> " decimal places")
          $ roundBankers quantityPrecision price == price

        -- TODO : the following lines cause a circular import with ExchangeParticipant <-> CCPCustomer

        -- optExchParticipant <- lookupByKey @ExchangeParticipant (exchange, operator, ccpCustomer)
        -- assertMsg "CCP Customer must be an exchange participant to place an order."
        --   $ isSome optExchParticipant

        create ClearedOrderRequest with ..

    choice CCPCustomer_PerformMarginFill : ContractId CCPCustomer
      with
        clearingDepositCids : [ContractId AssetDeposit]
        targetAmount : Decimal
        calculationCid : ContractId MarginCalculation
      controller ccp
      do
        assertMsg "there must be at least one clearing deposit" $ not $ null clearingDepositCids
        clearingDepositCid <- exercise (head clearingDepositCids) AssetDeposit_Merge
            with depositCids = tail clearingDepositCids

        marginQuantity <- getDepositQuantities marginDepositCids
        let netDiff =  targetAmount - marginQuantity

        case netDiff of
          0.0    -> do
            exercise calculationCid MarginCalculation_Resolve with note = "Margin account already at target amount"
            create this
          amount -> do
            if amount > 0.0
            then do -- transfer to margin account from clearing account
              clearingDeposit <- fetch clearingDepositCid
              if clearingDeposit.asset.quantity <= amount
              then rejectMarginCalculation calculationCid this
                    ("Not enough in clearing account to satisfy margin call, please deposit: " <> show amount)
              else do
                [diffDepositCid, remaingClearingCid] <- exercise clearingDepositCid AssetDeposit_Split with quantities = [amount]
                case marginDepositCids of
                  [] -> resolveMarginCalculation calculationCid this [diffDepositCid] "Margin call successful."
                  xs -> do
                    newMarginDepositCid <- exercise (head xs) AssetDeposit_Merge with depositCids = diffDepositCid :: tail xs
                    resolveMarginCalculation calculationCid this [newMarginDepositCid] "Margin call successful."

            else do -- transfer from margin account to clearing account
              let newAmount = amount * (-1.0)
              assertMsg "no margin account found" $ not $ null marginDepositCids
              marginDepositCid <- exercise (head marginDepositCids) AssetDeposit_Merge
                  with depositCids = tail marginDepositCids
              marginDeposit <- fetch marginDepositCid

              assertMsg ("amount to transfer: " <> show newAmount <> " exceeds amount in margin account: " <> show marginDeposit.asset.quantity)
                $ newAmount < marginDeposit.asset.quantity

              [diffDepositCid, remainingMarginDepositCid] <- exercise marginDepositCid AssetDeposit_Split
                  with quantities = [newAmount]
              newClearingDepositCid <- exercise clearingDepositCid AssetDeposit_Merge with depositCids = [diffDepositCid]
              resolveMarginCalculation calculationCid this [remainingMarginDepositCid] "Margin call successful."

    choice CCPCustomer_TransferFromClearingAccount : Either (ContractId CCPCustomer)
                                                            (ContractId DepositTransferRequest, ContractId CCPCustomer)
      with
        clearingDepositCids : [ContractId AssetDeposit]
        amount : Decimal
        optMarkToMarketCalc : Optional (ContractId MarkToMarketCalculation)
      controller ccp
      do
        aggregateQty <- getDepositQuantities clearingDepositCids

        if aggregateQty < amount
        then do
          whenSome optMarkToMarketCalc \calcCid -> void $ exercise calcCid MarkToMarketCalculation_Reject with
                note = "Mark to Market calculation failed, please add enough to satisfy " <> show amount
          Left <$> create this with inGoodStanding = False
        else do
          clearingDepositCid <- exercise (head clearingDepositCids) AssetDeposit_Merge
              with depositCids = tail clearingDepositCids

          clearingDeposit <- fetch clearingDepositCid
          assertMsg "amount to transfer exceeds amount in clearing account" $ amount <= clearingDeposit.asset.quantity
          [transferDepositCid, remainingDepositCid] <- exercise clearingDepositCid AssetDeposit_Split
              with quantities = [amount]

          let receiverAccountId = Id with
                signatories = clearingDeposit.account.id.signatories, label = getAccountLabel ccp custodian, version = 0

          depositTransferReqCid <- create DepositTransferRequest with
              sender = ccpCustomer, senderAccountId = clearingDeposit.account.id, depositCid = transferDepositCid, ..

          whenSome optMarkToMarketCalc \calcCid ->
            void $ exercise calcCid MarkToMarketCalculation_Resolve with
              note = "Mark to Market Calculation resolved, removed " <> show amount <> " from clearing account."

          Right . (,) depositTransferReqCid <$> create this

    choice CCPCustomer_TransferToClearingAccount : ContractId CCPCustomer
      with
        depositCids : [ContractId AssetDeposit]
        amount : Decimal
        optMarkToMarketCalc : Optional (ContractId MarkToMarketCalculation)
      controller ccp
      do
        assertMsg ("depositCids must not be empty") $ not $ null depositCids
        aggregateQty <- getDepositQuantities depositCids
        assertMsg ("amount should be less than or equal to total deposit amount") $ amount <= aggregateQty

        mergedCid <- exercise (head depositCids) AssetDeposit_Merge with depositCids = tail depositCids
        deposit <- fetch mergedCid

        newDepositCid <- if amount < deposit.asset.quantity
                         then headNote "transferToClearing" <$> exercise mergedCid AssetDeposit_Split with quantities = [ amount ]
                         else return mergedCid
        newDeposit <- fetch newDepositCid

        let receiverAccountId = Id with
              signatories = newDeposit.account.id.signatories, label = getAccountLabel ccpCustomer ccp, version = 0

        depositTransferReqCid <- create DepositTransferRequest with
            sender = ccp, senderAccountId = newDeposit.account.id, depositCid = newDepositCid, ..

        whenSome optMarkToMarketCalc \calcCid ->
          void $ exercise calcCid MarkToMarketCalculation_Resolve with
            note = "Mark to Market calculation resolved, added " <> show amount <> " to your clearing account."

        create this
