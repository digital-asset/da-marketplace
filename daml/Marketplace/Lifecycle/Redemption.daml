module Marketplace.Lifecycle.Redemption where

import DA.Finance.Types (Asset(..), Id)
import DA.Set (fromList)
import Marketplace.Custody.Model qualified as Custody
import Marketplace.Snapshot.Model
import Marketplace.Settlement.Hierarchical (createInstructions, getAccount, Delivery(..), Status(..))

template InvestorRedemptionRequest
  with
    operator : Party
    investor : Party
    issuer : Party
    bondRegistrar : Party
    cashProvider : Party
    payingAgent : Party
    asset : Asset
  where
    signatory operator, investor
    observer bondRegistrar, issuer

    choice Accept : ContractId InvestorRedemption
      with
        price : Asset
      controller issuer
      do
        create InvestorRedemption with ..

template InvestorRedemption
  with
    operator : Party
    investor : Party
    issuer : Party
    bondRegistrar : Party
    cashProvider : Party
    payingAgent : Party
    asset : Asset
    price : Asset
  where
    signatory operator, investor, issuer
    observer bondRegistrar

    choice InstructInvestorRedemption : (ContractId Delivery, ContractId Delivery)
      controller operator
      do
        now <- getTime
        let
          settlementIdCash = "InvestorRedemption" <> "-" <> asset.id.label <> "-" <> partyToText investor <> "-" <> "Cash" <> show now
          settlementIdBond = "InvestorRedemption" <> "-" <> asset.id.label <> "-" <> partyToText investor <> "-" <> "Bond" <> show now
          payout = price with quantity = price.quantity * asset.quantity
        (_, issuerSettlementInfo) <- fetchByKey @Custody.SettlementInfo (operator, issuer)
        (_, investorSettlementInfo) <- fetchByKey @Custody.SettlementInfo (operator, investor)
        (_, registrarSettlementInfo) <- fetchByKey @Custody.SettlementInfo (operator, bondRegistrar)
        let
          issuerAccount = getAccount True issuerSettlementInfo issuer
          investorCashAccount = getAccount True investorSettlementInfo investor
          investorSecuritiesAccount = getAccount False investorSettlementInfo investor
          registrarSecuritiesAccount = getAccount False registrarSettlementInfo bondRegistrar
        instructionCids <- createInstructions True operator payingAgent cashProvider issuerAccount investorCashAccount settlementIdCash 0 payout
        instructionIds <- map (.instructionId) <$> mapA fetch instructionCids
        cashDeliveryCid <- create Delivery with operator; agent = payingAgent; sender = issuer; receiver = investor; settlementId = settlementIdCash; refIdOpt = None; instructionIds; asset = payout; status = Instructed
        instructionCids <- createInstructions False operator payingAgent bondRegistrar investorSecuritiesAccount registrarSecuritiesAccount settlementIdBond (length instructionIds) asset
        instructionIds <- map (.instructionId) <$> mapA fetch instructionCids
        bondDeliveryCid <- create Delivery with operator; agent = payingAgent; sender = investor; receiver = bondRegistrar; settlementId = settlementIdBond; refIdOpt = None; instructionIds; asset; status = Instructed
        pure (cashDeliveryCid, bondDeliveryCid)

template IssuerRedemptionRequest
  with
    operator : Party
    issuer : Party
    bondRegistrar : Party
    cashProvider : Party
    payingAgent : Party
    assetId : Id
    price : Asset
  where
    signatory operator, issuer
    observer bondRegistrar, payingAgent


    choice InstructIssuerRedemption : [ContractId Delivery]
      with
        snapshotCids : [ContractId Snapshot]
      controller operator
      do
        now <- getTime
        let
          createInstructionsForSnapshot : ContractId Snapshot -> Update [ContractId Delivery]
          createInstructionsForSnapshot snapshotCid = do
            snapshot <- fetch snapshotCid
            let
              payout = price with quantity = price.quantity * snapshot.deposit.asset.quantity
              investor = snapshot.deposit.account.owner
              settlementIdCash = "IssuerRedemption" <> "-" <> snapshot.deposit.asset.id.label <> "-" <> partyToText investor <> "-" <> "Cash" <> show now
              settlementIdBond = "IssuerRedemption" <> "-" <> snapshot.deposit.asset.id.label <> "-" <> partyToText investor <> "-" <> "Bond" <> show now
              asset = snapshot.deposit.asset with id.signatories = fromList [bondRegistrar, issuer]
            (_, issuerSettlementInfo) <- fetchByKey @Custody.SettlementInfo (operator, issuer)
            (_, investorSettlementInfo) <- fetchByKey @Custody.SettlementInfo (operator, investor)
            (_, registrarSettlementInfo) <- fetchByKey @Custody.SettlementInfo (operator, bondRegistrar)
            let
              issuerAccount = getAccount True issuerSettlementInfo issuer
              investorCashAccount = getAccount True investorSettlementInfo investor
              investorSecuritiesAccount = getAccount False investorSettlementInfo investor
              registrarSecuritiesAccount = getAccount False registrarSettlementInfo bondRegistrar
            instructionCids <- createInstructions True operator payingAgent cashProvider issuerAccount investorCashAccount settlementIdCash 0 payout
            instructionIds <- map (.instructionId) <$> mapA fetch instructionCids
            cashDeliveryCid <- create Delivery with operator; agent = payingAgent; sender = issuer; receiver = investor; settlementId = settlementIdCash; refIdOpt = None; instructionIds; asset = payout; status = Instructed
            instructionCids <- createInstructions False operator payingAgent bondRegistrar investorSecuritiesAccount registrarSecuritiesAccount settlementIdBond (length instructionIds) asset
            instructionIds <- map (.instructionId) <$> mapA fetch instructionCids
            bondDeliveryCid <-create Delivery with operator; agent = payingAgent; sender = investor; receiver = bondRegistrar; settlementId = settlementIdBond; refIdOpt = None; instructionIds; asset; status = Instructed
            exercise snapshotCid Delete
            pure [cashDeliveryCid, bondDeliveryCid]
        concat <$> mapA createInstructionsForSnapshot snapshotCids

