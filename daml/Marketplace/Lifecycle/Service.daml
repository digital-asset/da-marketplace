module Marketplace.Lifecycle.Service where

import ContingentClaims.Claim (deserialize, serialize)
import ContingentClaims.Lifecycle qualified as Lifecycle
import ContingentClaims.Claim.Serializable (Claim(..))
import DA.Finance.Types (Id)
import Marketplace.Issuance.AssetDescription qualified as AssetDescription
import Marketplace.Lifecycle.Model (Observation, Today, Effect(..))
import Marketplace.Utils

type Claims = Claim Date Decimal Id

type T = Service

template Service
  with
    operator : Party
    issuer : Party
    bondRegistrar : Party
    cashProvider : Party
    payingAgent : Party
  where
    signatory operator, issuer, bondRegistrar, payingAgent

    key (operator, issuer, bondRegistrar, payingAgent) : (Party, Party, Party, Party)
    maintainer key._1

    controller payingAgent can
      nonconsuming CalculateEffect : Optional (ContractId Effect, ContractId AssetDescriptionUpdateRequest)
        with
          assetId : Id
          election : Optional Claims
        do
          (_, today) <- fetchByKey @Today (operator, payingAgent)
          (_, description) <- fetchByKey @AssetDescription.T assetId
          let obs label date = do
              (_, observation) <- fetchByKey @Observation (operator, bondRegistrar, label, date)
              pure observation.value
          remaining <-
            case election of
            Some e -> Lifecycle.exercise obs (True, deserialize e) (deserialize description.claims) today.date
            _ -> pure (deserialize description.claims)
          Lifecycle.Result{remaining, pending} <- Lifecycle.lifecycle obs remaining today.date
          let serializedRemaining = serialize remaining
          if description.claims /= serialize remaining then do
            let newVersion = assetId.version + 1
            let lifecycleId = "Lifecycle-" <> show today.date <> "-" <> assetId.label <> "(v" <> show assetId.version <> ")"
            let expired = serializedRemaining == Zero
            requestCid <- create AssetDescriptionUpdateRequest with claims = serializedRemaining; ..
            effectCid <- create Effect with operator; issuer; bondRegistrar; cashProvider; payingAgent; lifecycleId; assetId; newVersion; date = today.date; payouts = pending; expired
            pure $ Some (effectCid, requestCid)
          else
            pure None

    controller operator can
      Terminate : ()
        do return ()

template Offer
  with
    operator : Party
    issuer : Party
    bondRegistrar : Party
    cashProvider : Party
    payingAgent : Party
  where
    signatory operator, issuer

    controller bondRegistrar, payingAgent can
      Accept : ContractId Service
        do
          createOrLookup Service with ..

      Decline : ()
        do
          return ()

template Request
  with
    issuer : Party
    operator : Party
    bondRegistrar : Party
    cashProvider : Party
    payingAgent : Party
  where
    signatory bondRegistrar, payingAgent

    controller operator, issuer can
      Approve : ContractId Service
        do
          createOrLookup Service with ..

      Reject : ()
        do
          return ()

template AssetDescriptionUpdateRequest 
  with
    issuer : Party
    payingAgent : Party
    bondRegistrar : Party
    assetId : Id
    description : AssetDescription.AssetDescription
    newVersion : Int
    claims : Claims
  where 
    signatory payingAgent, bondRegistrar, issuer
    
    controller bondRegistrar can 
      ApproveUpdate : ContractId AssetDescription.AssetDescription
        do
          create description with assetId.version = newVersion; claims