module Marketplace.Trading.Listing where

import DA.Finance.Types
import Marketplace.Error qualified as Error

type T = Listing

data Status
    = Active
    | Disabled
  deriving (Eq, Show)

template Listing
  with
    operator : Party
    provider : Party
    customer : Party
    listingId : Text
    calendarId : Text
    description : Text
    tradedAssetId : Id
    quotedAssetId : Id
    tradedAssetPrecision : Int
    quotedAssetPrecision : Int
    minimumTradableQuantity : Decimal
    maximumTradableQuantity : Decimal
    providerId : Text
    status : Status
  where
    signatory operator, provider, customer

    -- TODO: Should we key by traded and quoted asset instead? listing id could be opaque / random
    key (operator, provider, listingId) : (Party, Party, Text)
    maintainer key._1

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    controller customer can
      nonconsuming RequestCreateListing : ContractId CreateListingRequest
        with
          listingId : Text
          calendarId : Text
          description : Text
          tradedAssetId : Id
          quotedAssetId : Id
          tradedAssetPrecision : Int
          quotedAssetPrecision : Int
          minimumTradableQuantity : Decimal
          maximumTradableQuantity : Decimal
        do
          create CreateListingRequest with status = Active; ..

      nonconsuming RequestDisableListing : ContractId DisableListingRequest
        with
          listingId : Text
        do
          create DisableListingRequest with ..

    controller provider can
      nonconsuming CreateListing : ContractId Listing
        with
          createListingRequestCid : ContractId CreateListingRequest
          providerId : Text
        do
          CreateListingRequest{..} <- fetch createListingRequestCid
          archive createListingRequestCid
          create Listing with ..

      nonconsuming ListingFailure : ContractId FailedListingCreation
        with
          createListingRequestCid : ContractId CreateListingRequest
          message : Text
          name : Text
          code : Text
        do
          CreateListingRequest{..} <- fetch createListingRequestCid
          archive createListingRequestCid

          let error = Error.Error with message = name <> " : " <> message, ..
          create FailedListingCreation with ..

      nonconsuming DisableListing : ContractId Listing
        with
          disableListingRequestCid : ContractId DisableListingRequest
        do
          DisableListingRequest{..} <- fetch disableListingRequestCid
          archive disableListingRequestCid
          (listingCid, listing) <- fetchByKey @Listing (operator, provider, listingId)
          archive listingCid

          create listing with status = Disabled

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        do
          create Service with ..

      Decline : ()
        do
          return ()

template Request
  with
    operator : Party
    customer : Party
    provider : Party
  where
    signatory operator, customer

    controller provider can
      Approve : ContractId Service
        do
          create Service with ..

      Reject : ()
        do
          return ()

template CreateListingRequest
  with
    operator : Party
    provider : Party
    customer : Party
    listingId : Text
    calendarId : Text
    description : Text
    tradedAssetId : Id
    quotedAssetId : Id
    tradedAssetPrecision : Int
    quotedAssetPrecision : Int
    minimumTradableQuantity : Decimal
    maximumTradableQuantity : Decimal
    status : Status
  where
    signatory operator, provider, customer

    key (provider, listingId) : (Party, Text)
    maintainer key._1

    let serviceKey = (operator, provider, customer)

    controller provider can
      nonconsuming ListingRequestSuccess : ContractId Listing
        with
          providerId : Text
        do
          exerciseByKey @Service serviceKey CreateListing with createListingRequestCid = self, ..

      nonconsuming ListingRequestFailure : ContractId FailedListingCreation
        with
          message : Text
          name : Text
          code : Text
        do
          exerciseByKey @Service serviceKey ListingFailure with createListingRequestCid = self, ..

template FailedListingCreation
  with
    operator : Party
    provider : Party
    customer : Party
    error : Error.T
    listingId : Text
    calendarId : Text
    description : Text
    tradedAssetId : Id
    quotedAssetId : Id
    tradedAssetPrecision : Int
    quotedAssetPrecision : Int
    minimumTradableQuantity : Decimal
    maximumTradableQuantity : Decimal
    status : Status
  where
    signatory operator, provider, customer

template DisableListingRequest
  with
    operator : Party
    provider : Party
    customer : Party
    listingId : Text
  where
    signatory operator, provider, customer
