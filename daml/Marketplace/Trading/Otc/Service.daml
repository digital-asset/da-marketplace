module Marketplace.Trading.Otc.Service where

import DA.Finance.Types (Asset)
import DA.Set qualified as Set
import DA.Text qualified as Text
import Marketplace.Settlement.Hierarchical.Util (SettlementMode)
import Marketplace.Trading.Model (Side(..))
import Marketplace.Trading.Otc.Model qualified as Trading

type T = Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    tradingAllowed : Bool
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice CreateOrder : ContractId Trading.Order
      with
        counterparty : Party
        id : Text
        delivery : Asset
        deliveryRegistrar : Party
        payment : Asset
        paymentRegistrar : Party
        side : Side
        settlementMode : SettlementMode
        hashlockOpt : Optional Text
      controller customer
      do
        if not tradingAllowed
        then fail "Trading not allowed"
        else create Trading.Order with ..

    nonconsuming choice AcceptOrder : ContractId Trading.Match
      with
        ctrl : Party
        orderCid : ContractId Trading.Order
      controller ctrl
      do
        if not tradingAllowed
        then fail "Trading not allowed"
        else do
          exercise orderCid Trading.Accept

    choice SetStatus : ContractId Service
      with
        isTradingAllowed : Bool
      controller operator
      do
        create this with tradingAllowed = isTradingAllowed

    choice Terminate : ()
      with
        ctrl : Party
      controller ctrl
      do
        let ctrls = [operator, provider, customer]
        assertMsg  ("Only " <> Text.intercalate "," (map partyToText ctrls) <> " are allowed to terminate") (ctrl `Set.member` Set.fromList ctrls)

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      with
      controller customer
        do
          create Service with tradingAllowed = False; ..

    choice Decline : ()
      controller customer
        do
          return ()

    choice Withdraw : ()
      controller provider
        do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
        do pure ()

    choice Reject : ()
      controller provider
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with tradingAllowed = False; ..
