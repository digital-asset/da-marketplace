module Marketplace.Trading.Otc.Model where

import DA.Finance.Types (Asset)
import Marketplace.Custody.Model qualified as Custody
import Marketplace.Settlement.Hierarchical (createInstructions, getAccount, Trade(..), Status(..))
import Marketplace.Trading.Model (Side(..))

template Order
  with
    operator : Party
    provider : Party
    customer : Party
    counterparty : Party
    deliveryRegistrar : Party
    paymentRegistrar : Party
    id : Text
    delivery : Asset
    payment : Asset
    side : Side
  where
    signatory operator, provider, customer
    observer counterparty

    choice Accept : ContractId Match
      controller counterparty
      do
        create Match with ..

    choice Reject : ()
      controller counterparty
      do
        pure ()

    choice Cancel : ()
      controller customer
      do
        pure ()

template Match
  with
    operator : Party
    provider : Party
    customer : Party
    counterparty : Party
    deliveryRegistrar : Party
    paymentRegistrar : Party
    id : Text
    delivery : Asset
    payment : Asset
    side : Side
  where
    signatory operator, provider, customer, counterparty

    nonconsuming choice Instruct : ContractId Trade
      controller operator
      do
        let
          buyer = if side == Buy then customer else counterparty
          seller = if side == Buy then counterparty else customer
          settlementId = id <> "-" <> partyToText customer <> "-" <> partyToText counterparty
        (_, buyerSettlementInfo) <- fetchByKey @Custody.SettlementInfo (operator, buyer)
        (_, sellerSettlementInfo) <- fetchByKey @Custody.SettlementInfo (operator, seller)
        let
          buyerCashAccount = getAccount True buyerSettlementInfo buyer
          sellerCashAccount = getAccount True sellerSettlementInfo seller
          buyerSecuritiesAccount = getAccount False buyerSettlementInfo buyer
          sellerSecuritiesAccount = getAccount False sellerSettlementInfo seller
        deliverySis <- createInstructions False operator operator deliveryRegistrar sellerSecuritiesAccount buyerSecuritiesAccount settlementId 0 delivery
        paymentSis <- createInstructions True operator operator paymentRegistrar buyerCashAccount sellerCashAccount settlementId (length deliverySis) payment
        instructionIds <- map (.instructionId) <$> mapA fetch (deliverySis <> paymentSis)
        create Trade with operator; agent = operator; deliverer = seller; payer = buyer; settlementId; instructionIds; delivery; payment; status = Instructed
