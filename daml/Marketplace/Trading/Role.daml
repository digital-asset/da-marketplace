module Marketplace.Trading.Role where

import Marketplace.Settlement.Service qualified as Settlement
import Marketplace.Trading.Matching.Service qualified as Matching
import Marketplace.Listing.Service qualified as Listing
import Marketplace.Trading.Service qualified as Trading
import Marketplace.Utils
import DA.Set (Set)

template Role
  with
    operator : Party
    provider : Party
    observers : Set Party
  where
    signatory operator, provider
    observer observers

    key (operator, provider) : (Party, Party)
    maintainer key._1

    controller provider can

      nonconsuming OfferTradingService : ContractId Trading.Offer
        with
          customer : Party
        do
          create Trading.Offer with ..

      nonconsuming ApproveTradingServiceRequest : ContractId Trading.T
        with
          tradingRequestCid : ContractId Trading.Request
        do
          exercise tradingRequestCid Trading.Approve with ..

      nonconsuming TerminateTradingService : ()
        with
          tradingServiceCid : ContractId Trading.T
        do
          archive tradingServiceCid

      nonconsuming OfferListingService : ContractId Listing.Offer
        with
          customer : Party
        do
          create Listing.Offer with ..

      nonconsuming ApproveListingServiceRequest : ContractId Listing.Service
        with
          listingRequestCid : ContractId Listing.Request
        do
          exercise listingRequestCid Listing.Approve with ..

      nonconsuming TerminateListingService : ()
        with
          listingServiceCid : ContractId Listing.Service
        do
          archive listingServiceCid

template Offer
  with
    operator : Party
    provider : Party
    observers : Set Party
  where
    signatory operator

    controller provider can
      Accept : (ContractId Role, ContractId Matching.Service, ContractId Settlement.Service)
        do
          matchingCid <- createOrLookup Matching.Service with ..
          settlementCid <- createOrLookup Settlement.Service with ..
          roleCid <- createOrLookup Role with ..
          return (roleCid, matchingCid, settlementCid)

      Decline : ()
        do
          return ()

template Request
  with
    provider : Party
    operator : Party
  where
    signatory provider

    controller operator can
      Approve : (ContractId Role, ContractId Matching.Service, ContractId Settlement.Service)
        with
          observers : Set Party
        do
          matchingCid <- createOrLookup Matching.Service with ..
          settlementCid <- createOrLookup Settlement.Service with ..
          roleCid <- createOrLookup Role with ..
          return (roleCid, matchingCid, settlementCid)

      Reject : ()
        do
          return ()
