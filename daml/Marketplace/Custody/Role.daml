module Marketplace.Custody.Role where

import DA.Set (Set)
import DA.Map (empty)
import Marketplace.Custody.Model qualified as Custody
import Marketplace.Custody.Service qualified as Custody
import Marketplace.Issuance.Service qualified as Issuance
import Marketplace.Issuance.Instrument.Service qualified as Instrument
import Marketplace.Utils (createAccount)

template Role
  with
    operator : Party
    provider : Party
  where
    signatory operator, provider

    key (operator, provider) :  (Party, Party)
    maintainer key._1

    controller provider can

      nonconsuming OfferCustodyService : ContractId Custody.Offer
        with
          customer : Party
        do
          create Custody.Offer with ..

      nonconsuming ApproveCustodyRequest : ContractId Custody.Service
        with
          custodyRequestCid : ContractId Custody.Request
        do
          exercise custodyRequestCid Custody.Approve with ..

      nonconsuming TerminateCustodyService : ()
        with
          custodyServiceCid : ContractId Custody.Service
        do
          archive custodyServiceCid

      nonconsuming OfferIssuanceService : ContractId Issuance.Offer
        with
          customer : Party
        do
          create Issuance.Offer with ..

      nonconsuming ApproveIssuanceRequest : ContractId Issuance.Service
        with
          issuanceServiceRequestCid : ContractId Issuance.Request
        do
          exercise issuanceServiceRequestCid Issuance.Approve with ..

      nonconsuming TerminateIssuanceService : ()
        with
          issuanceServiceCid : ContractId Issuance.Service
        do
          archive issuanceServiceCid

      nonconsuming OfferInstrumentService : ContractId Instrument.Offer
        with
          customer : Party
        do
          create Instrument.Offer with ..

      nonconsuming ApproveInstrumentRequest : ContractId Instrument.Service
        with
          requestCid : ContractId Instrument.Request
        do
          exercise requestCid Instrument.Approve with ..

    controller operator can
      TerminateRole: ()
        do
          return ()

template Offer
  with
    operator : Party
    provider : Party
  where
    signatory operator

    controller provider can
      Accept : (ContractId Role, ContractId Custody.SettlementInfo)
        do
          let ownAccount = Some $ createAccount provider provider
          infoCid <- create Custody.SettlementInfo with operator; party = provider; ownAccount; omnibusCashAccount = None; omnibusSecuritiesAccount = None; cashAccounts = empty; securitiesAccounts = empty
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

      Decline : ()
        do
          return ()

template Request
  with
    provider : Party
    operator : Party
  where
    signatory provider

    controller operator can
      Approve : (ContractId Role, ContractId Custody.SettlementInfo)
        with
          observers : Set Party
        do
          let ownAccount = Some $ createAccount provider provider
          infoCid <- create Custody.SettlementInfo with operator; party = provider; ownAccount; omnibusCashAccount = None; omnibusSecuritiesAccount = None; cashAccounts = empty; securitiesAccounts = empty
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

      Reject : ()
        do
          return ()
