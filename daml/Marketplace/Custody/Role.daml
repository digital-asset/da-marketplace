module Marketplace.Custody.Role where

import DA.Set (Set)
import DA.Map (empty)
import Marketplace.Custody.Model qualified as Custody
import Marketplace.Custody.Service qualified as Custody
import Marketplace.Issuance.Service qualified as Issuance
import Marketplace.Issuance.Instrument.Service qualified as Instrument
import Marketplace.Utils (createAccount)

template Role
  with
    operator : Party
    provider : Party
  where
    signatory operator, provider

    key (operator, provider) :  (Party, Party)
    maintainer key._1

    nonconsuming choice OfferCustodyService : ContractId Custody.Offer
      with
        customer : Party
      controller provider
        do
          create Custody.Offer with ..

    nonconsuming choice ApproveCustodyRequest : ContractId Custody.Service
      with
        custodyRequestCid : ContractId Custody.Request
      controller provider
        do
          exercise custodyRequestCid Custody.Approve with ..

    nonconsuming choice TerminateCustodyService : ()
      with
        custodyServiceCid : ContractId Custody.Service
      controller provider
        do
          archive custodyServiceCid

    nonconsuming choice OfferIssuanceService : ContractId Issuance.Offer
      with
        customer : Party
      controller provider
        do
          create Issuance.Offer with ..

    nonconsuming choice ApproveIssuanceRequest : ContractId Issuance.Service
      with
        issuanceServiceRequestCid : ContractId Issuance.Request
      controller provider
        do
          exercise issuanceServiceRequestCid Issuance.Approve with ..

    nonconsuming choice TerminateIssuanceService : ()
      with
        issuanceServiceCid : ContractId Issuance.Service
      controller provider
        do
          archive issuanceServiceCid

    nonconsuming choice OfferInstrumentService : ContractId Instrument.Offer
      with
        customer : Party
      controller provider
        do
          create Instrument.Offer with ..

    nonconsuming choice ApproveInstrumentRequest : ContractId Instrument.Service
      with
        requestCid : ContractId Instrument.Request
      controller provider
        do
          exercise requestCid Instrument.Approve with ..

    choice TerminateRole: ()
      controller operator
        do
          return ()

template Offer
  with
    operator : Party
    provider : Party
  where
    signatory operator
    observer provider

    choice Accept : (ContractId Role, ContractId Custody.SettlementInfo)
      controller provider
        do
          let ownAccount = Some $ createAccount provider provider
          infoCid <- create Custody.SettlementInfo with operator; party = provider; ownAccount; omnibusCashAccount = None; omnibusSecuritiesAccount = None; cashAccounts = empty; securitiesAccounts = empty
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

    choice Decline : ()
      controller provider
        do
          return ()

template Request
  with
    provider : Party
    operator : Party
  where
    signatory provider
    observer operator

    choice Approve : (ContractId Role, ContractId Custody.SettlementInfo)
      with
        observers : Set Party
      controller operator
        do
          let ownAccount = Some $ createAccount provider provider
          infoCid <- create Custody.SettlementInfo with operator; party = provider; ownAccount; omnibusCashAccount = None; omnibusSecuritiesAccount = None; cashAccounts = empty; securitiesAccounts = empty
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

    choice Reject : ()
      controller operator
        do
          return ()
