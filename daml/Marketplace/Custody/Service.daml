module Marketplace.Custody.Service where

import DA.Finance.Asset
import qualified DA.Finance.Asset as AssetDeposit
import DA.Finance.Types
import DA.Finance.Utils (fetchAndArchive)
import DA.Map (Map)
import DA.Set
import Marketplace.Issuance.AssetDescription (Claims)
import Marketplace.Custody.Model qualified as Custody
import Marketplace.Settlement.Model (SettlementInstruction)
import Marketplace.Utils

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    account : Account
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    controller customer can
      nonconsuming RequestDeposit : ContractId Custody.DepositRequest
        with
          asset : Asset
          observers : Set Party
        do
          create Custody.DepositRequest with ..

      nonconsuming RequestWithdrawl : ContractId Custody.WithdrawlRequest
        with
          depositCid : ContractId AssetDeposit
        do
          create Custody.WithdrawlRequest with ..
      nonconsuming RequestLifecycle: ContractId Custody.LifecycleRequest
        with
          assetDepositCid: ContractId AssetDeposit
          choice: Claims
        do
          create Custody.LifecycleRequest with ..

    controller provider can

      nonconsuming Deposit : ContractId AssetDeposit
        with
          depositRequestCid : ContractId Custody.DepositRequest
        do
          Custody.DepositRequest{asset, observers} <- fetchAndArchive depositRequestCid
          create AssetDeposit with lockers = empty; ..

      nonconsuming Withdrawl : ()
        with
          withdrawlRequestCid : ContractId Custody.WithdrawlRequest
        do
          Custody.WithdrawlRequest{depositCid} <- fetchAndArchive withdrawlRequestCid
          archive depositCid

      nonconsuming Lifecycle : (ContractId AssetDeposit, [ContractId SettlementInstruction])
        with
          lifecycleRequestCid : ContractId Custody.LifecycleRequest
          safekeepingDepositCid : ContractId AssetDeposit
          fixings : Map Text (Map Date Decimal) --TODO these should be looked up from a contract on-ledger, not provided by the custodian!
          uniquePayoutId : Text
        do
          exercise lifecycleRequestCid Custody.Process with investor = customer; ..

    choice Terminate : ()
      with
        ctrl : Party
      controller ctrl
      do pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        do
          let account = createAccount provider customer
          createOrLookup Service with ..

      Decline : ()
        do pure ()

    controller provider can
      Withdraw : ()
        do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    controller customer can
      Cancel : ()
        do pure ()

    controller provider can
      Reject : ()
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        let account = createAccount provider customer
        createOrLookup Service with ..

createAccount : Party -> Party -> Account
createAccount provider customer = do
  let id = Id with signatories = fromList [customer, provider]; label = partyToText customer <> "@" <> partyToText provider; version = 0
      owner = customer
  Account with id; owner; provider