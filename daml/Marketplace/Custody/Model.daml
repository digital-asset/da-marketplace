module Marketplace.Custody.Model where

import ContingentClaims.Claim (Claim, deserialize, serialize)
import ContingentClaims.Lifecycle qualified as ContingentClaims
import ContingentClaims.Observation (Observation)
import DA.Date (toDateUTC)
import DA.Finance.Asset
import DA.Finance.Asset.Settlement
import DA.Finance.Types
import DA.List (last)
import DA.Map (Map)
import DA.Map qualified as Map
import DA.Next.Set
import DA.Optional (fromSomeNote)
import Marketplace.Issuance.AssetDescription (AssetDescription, Claims)
import Marketplace.Issuance.AssetDescription qualified as AssetDescription

template OpenAccountRequest
  with
    operator : Party
    provider : Party
    customer : Party
    accountId : Id
    observers : Set Party
    ctrls : Set Party
  where
    signatory operator, provider, customer

template OpenAllocationAccountRequest
  with
    operator : Party
    provider : Party
    customer : Party
    nominee : Party
    accountId : Id
    observers : Set Party
  where
    signatory operator, provider, customer

template CloseAccountRequest
  with
    operator : Party
    provider : Party
    customer : Party
    accountId : Id
  where
    signatory operator, provider, customer

template CloseAllocationAccountRequest
  with
    operator : Party
    provider : Party
    customer : Party
    accountId : Id
  where
    signatory operator, provider, customer

template CreditAccountRequest
  with
    operator : Party
    provider : Party
    customer : Party
    accountId : Id
    asset : Asset
  where
    signatory operator, provider, customer

template DebitAccountRequest
  with
    operator : Party
    provider : Party
    customer : Party
    accountId : Id
    debit : AssetSettlement_Debit
  where
    signatory operator, provider, customer

template TransferDepositRequest
  with
    operator : Party
    provider : Party
    customer : Party
    accountId : Id
    transfer : AssetSettlement_Transfer
  where
    signatory operator, provider, customer

template LifecycleRequest
  with
    operator : Party
    provider : Party
    customer : Party
    assetDepositCid: ContractId AssetDeposit
    choice: Claims
  where
    signatory operator, provider, customer

    -- TODO: this shouldn't be exported; it's only called from CustodyService.Lifecycle
    choice Process : [ ContractId AssetDeposit ]
      with
          investor: Party
          safekeepingDepositCid: ContractId AssetDeposit
          fixings: Map Text (Map Date Decimal) --TODO these should be looked up from a contract on-ledger, not provided by the custodian!
      controller investor
        do
          t <- toDateUTC <$> getTime
          assetDeposit <- fetch assetDepositCid
          (_, description) <- fetchByKey @AssetDescription assetDeposit.asset.id
          (versionsCid, versions) <- fetchByKey @AssetDescription.Index (fromList . signatory $ description, assetDeposit.asset.id.label)
          let spot : Text -> Date -> Update Decimal
              spot label dt = pure $ fromSomeNote
                ("Lifecycle: Underlying data '" <> label <> "' missing on " <> show dt)
                (Map.lookup label fixings >>= Map.lookup dt)
              payout: Id -> Decimal -> Date -> Update (Claim Observation Date Id, ContractId AssetDeposit)
              payout asset qty dt = do
                payoutDepositCid :: _ <- exercise safekeepingDepositCid $ AssetDeposit_Split [qty]
                exerciseByKey @AssetSettlementRule assetDeposit.account.id $
                   AssetSettlement_AddController description.issuer
                cid <- exerciseByKey @AssetSettlementRule description.safekeepingAccountId (
                  AssetSettlement_Transfer with
                    receiverAccountId = assetDeposit.account.id
                    depositCid = payoutDepositCid)
                exerciseByKey @AssetSettlementRule assetDeposit.account.id $
                  AssetSettlement_RemoveController description.issuer
                postLifecycleClaim <- ContingentClaims.pruneLeaf spot asset qty (deserialize description.claims) dt
                return (postLifecycleClaim, cid)
              election : Claim Observation Date Id -> Claim Observation Date Id -> Claim Observation Date Id
              election _ _ = deserialize choice -- will throw if the claims don't match
          versionsAndCids <- ContingentClaims.lifecycle payout spot election (deserialize description.claims) t
          let (postAssetClaims, payoutCids) = unzip versionsAndCids
          (_, postAssetVersion) <- exercise versionsCid $ AssetDescription.LookupOrInsert (serialize . last $ postAssetClaims)
          assetDepositCid' <- create assetDeposit with asset = (assetDeposit.asset with id = (assetDeposit.asset.id with version = postAssetVersion))
          archive assetDepositCid
          return $ assetDepositCid' :: payoutCids
