module Marketplace.Distribution.Auction.Utils where

import DA.Finance.Asset (AssetDeposit, AssetDeposit_Split(..))
import Marketplace.Settlement qualified as Settlement
import Marketplace.Distribution.Auction.Model qualified as Auction
import Marketplace.Distribution.Bidding.Model qualified as Bidding
import Marketplace.Distribution.Bidding.Model (Bid(..))
import Marketplace.Distribution.Bidding.Service qualified as Bidding
import Marketplace.Trading.AllocationAccountRule qualified as Allocation
import Marketplace.Trading.AllocationAccountRule (AllocationAccountRule(..))

<<<<<<< HEAD
-- | Takes a list and splits it based off a predicate.
splitList : (a -> Bool) -> [a] -> [Either a a]
splitList p xs = foldr (\x acc -> if p x then Right x :: acc else Left x :: acc) [] xs
=======
-- | Takes a list and splits it based off a predicate. Values which match the predicate go in the right list of the tuple
splitList : (a -> Bool) -> [a] -> ([a], [a])
splitList p xs = foldr (\x (y,z) -> if p x then (y, x :: z) else (x :: y, z)) ([],[]) xs
>>>>>>> 86d893c5aec78c5a869287e05b87dc237a44da21

-- | Returns a bidder's allocation to their trading account
withdrawAllocation : Bidding.T -> Update (ContractId AssetDeposit)
withdrawAllocation bid@Bid{..} = do
    exerciseByKey @AllocationAccountRule allocationAccount.id Allocation.Withdraw with transferTo = tradingAccount; ..

-- | Updates a bid's status
updateBidStatus : Bidding.Status -> Bidding.T -> Update (ContractId Bid)
<<<<<<< HEAD
updateBidStatus newStatus Bid{..} = do
    exerciseByKey @Bidding.S (assetId, customer) Bidding.UpdateStatus with ..
=======
updateBidStatus newStatus bid@Bid{..} = do
    exerciseByKey @Bidding.S (bid.assetId, bid.customer) Bidding.UpdateStatus with ..
>>>>>>> 86d893c5aec78c5a869287e05b87dc237a44da21

-- | A map/accumulator function for processing a submitted bid.
-- Accepts the remaining quantity and price as an accululator along the current Bid as input
-- Output is the updated accululator (if applicable) along with the Bid mapped to an Allocation (depending on the accumulator and bid information)
dutchAuction : (Decimal, Decimal) -> Bidding.T -> ((Decimal, Decimal), Auction.Allocation)
dutchAuction acc@(0.0, _)   bid@Bid{..} = (acc, Auction.Allocation with quantity = 0.0; ..)
dutchAuction (remaining, _) bid@Bid{..} =
  let
    quantity = details.quantity
    bidPrice = details.price
  in
    if remaining >= quantity
      then ((remaining - quantity, bidPrice), Auction.Allocation with ..)
      else ((0.0, bidPrice), Auction.Allocation with quantity = remaining; ..)

-- | An accumulator function which processes generates the settlement instruction for both an issuer and a bidder based of the output of the dutch auction
generateSettlementInstruction : (Optional (ContractId AssetDeposit), [ContractId Settlement.SettlementInstruction]) -> Auction.SettleAllocation -> Update (Optional (ContractId AssetDeposit), [ContractId Settlement.SettlementInstruction])
generateSettlementInstruction (None, _) _ = error "Auction:generateSettlementInstruction - Issuers AssetDeposit has no remaining units to allocate"
generateSettlementInstruction (Some issuerDepositCid, settlementInstructionCids) Auction.SettleAllocation{..} = do
    let
      allocatedQuantity = allocation.quantity
      bid = allocation.bid
      allocatedAmount = allocatedQuantity * price
      newStatus = if bid.details.quantity == allocatedQuantity
                    then Bidding.FullAllocation with ..
                    else Bidding.PartialAllocation with quantity = allocatedQuantity; ..

    -- | Process bid side
    (_, bidDepositCid) <- exerciseByKey @Bidding.S (bid.assetId, bid.customer) Bidding.ProcessAllocation with quantity = allocatedQuantity; amount = allocatedAmount; ..
    let
      buyer = bid.customer
      payment = Settlement.SettlementDetails with senderAccount = bid.allocationAccount; depositCid = bidDepositCid; receiverAccount = issuerReceivableAccount

    -- | Process issuer side
    -- 1/ Extract their deposit
    -- 2/ Split allocation quantity from this deposit, get the deposit matching the allocation. Can only result in either :
        -- two asset deposits - One with the allocation, one with the remaining
        -- one asset deposit - Occurs when processing the last bid when the auction is fully allocated
    -- 3/ Create the settlement details for delivery of the asset to the buyer
    issuerDeposit <- fetch issuerDepositCid
    issuerDepositCids <- exercise issuerDepositCid AssetDeposit_Split with quantities = [allocatedQuantity]
    let
      seller = issuer
      (allocatedDepositCid, remainingDepositCidOpt) = case issuerDepositCids of
<<<<<<< HEAD
        [x]    -> (x, None)
        [x, y] -> (x, Some y)
=======
        (x :: [])      -> (x, None)
        (x :: y :: []) -> (x, Some y)
>>>>>>> 86d893c5aec78c5a869287e05b87dc237a44da21
        _ -> error "Auction:generateSettlementInstruction - Unexpected AssetDeposit split"
      delivery = Settlement.SettlementDetails with senderAccount = issuerDeposit.account; depositCid = allocatedDepositCid; receiverAccount = bid.tradingAccount

    -- | Create the Settlement Instruction to deliver the asset against the payment atomically
    settlementInstructionCid <- exerciseByKey @Bidding.S (bid.assetId, bid.customer) Bidding.GenerateSettlementInstrution with ..

    pure (remainingDepositCidOpt, settlementInstructionCid :: settlementInstructionCids)
