module Marketplace.Distribution.Bidding.Service where

import DA.Finance.Asset (AssetDeposit, AssetDeposit_Split(..))
import DA.Finance.Types (Asset, Account, Id)
import DA.Finance.Utils (fetchAndArchive)
import DA.List (head, last)
import Marketplace.Distribution.Bidding.Model qualified as Bidding
import Marketplace.Settlement as Settlement (SettlementDetails, SettlementInstruction(..))
import Marketplace.Trading.AllocationAccountRule qualified as Allocation
import Marketplace.Trading.AllocationAccountRule (AllocationAccountRule(..))

type S = Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    tradingAccount : Account
    allocationAccount : Account
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    controller customer can
      nonconsuming SubmitBid : ContractId Bidding.Bid
        with
          bidRequestCid : ContractId Bidding.Request
          price : Decimal
          quantity : Decimal
          depositCid : ContractId AssetDeposit
          allowPublishing : Bool
        do
          -- TODO: Check for parallism of this choice
          bidRequest <- fetchAndArchive bidRequestCid
          deposit <- fetch depositCid
          assertMsg ("Deposit does not cover submitted bid") (deposit.asset.quantity >= price * quantity)
          assertMsg ("Deposited asset does not match the auction's quoted asset") (deposit.asset.id.label == bidRequest.quotedAssetId.label)

          depositCid <- exerciseByKey @AllocationAccountRule allocationAccount.id Allocation.Deposit with ..
          time <- getTime
          create Bidding.Bid
            with
              details = Bidding.Details with ..
              status = Bidding.Pending
              assetId = bidRequest.asset.id
              issuer = bidRequest.issuer
              auctionId = bidRequest.auctionId
              quotedAssetId = bidRequest.quotedAssetId
              ..

    controller provider can
      nonconsuming RequestBid : ContractId Bidding.Request
        with
          issuer : Party
          auctionId : Text
          asset : Asset
          quotedAssetId : Id
        do
          create Bidding.Request with ..

      nonconsuming ProcessAllocation : (ContractId Bidding.Bid, ContractId AssetDeposit)
        with
          bidCid : ContractId Bidding.Bid
          quantity : Decimal
          amount : Decimal
          price : Decimal
        do
          -- Fetch Bid -> Extract their deposit -> Split and return unused allocation (if necessary) to the investor -> Update Bid Status
          bid <- fetch bidCid
          bidDeposit <- fetch bid.depositCid
          bidDepositCid <- if bidDeposit.asset.quantity > amount
                              then do
                                splitDepositCids <- exercise bid.depositCid AssetDeposit_Split with quantities = [amount]
                                exerciseByKey @AllocationAccountRule bid.allocationAccount.id Allocation.Withdraw with transferTo = bid.tradingAccount; depositCid = last splitDepositCids
                                pure $ head splitDepositCids
                              else pure bid.depositCid

          let newStatus = if bid.details.quantity == quantity
                            then Bidding.FullAllocation with ..
                            else Bidding.PartialAllocation with ..
          newBidCid <- exercise bidCid Bidding.UpdateStatus with ..
          pure (newBidCid, bidDepositCid)

    nonconsuming choice GenerateSettlementInstruction : ContractId Settlement.SettlementInstruction
      with
        issuer : Party
        delivery : Settlement.SettlementDetails
        payment : Settlement.SettlementDetails
      controller provider, issuer
      do
        create SettlementInstruction with buyer = customer; seller = issuer; ..

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        with
          tradingAccount : Account
          allocationAccount : Account
        do
          create Service with ..

      Decline : ()
        do
          return ()

    controller provider can
      Withdraw : ()
        do pure ()

template Request
  with
    provider : Party
    customer : Party
    tradingAccount : Account
    allocationAccount : Account
  where
    signatory customer

    controller customer can
      Cancel : ()
        do pure ()

    controller provider can
      Reject : ()
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
