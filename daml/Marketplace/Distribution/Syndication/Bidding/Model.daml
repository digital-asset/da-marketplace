module Marketplace.Distribution.Syndication.Bidding.Model where

import DA.Assert ((===))
import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Types (Account, Asset, Id)
import Marketplace.Settlement.Model as Settlement (SettlementDetails(..), SettlementInstruction(..))

template BidRequest
  with
    operator : Party
    provider : Party
    customer : Party
    issuer : Party
    bookRunner : Party
    dealId : Text
    asset : Asset
    priceId : Id
  where
    signatory operator, provider, customer

template Bid
  with
    operator : Party
    provider : Party
    customer : Party
    issuer : Party
    bookRunner : Party
    dealId : Text
    asset : Asset
    price : Asset
    investorPaymentAccount : Account
    investorDeliveryAccount : Account
  where
    signatory operator, provider, customer
    observer issuer, bookRunner
    ensure asset.quantity > 0.0 && price.quantity > 0.0

    key (operator, provider, customer, dealId) : (Party, Party, Party, Text)
    maintainer key._1

    controller bookRunner can
      Allocate : ContractId Allocation
        with
          offeredPrice : Decimal
          offeredQuantity : Decimal
          deliveryDepositCid : ContractId AssetDeposit
          cptyPaymentAccount : Account
          cptyDeliveryAccount : Account
        do
          deliveryDeposit <- fetch deliveryDepositCid
          deliveryDeposit.asset.quantity === offeredQuantity
          create Allocation with asset = (asset with quantity = offeredQuantity); price = (price with quantity = offeredPrice); ..

template Allocation
  with
    operator : Party
    provider : Party
    customer : Party
    issuer : Party
    bookRunner : Party
    dealId : Text
    asset : Asset
    price : Asset
    deliveryDepositCid : ContractId AssetDeposit
    cptyPaymentAccount : Account
    cptyDeliveryAccount : Account
    investorPaymentAccount : Account
    investorDeliveryAccount : Account
  where
    signatory operator, provider, customer, bookRunner
    observer issuer
    ensure asset.quantity > 0.0 && price.quantity > 0.0

    key (operator, provider, customer, dealId) : (Party, Party, Party, Text)
    maintainer key._1

    controller customer can
      Instruct : ContractId SettlementInstruction
        with
          paymentDepositCid : ContractId AssetDeposit
        do
          paymentDeposit <- fetch paymentDepositCid
          paymentDeposit.asset === price with quantity = price.quantity * asset.quantity
          let delivery = SettlementDetails with senderAccount = cptyDeliveryAccount; receiverAccount = investorDeliveryAccount; depositCid = deliveryDepositCid
          let payment = SettlementDetails with senderAccount = investorPaymentAccount; receiverAccount = cptyPaymentAccount; depositCid = paymentDepositCid
          create SettlementInstruction with details = [delivery, payment]; provider = bookRunner; ..
