module Marketplace.Distribution.Syndication.BookBuilding.Service where

import DA.Finance.Types (Account)
import Marketplace.Distribution.Syndication.BookBuilding.Model qualified as BookBuilding
import Marketplace.Distribution.Syndication.Structuring.Model qualified as Structuring
import Marketplace.Utils

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    controller customer can
      nonconsuming RequestBookBuilding : [ContractId BookBuilding.BuildRequest]
        with
          dealCid : ContractId Structuring.Deal
          providerPaymentAccount : Account
          providerDeliveryAccount : Account
          customerPaymentAccount : Account
          customerDeliveryAccount : Account
        do
          deal@Structuring.Deal{dealId, priceId} <- fetch dealCid
          mapA (\asset -> create BookBuilding.BuildRequest with issuer = deal.issuer; ..) deal.tranches


template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        do
          createOrLookup Service with ..

      Decline : ()
        do
          return ()

    controller provider can
      Withdraw : ()
        do pure ()

template Request
  with
    provider : Party
    customer : Party
  where
    signatory customer
    observer provider

    controller customer can
      Cancel : ()
        do pure ()

    controller provider can
      Reject : ()
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        createOrLookup Service with ..
