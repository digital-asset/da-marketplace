module Marketplace.Distribution.Syndication.Structuring.Service where

import DA.Finance.Types (Id)
import DA.Finance.Utils (fetchAndArchive)
import Marketplace.Distribution.Syndication.Structuring.Model (Deal(..), CreateTranche(..), Tranche, CreateDealRequest(..), AddTrancheRequest(..))
import Marketplace.Utils

type S = Service

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    controller customer can
      nonconsuming RequestCreateDeal : ContractId CreateDealRequest
        with
          dealId : Text
        do
          create CreateDealRequest with ..

      nonconsuming RequestAddTranche : ContractId AddTrancheRequest
        with
          settlementBank : Party
          bndBank : Party
          cashProvider : Party
          bondRegistrar : Party
          dealId : Text
          trancheId : Text
          deliveryId : Id
          paymentId : Id
          size : Decimal
        do
          create AddTrancheRequest with ..

    controller provider can
      nonconsuming CreateDeal : ContractId Deal
        with
          createDealRequestCid : ContractId CreateDealRequest
        do
          CreateDealRequest{..} <- fetchAndArchive createDealRequestCid
          create Deal with dealProvider = provider; issuer = customer; trancheIds = []; ..

      nonconsuming AddTranche : (ContractId Deal, ContractId Tranche)
        with
          addTrancheRequestCid : ContractId AddTrancheRequest
        do
          AddTrancheRequest{..} <- fetchAndArchive addTrancheRequestCid
          exerciseByKey @Deal (operator, customer, dealId) CreateTranche with ..

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        do
          createOrLookup Service with ..

      Decline : ()
        do
          return ()

    controller provider can
      Withdraw : ()
        do pure ()

template Request
  with
    provider : Party
    customer : Party
  where
    signatory customer
    observer provider

    controller customer can
      Cancel : ()
        do pure ()

    controller provider can
      Reject : ()
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        createOrLookup Service with ..
