module Marketplace.Distribution.Syndication.Investor where

import DA.Finance.Types (Account, Asset)
import Marketplace.Lifecycle.Redemption qualified as Lifecycle
import Marketplace.Settlement.Hierarchical qualified as Settlement

template Role
  with
    operator : Party
    investor : Party
  where
    signatory operator, investor

    key (operator, investor) :  (Party, Party)
    maintainer key._1

    controller investor can

      nonconsuming UpdateAccountInfo : ContractId Settlement.AccountInfo
        with
          ownAccount : Optional Account
          cashAccount : Optional Account
          securitiesAccount : Optional Account
        do
          (infoCid, _) <- fetchByKey @Settlement.AccountInfo (operator, investor)
          archive infoCid
          create Settlement.AccountInfo with party = investor; ..

      nonconsuming RequestRedemption : ContractId Lifecycle.InvestorRedemptionRequest
        with
          issuer : Party
          bondRegistrar : Party
          cashProvider : Party
          payingAgent : Party
          asset : Asset
        do
          create Lifecycle.InvestorRedemptionRequest with operator; investor; issuer; bondRegistrar; cashProvider; payingAgent; asset

    controller operator can
      TerminateRole: ()
        do
          return ()

template Offer
  with
    operator : Party
    investor : Party
  where
    signatory operator

    controller investor can
      Accept : (ContractId Role, ContractId Settlement.AccountInfo)
        with
          cashAccount : Optional Account
          securitiesAccount : Optional Account
        do
          infoCid <- create Settlement.AccountInfo with party = investor; ownAccount = None; ..
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

      Decline : ()
        do
          return ()

template Request
  with
    operator : Party
    investor : Party
    cashAccount : Optional Account
    securitiesAccount : Optional Account
  where
    signatory investor

    controller operator can
      Approve : (ContractId Role, ContractId Settlement.AccountInfo)
        do
          infoCid <- create Settlement.AccountInfo with party = investor; ownAccount = None; ..
          roleCid <- create Role with ..
          pure (roleCid, infoCid)

      Reject : ()
        do
          return ()
