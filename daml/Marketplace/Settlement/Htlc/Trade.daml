module Marketplace.Settlement.Htlc.Trade where

import DA.Assert ((===))
import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Types (Asset)
import DA.Text (sha256)
import Marketplace.Settlement.Htlc.Instruction qualified as Htlc
import Marketplace.Settlement.Htlc.Util (HtlcState(..))
import Marketplace.Settlement.Hierarchical (SettlementMode)

template Trade
  with
    operator : Party
    deliverer : Party
    payer : Party
    delivererAgent : Party
    payerAgent : Party
    settlementId : Text
    instructionIds : [Text]
    payment : Asset
    delivery : Asset
    status : HtlcState
    settlementMode : SettlementMode
    hashlock : Text
    expiry : Time
  where
    signatory operator
    observer deliverer, delivererAgent, payer, payerAgent

    key (operator, settlementId) : (Party, Text)
    maintainer key._1

    controller payerAgent can
      Settle : (ContractId Trade, [ContractId AssetDeposit])
        with
          secret : Text
        do
          time <- getTime
          assertMsg "Time lock has expired" (time < expiry)
          status === Locked
          hashlock === sha256 secret
          let
            settle (instructionId : Text) = do
              (siCid, si) <- fetchByKey @Htlc.Instruction (operator, settlementId, instructionId)
              si.settlementId === settlementId
              si.asset.id.label === delivery.id.label
              si.asset.id.version === delivery.id.version
              si.asset.quantity === delivery.quantity
              exercise siCid Htlc.Settle with secret
          adCids <- mapA settle instructionIds
          tradeCid <- create this with status = Settled
          pure (tradeCid, adCids)

    controller delivererAgent can
      Refund : (ContractId Trade, [ContractId AssetDeposit])
        do
          time <- getTime
          assertMsg "Time lock has not expired" (time >= expiry)
          status === Locked
          let
            refund (instructionId : Text) = do
              (siCid, si) <- fetchByKey @Htlc.Instruction (operator, settlementId, instructionId)
              si.settlementId === settlementId
              si.asset.id.label === delivery.id.label
              si.asset.id.version === delivery.id.version
              si.asset.quantity === delivery.quantity
              exercise siCid Htlc.Refund
          adCids <- mapA refund instructionIds
          deliveryCid <- create this with status = Refunded
          pure (deliveryCid, adCids)
