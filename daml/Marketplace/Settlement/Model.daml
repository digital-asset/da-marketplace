module Marketplace.Settlement.Model where

import DA.Finance.Types (Account)
import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Asset.Settlement (AssetSettlementRule, AssetSettlement_AddController(..), AssetSettlement_RemoveController(..))
import Marketplace.Rule.AllocationAccount (AllocationAccountRule, Transfer(..))

type T = SettlementInstruction

data SettlementDetails = SettlementDetails
  with
    senderAccount : Account
    depositCid : ContractId AssetDeposit
    receiverAccount : Account
  deriving (Eq, Show)

template SettlementInstruction
  with
    operator : Party
    provider : Party
    buyer : Party
    seller : Party
    payment : SettlementDetails
    delivery : SettlementDetails
  where
    signatory operator, provider, buyer, seller

    controller provider can
      Settle : [ContractId AssetDeposit]
        do
          forA [payment, delivery] (\settlementDetails -> do
            let
              transferTo = settlementDetails.receiverAccount
              depositCid = settlementDetails.depositCid
              addProvider = exerciseByKey @AssetSettlementRule transferTo.id AssetSettlement_AddController with ctrl = provider
              removeProvider = exerciseByKey @AssetSettlementRule transferTo.id AssetSettlement_RemoveController with ctrl = provider
              settle = exerciseByKey @AllocationAccountRule settlementDetails.senderAccount.id Transfer with ..

            -- Sequence the transaction, ignoring the output of the add and remove provider transactions but return the output of the settle transaction
            addProvider *> settle <* removeProvider
            )
