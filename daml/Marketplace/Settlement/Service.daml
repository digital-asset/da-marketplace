module Marketplace.Settlement.Service where

import DA.Finance.Asset (AssetDeposit)
import DA.Set qualified as Set
import DA.Text qualified as Text
import Marketplace.Settlement.Model (SettlementInstruction(..), Settle(..))
import Marketplace.Utils

type T = Service

template Service
  with
    operator : Party
    provider : Party
  where
    signatory operator, provider

    key (operator, provider) : (Party, Party)
    maintainer key._1

    controller provider can
      nonconsuming SettleInstruction : [ContractId AssetDeposit]
        with
          settlementInstructionCid : ContractId SettlementInstruction
        do
          exercise settlementInstructionCid Settle

    choice Terminate : ()
      with
        ctrl : Party
      controller ctrl 
      do
        let ctrls = [operator, provider]
        assertMsg (Text.intercalate "," $ map partyToText ctrls) (ctrl `Set.member` Set.fromList ctrls)

template Offer
  with
    operator : Party
    provider : Party
  where
    signatory operator

    controller provider can
      Accept : ContractId Service
        do
          createOrLookup Service with ..

      Decline : ()
        do
          return ()

template Request
  with
    provider : Party
    operator : Party
  where
    signatory provider

    controller operator can
      Approve : ContractId Service
        do
          createOrLookup Service with ..

      Reject : ()
        do
          return ()
