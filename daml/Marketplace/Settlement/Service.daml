module Marketplace.Settlement.Service where

import DA.Finance.Asset (AssetDeposit)
import DA.Optional (whenSome)
import Marketplace.Settlement.Model (SettlementInstruction(..), Settle(..))
import Marketplace.Trading.Model qualified as Order
import Marketplace.Utils

type T = Service

template Service
  with
    operator : Party
    provider : Party
    --FIXME: why is customer not part of this?
  where
    signatory operator, provider

    key (operator, provider) : (Party, Party)
    maintainer key._1
{-
    -- | prepend a new `Booking` to the order, indicating settled amount in `SettlementInstruction`
    choice Book : (ContractId Order.T, ContractId SettlementInstruction)
      with orderCid : ContractId Order.T
           originator : Party -- ^ Should match the order
           depositCid: ContractId AssetDeposit -- ^ Should be order.collateral for collateralized order
           allocations: [Order.Allocation]
      controller provider
        do
          order <- fetch orderCid
          assertMsg "Originator must match order customer" $ originator == order.customer
          whenSome (Order.pledgedDeposit order.collateral) \cid ->
            assertMsg "Deposit contract ID does not match pledged collateral" $ cid == depositCid
          deposit <- fetch depositCid
          assertMsg "Overbooking" $ deposit.asset.quantity <= order.unbookedQuantity
          assertMsg "Allocations do not total 100%" $
            foldl (\tot a -> a.ratio + tot) 0.0 allocations == 1.0
          orderCid' <- create order with
            unbookedQuantity = order.unbookedQuantity - deposit.asset.quantity
          archive orderCid
          let 
          return (orderCid', _)
-}

    controller provider can
      nonconsuming SettleInstruction : [ContractId AssetDeposit]
        with
          settlementInstructionCid : ContractId SettlementInstruction
        do
          exercise settlementInstructionCid Settle

    controller operator can
      Terminate : ()
        do return ()

template Offer
  with
    operator : Party
    provider : Party
  where
    signatory operator

    controller provider can
      Accept : ContractId Service
        do
          createOrLookup Service with ..

      Decline : ()
        do
          return ()

template Request
  with
    provider : Party
    operator : Party
  where
    signatory provider

    controller operator can
      Approve : ContractId Service
        do
          createOrLookup Service with ..

      Reject : ()
        do
          return ()
