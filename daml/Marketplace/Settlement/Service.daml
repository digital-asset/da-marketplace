module Marketplace.Settlement.Service where

import DA.Finance.Asset (AssetDeposit)
import DA.Set qualified as Set
import DA.Text qualified as Text
import Marketplace.Settlement.Model (SettlementInstruction(..), Settle(..))
import Marketplace.Utils

type T = Service

template Service
  with
    operator : Party
    provider : Party
  where
    signatory operator, provider

    key (operator, provider) : (Party, Party)
    maintainer key._1

    nonconsuming choice SettleInstruction : [ContractId AssetDeposit]
      with
        settlementInstructionCid : ContractId SettlementInstruction
      controller provider
        do
          exercise settlementInstructionCid Settle

    choice Terminate : ()
      with
        ctrl : Party
      controller ctrl 
      do
        let ctrls = [operator, provider]
        assertMsg  ("Only " <> Text.intercalate "," (map partyToText ctrls) <> " are allowed to terminate") (ctrl `Set.member` Set.fromList ctrls)

template Offer
  with
    operator : Party
    provider : Party
  where
    signatory operator
    observer provider

    choice Accept : ContractId Service
      controller provider
        do
          createOrLookup Service with ..

    choice Decline : ()
      controller provider
        do
          return ()

template Request
  with
    provider : Party
    operator : Party
  where
    signatory provider
    observer operator

    choice Approve : ContractId Service
      controller operator
        do
          createOrLookup Service with ..

    choice Reject : ()
      controller operator
        do
          return ()
