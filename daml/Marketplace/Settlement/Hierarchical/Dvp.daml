module Marketplace.Settlement.Hierarchical.Dvp where

import DA.Finance.Types (Asset)
import DA.Finance.Asset (AssetDeposit(..))
import DA.Foldable (mapA_)
import Marketplace.Settlement.Hierarchical.Instruction (Instruction, CancelInstruction(..), SettleInstruction(..))
import Marketplace.Settlement.Hierarchical.Util qualified as Util (Status(..), SettlementMode(..))
import SwiftMessage.Message

template Dvp
  with
    operator : Party
    agent : Party
    deliverer : Party
    payer : Party
    settlementId : Text
    instructionIds : [Text]
    payment : Asset
    delivery : Asset
    status : Util.Status
    settlementMode : Util.SettlementMode
  where
    signatory operator
    observer agent

    key (operator, settlementId) : (Party, Text)
    maintainer key._1

    controller agent can
      SettleDvp : (ContractId Dvp, [ContractId AssetDeposit])
        do
          let
            settle (instructionId : Text) = do
              (siCid, si) <- fetchByKey @Instruction (operator, settlementId, instructionId)
              assertMsg "Settlement id of instruction doesn't match trade" $ si.settlementId == settlementId
              exercise siCid SettleInstruction
          adCids <- mapA settle instructionIds
          tradeCid <- create this with status = Util.Settled
          if settlementMode == Util.Dvp then do
            finalizeSwiftMessage (operator, settlementId, MT545_t)
            finalizeSwiftMessage (operator, settlementId, MT547_t)
          else do
            finalizeSwiftMessage (operator, settlementId, MT544_t)
            finalizeSwiftMessage (operator, settlementId, MT546_t)
          pure (tradeCid, adCids)
    
    choice CancelDvp : ContractId Dvp
      controller operator
      do
        let
          cancel : Text -> Update () 
          cancel instructionId = do
            (siCid, si) <- fetchByKey @Instruction (operator, settlementId, instructionId)
            assertMsg "Settlement id of instruction doesn't match trade" $ si.settlementId == settlementId
            exercise siCid CancelInstruction
        mapA_ cancel instructionIds
        create this with status = Util.Cancelled
