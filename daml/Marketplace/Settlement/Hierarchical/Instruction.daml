module Marketplace.Settlement.Hierarchical.Instruction where

import DA.Assert ((===))
import DA.Finance.Types (Account, Asset)
import DA.Finance.Asset (AssetDeposit(..), AssetDeposit_Transfer(..), AssetDeposit_SetObservers(..))
import DA.Set (fromList)

template Instruction
  with
    operator : Party
    agent : Party
    sender : Party
    receiver : Party
    signed : [Party]
    settlementId : Text
    instructionId : Text
    senderAccount : Account
    receiverAccount : Account
    asset : Asset
    depositCid : Optional (ContractId AssetDeposit)
  where
    signatory operator, signed
    observer agent, sender, receiver

    key (operator, settlementId, instructionId) : (Party, Text, Text)
    maintainer key._1

    choice Allocate : ContractId Instruction
      with
        settlementDepositCid : ContractId AssetDeposit
      controller sender
        do
          deposit <- fetch settlementDepositCid
          deposit.asset === asset
          deposit.account === senderAccount
          depositCid <- Some <$> exercise settlementDepositCid AssetDeposit_SetObservers with newObservers = fromList [agent]
          create this with depositCid; signed = sender :: signed

    choice Sign : ContractId Instruction
      controller receiver
        do
          create this with signed = receiver :: signed

    choice SettleInstruction : ContractId AssetDeposit
      controller operator, agent
        do
          case depositCid of
            Some cid -> exercise cid AssetDeposit_Transfer with receiverAccount
            None -> fail $ "Instruction [" <> instructionId <> "] of settlement [ " <> settlementId <> " ] is not allocated"

    choice CancelInstruction : ()
      controller operator
        do 
          pure ()
