module Marketplace.Settlement.Hierarchical where

import DA.Assert ((===))
import DA.Finance.Types (Account, Asset)
import DA.Finance.Asset (AssetDeposit(..), AssetDeposit_Transfer(..))

data Status =
  Instructed
  | Settled
  deriving (Eq, Show)

template Trade
  with
    operator : Party
    agent : Party
    deliverer : Party
    payer : Party
    settlementId : Text
    instructionIds : [Text]
    payment : Asset
    delivery : Asset
    status : Status
  where
    signatory operator
    observer agent

    key (operator, settlementId) : (Party, Text)
    maintainer key._1

    controller agent can
      Settle : (ContractId Trade, [ContractId AssetDeposit])
        do
          let
            settle (instructionId : Text) = do
              (siCid, _) <- fetchByKey @SettlementInstruction (operator, settlementId, instructionId)
              exercise siCid SettleInstruction
          adCids <- mapA settle instructionIds
          tradeCid <- create this with status = Settled
          pure (tradeCid, adCids)

template SettlementInstruction
  with
    operator : Party
    agent : Party
    sender : Party
    receiver : Party
    signed : [Party]
    settlementId : Text
    instructionId : Text
    senderAccount : Account
    receiverAccount : Account
    asset : Asset
    depositCid : Optional (ContractId AssetDeposit)
  where
    signatory operator, signed
    observer agent, sender, receiver

    key (operator, settlementId, instructionId) : (Party, Text, Text)
    maintainer key._1

    controller sender can
      Allocate : ContractId SettlementInstruction
        with
          settlementDepositCid : ContractId AssetDeposit
        do
          deposit <- fetch settlementDepositCid
          deposit.asset === asset
          deposit.account === senderAccount
          create this with depositCid = Some settlementDepositCid; signed = sender :: signed

    controller receiver can
      Sign : ContractId SettlementInstruction
        do
          create this with signed = receiver :: signed

    controller agent can
      SettleInstruction : ContractId AssetDeposit
        do
          case depositCid of
            Some cid -> exercise cid AssetDeposit_Transfer with receiverAccount
            None -> fail $ "Instruction [" <> instructionId <> "] is not allocated"
