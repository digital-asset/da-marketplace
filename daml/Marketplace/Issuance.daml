module Marketplace.Issuance where

import ContingentClaims.Claim (serialize)
import DA.Finance.Asset
import DA.Finance.Asset.Settlement
import DA.Finance.Types
import DA.Map qualified as Map
import DA.Next.Set (Set, fromList)
import DA.Text (unwords)
import Marketplace.AssetDescription ()
import Marketplace.AssetDescription (AssetDescription(..), Claims)
import Marketplace.AssetDescription qualified as AssetDescription
import Marketplace.Claims (binaryCallOption)

type T = Issuance

template Issuance
  with
    operator : Party
    provider : Party
    customer : Party
    issuanceId : Text
    assetId : Id
    accountId : Id
    quantity : Decimal
  where
    signatory operator, provider, customer

    key (operator, provider, issuanceId) : (Party, Party, Text)
    maintainer key._1

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    controller customer can
      nonconsuming RequestOrigination: ContractId OriginationRequest
        with
          assetLabel : Text
          description : Text
          claims : Claims
          safekeepingAccountId : Id
          observers : [Party]
        do
          create OriginationRequest with observers = fromList observers; ..

      nonconsuming RequestBinaryCallOptionOrigination: ContractId OriginationRequest
        with
          assetLabel : Text
          safekeepingAccountId : Id
          observers : [Party]
          expiry : Date
          strike : Decimal
          underlyingId : Id
          currencyId : Id
        do
          -- TODO: refactor into a more composable form and add to contingent-claims lib
          create OriginationRequest with
            claims = serialize $ binaryCallOption expiry strike underlyingId currencyId
            description = unwords [ underlyingId.label, show expiry, "Binary Call @", show strike ]
            observers = fromList observers
            ..

      nonconsuming RequestCreateIssuance : ContractId CreateIssuanceRequest
        with
          issuanceId : Text
          accountId : Id
          assetId : Id
          quantity : Decimal
        do
          create CreateIssuanceRequest with ..

      nonconsuming RequestReduceIssuance : ContractId ReduceIssuanceRequest
        with
          issuanceId : Text
          accountId : Id
          depositCid : ContractId AssetDeposit
        do
          create ReduceIssuanceRequest with ..

    controller provider can
      nonconsuming Originate: ContractId AssetDescription
        with
          createOriginationCid: ContractId OriginationRequest
        do
          OriginationRequest{assetLabel; description; claims; safekeepingAccountId; observers} <- fetch createOriginationCid
          -- assertMsg "issued must be 0" $ description.issued == 0.0
          -- assertMsg "authorized must be > 0" $ description.authorized > 0.0
          archive createOriginationCid
          let
            assetId = Id with signatories = fromList [ provider, customer ]; label = assetLabel; version = 0
            issuer = customer
          create AssetDescription.Index
                   with
                     assetLabel
                     descriptionSignatories = assetId.signatories
                     versions = Map.insert claims 0 Map.empty
          create AssetDescription
                   with
                     assetId
                     description
                     issuer
                     safekeepingAccountId
                     observers
                     claims

      nonconsuming CreateIssuance : (ContractId Issuance, ContractId AssetDeposit)
        with
          createIssuanceRequestCid : ContractId CreateIssuanceRequest
        do
          CreateIssuanceRequest{issuanceId; assetId; accountId; quantity} <- fetch createIssuanceRequestCid
          archive createIssuanceRequestCid

          Some _ <- lookupByKey @AssetDescription assetId
          issuanceCid <- create Issuance with ..

          let asset = Asset with id = assetId; quantity
          depositCid <- exerciseByKey @AssetSettlementRule accountId AssetSettlement_Credit with ctrl = provider; ..
          pure (issuanceCid, depositCid)

      nonconsuming ReduceIssuance : ContractId Issuance
        with
          reduceIssuanceRequestCid : ContractId ReduceIssuanceRequest
        do
          ReduceIssuanceRequest{issuanceId; accountId; depositCid} <- fetch reduceIssuanceRequestCid
          archive reduceIssuanceRequestCid

          deposit <- fetch depositCid
          exerciseByKey @AssetSettlementRule accountId AssetSettlement_Debit with ..
          (issuanceCid, issuance) <- fetchByKey @Issuance (operator, provider, issuanceId)
          archive issuanceCid

          create issuance with quantity = issuance.quantity - deposit.asset.quantity

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        do
          create Service with ..

      Decline : ()
        do pure ()

    controller provider can
      Withdraw : ()
        do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    controller customer can
      Cancel : ()
        do pure ()

    controller provider can
      Reject : ()
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..

template CreateIssuanceRequest
  with
    operator : Party
    provider : Party
    customer : Party
    issuanceId : Text
    assetId : Id
    accountId : Id
    quantity : Decimal
  where
    signatory operator, provider, customer

template ReduceIssuanceRequest
  with
    operator : Party
    provider : Party
    customer : Party
    issuanceId : Text
    accountId : Id
    depositCid : ContractId AssetDeposit
  where
    signatory operator, provider, customer

template OriginationRequest
  with
    operator : Party
    provider : Party
    customer : Party
    assetLabel : Text
    description : Text
    claims : Claims
    safekeepingAccountId : Id
    observers : Set Party
  where
     signatory operator, provider, customer
