module Marketplace.Issuer where

import Marketplace.BinaryOption
import Marketplace.Derivative
import Marketplace.Custodian
import Marketplace.Registry
import Marketplace.Token
import Marketplace.Utils

import DA.Finance.Types

import DA.Set


template IssuerInvitation
  with
    operator : Party
    issuer : Party
    public : Party
  where
    signatory operator

    key (operator, issuer) : (Party, Party)
    maintainer key._1

    controller issuer can
      IssuerInvitation_Accept : ContractId Issuer
        with
          name : Text
          location : Text
          title : Text
          issuerID : Text
        do
          create RegisteredIssuer with ..
          create Issuer with ..


template Issuer
  with
    operator : Party
    issuer : Party
    public : Party
  where
    signatory operator, issuer

    key (operator, issuer) : (Party, Party)
    maintainer key._1

    controller issuer can
      nonconsuming Issuer_IssueToken : ContractId Token
        with
          name : Text
          quantityPrecision : Int
          description : Text
          isPublic : Bool
          observers : [Party]
        do
          let tokenId = Id with signatories = fromList [issuer], label = name, version = 0
          let tokenObservers = if isPublic then (public :: operator :: observers) else observers
          create Token with id = tokenId, observers = fromList tokenObservers, ..

      nonconsuming Issuer_IssueBinaryOption : ContractId BinaryOption
        with
          name : Text
          description : Text
          minPrice : Decimal
          maxPrice : Decimal
          isPublic : Bool
          observers : [Party]
        do
          let binOptionId = Id with signatories = fromList [issuer], label = name, version = 0
          let binOptionObservers = if isPublic then (public :: observers) else observers
          create BinaryOption with id = binOptionId, observers = fromList binOptionObservers, ..

      nonconsuming Issuer_IssueDerivative : (Id, ContractId Derivative)
        with
          prodSym : Text
          prodCode : Text
          description : Text
          pricePrecision : Int
          secType : Optional SecType
          mmy : Text
          mult : Int
          uom : Text
          optionData : Optional OptionData
          underlying : Id
          isPublic : Bool
          optEndDate : Optional Time
          observers : [Party]
        do
          time <- getTime
          let endDate = case optEndDate of
                (Some x) -> x
                None     -> time
          let id = Id with signatories = fromList [ issuer ], label = prodSym, version = 0
              derivativeObservers = if isPublic then (public :: operator :: observers) else observers
              typ = case secType of
                (Some t) -> t
                None     -> OPT
              derivative = Derivative with uuid = prodSym, observers = fromList derivativeObservers, secType = typ, ..
          (,) id <$> create derivative

      nonconsuming Issuer_RequestCustodianRelationship : ContractId CustodianRelationshipRequest
        with
          custodian : Party
        do create CustodianRelationshipRequest with requester = issuer, role = IssuerRole, ..
