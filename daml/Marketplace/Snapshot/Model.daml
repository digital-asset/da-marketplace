module Marketplace.Snapshot.Model where

import DA.Finance.Asset (AssetDeposit)
import DA.Finance.Types (Id)

type RefId = Text
template SnapshotRequest
  with 
    referenceId : RefId
    operator : Party
    requester : Party
    custodian : Party
    assetId : Id
  where
    signatory operator, requester

    let
      isTargetAsset : AssetDeposit -> Bool 
      isTargetAsset deposit = let depositId = deposit.asset.id in 
          assetId.version == depositId.version && assetId.label == depositId.label
    
    controller custodian can
      Forward : [ContractId SnapshotRequest]
        with depositCids : [ContractId AssetDeposit]
        do 
          deposits <- filter isTargetAsset <$> mapA fetch depositCids
          let holders = map (\d -> d.account.owner) deposits
          mapA (\h -> create this with custodian = h) holders
      
      Provide : [ContractId Snapshot]
        with depositCids : [ContractId AssetDeposit]
        do
          deposits <- filter isTargetAsset <$> mapA fetch depositCids
          mapA (\deposit -> create Snapshot with ..) deposits

template Snapshot
  with 
    referenceId : RefId
    operator : Party
    requester : Party
    custodian : Party
    assetId : Id
    deposit : AssetDeposit
  where 
    signatory operator, requester, custodian

    choice Delete : ()
        controller operator
        do pure ()
  
