module Marketplace.Transfer where

import Marketplace.Token
import Marketplace.Utils

import DA.Finance.Asset
import DA.Finance.Asset.Settlement
import DA.Finance.Types

import DA.List hiding (delete)
import DA.Next.Set


template DepositTransferRequest
  with
    operator : Party
    sender : Party
    senderAccountId : Id
    receiverAccountId : Id
    depositCid : ContractId AssetDeposit
  where
    let senderSig = head $ toList senderAccountId.signatories
        receiverSig = head $ toList receiverAccountId.signatories
        custodian = getCustodian senderAccountId operator
    ensure senderSig == receiverSig && senderAccountId /= receiverAccountId
    signatory operator, sender

    controller custodian can
      DepositTransferRequest_Approve : ContractId AssetDeposit
        do
          deposit <- fetch depositCid
          issuer <- signatory . snd <$> fetchByKey @Token deposit.asset.id
          let (sender, senderProvider) = getAccountOwnerProvider senderAccountId.label
              (receiver, receiverProvider) = getAccountOwnerProvider receiverAccountId.label

              senderAccount = Account
                with id = senderAccountId, provider = senderProvider, owner = sender
              receiverAccount = Account
                with id = receiverAccountId, provider = receiverProvider, owner = receiver
              depositObservers = delete sender $ delete senderProvider $ deposit.observers

          senderRuleCid <- create AssetSettlementRule
            with account = senderAccount,
                  observers = mempty,
                  ctrls = empty
          receiverRuleCid <- create AssetSettlementRule
            with account = receiverAccount,
                  observers = mempty,
                  ctrls = fromList [sender]

          newDepositCid <- exercise senderRuleCid AssetSettlement_Transfer
            with receiverAccountId = receiverAccountId, ..

          newDeposit <- fetch newDepositCid
          let newObservers = fromList issuer <> depositObservers <> newDeposit.observers
          newDepositCid' <- create newDeposit with observers = newObservers
          archive newDepositCid

          archive senderRuleCid
          archive receiverRuleCid

          return newDepositCid'


      DepositTransferRequest_Reject : ()
        do return ()

template DepositDebitRequest
  with
    operator : Party
    owner : Party
    ownerAccount : Account
    depositCid : ContractId AssetDeposit
  where
    let custodian = getCustodian ownerAccount.id operator
    signatory operator, custodian, owner

    controller custodian can
      DepositDebitRequest_Approve : Asset
        do
          let (owner, provider) = getAccountOwnerProvider ownerAccount.id.label

          depositRuleCid <- create AssetSettlementRule
            with account = ownerAccount
                 observers = mempty
                 ctrls = empty

          newAsset <- exercise depositRuleCid AssetSettlement_Debit
            with depositCid

          archive depositRuleCid
          return newAsset

      DepositDebitRequest_Reject : ()
        do return ()

template DepositCreditRequest
  with
    operator : Party
    owner : Party
    account : Account
    asset : Asset
  where
    let custodian = getCustodian account.id operator
    signatory operator, custodian, owner

    controller custodian can
      DepositCreditRequest_Approve : ContractId AssetDeposit
        do
          let (owner, provider) = getAccountOwnerProvider account.id.label
          let tokenSignatories = asset.id.signatories

          depositRuleCid <- create AssetSettlementRule
            with account = account
                 observers = tokenSignatories
                 ctrls = fromList [custodian]

          newDepositCid <- exercise depositRuleCid AssetSettlement_Credit with asset, ctrl = custodian
          archive depositRuleCid
          return newDepositCid

      DepositCreditRequest_Reject : ()
        do return ()
