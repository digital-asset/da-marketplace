module Marketplace.Matching where

import DA.Next.Set (fromList)
import Marketplace.Trading.Order qualified as Order
import Marketplace.Trading.Service qualified as TradingService
import Marketplace.Trading.TradeInstruction qualified as TradeInstruction
template Service
  with
    operator : Party
    provider : Party
  where
    signatory operator, provider

    key provider : Party
    maintainer key

    controller provider can
      nonconsuming MatchOrders : ContractId TradeInstruction.Trade
        with
          execution : Order.Execution
        do
          (makerOrderCid, makerOrder) <- fetchByKey @Order.T (provider, execution.makerOrderId)
          (takerOrderCid, takerOrder) <- fetchByKey @Order.T (provider, execution.takerOrderId)

          let
            serviceKey party = (operator, provider, party)
            accounts = []
            (buy, buyCid, sell, sellCid) = case makerOrder.details.side of
              Order.Buy  -> (makerOrder, makerOrderCid, takerOrder, takerOrderCid)
              Order.Sell -> (takerOrder, takerOrderCid, makerOrder, makerOrderCid)

          tradeInstructionCid <- create TradeInstruction.TradeInstruction with signed = fromList [operator, provider]; buyer = buy.customer; seller = sell.customer; ..
          tradeInstructionCid <- exerciseByKey @TradingService.T (serviceKey buy.customer)  TradingService.InstructTrade with ..
          tradeInstructionCid <- exerciseByKey @TradingService.T (serviceKey sell.customer) TradingService.InstructTrade with ..
          exercise tradeInstructionCid TradeInstruction.Process with ..

template Offer
  with
    operator : Party
    provider : Party
  where
    signatory operator

    controller provider can
      Accept : ContractId Service
        do
          create Service with ..

      Decline : ()
        do
          return ()

template Request
  with
    provider : Party
    operator : Party
  where
    signatory provider

    controller operator can
      Approve : ContractId Service
        do
          create Service with ..

      Reject : ()
        do
          return ()
