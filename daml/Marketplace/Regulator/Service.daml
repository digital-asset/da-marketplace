module Marketplace.Regulator.Service where

import DA.Next.Set (Set, fromList)
import Marketplace.Regulator.Model (VerifiedIdentity(..))

template Service
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    controller customer can
      nonconsuming RequestIdentityVerification : ContractId IdentityVerificationRequest
        with
          legalName : Text
          location : Text
          observers : [Party]
        do
          create IdentityVerificationRequest with observers = fromList observers; ..

    controller provider can
      nonconsuming VerifyIdentity : ContractId VerifiedIdentity
        with
          identityVerificationRequestCid : ContractId IdentityVerificationRequest
        do
          IdentityVerificationRequest{..} <- fetch identityVerificationRequestCid
          archive identityVerificationRequestCid
          create VerifiedIdentity with ..

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
  where
    signatory operator, provider

    controller customer can
      Accept : ContractId Service
        do
          create Service with ..

      Decline : ()
        do pure ()

    controller provider can
      Withdraw : ()
        do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    controller customer can
      Cancel : ()
        do pure ()

    controller provider can
      Reject : ()
        do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..

template IdentityVerificationRequest
  with
    operator : Party
    provider : Party
    customer : Party
    observers : Set Party
    legalName : Text
    location : Text
  where
    signatory operator, provider, customer
    observer observers
