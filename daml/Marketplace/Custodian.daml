module Marketplace.Custodian where

import Marketplace.Notification
import Marketplace.Registry
import Marketplace.Token
import Marketplace.Utils
import Marketplace.Transfer

import DA.Finance.Asset
import DA.Finance.Types

import DA.Action
import DA.Optional
import DA.Next.Set hiding (null)
import DA.List (head)


template CustodianRelationship
  with
    operator : Party
    custodian : Party
    party : Party
  where
    signatory operator, custodian, party
    key (custodian, operator, party) : (Party, Party, Party)
    maintainer key._1

    controller party can
      nonconsuming CustodianRelationship_RequestCredit : ContractId DepositCreditRequest
        with
          request : DepositCreditRequest
        do create request

      nonconsuming CustodianRelationship_RequestDebit : ContractId DepositDebitRequest
        with
          request : DepositDebitRequest
        do create request

      nonconsuming CustodianRelationship_RequestTransfer : ContractId DepositTransferRequest
        with
          request : DepositTransferRequest
        do create request


template CustodianRelationshipRequest
  with
    operator : Party
    requester : Party
    custodian : Party
    role : MarketRole
  where
    signatory operator, requester
    key (operator, requester, custodian, role) : (Party, Party, Party, MarketRole)
    maintainer key._1

    controller custodian can
      CustodianRelationshipRequest_Approve : ContractId CustodianRelationship
        do
          case role of
            IssuerRole -> void $ exerciseByKey @Custodian (operator, custodian) Custodian_AddIssuer with issuer = requester
            ExchangeRole -> void $ exerciseByKey @Custodian (operator, custodian) Custodian_AddExchange with exchange = requester
            InvestorRole -> void $ exerciseByKey @Custodian (operator, custodian) Custodian_AddInvestor with investor = requester
            BrokerRole -> void $ exerciseByKey @Custodian (operator, custodian) Custodian_AddBroker with broker = requester
            _ -> return ()
          create DismissibleNotification with
            sender = custodian, senderRole = Some CustodianRole
            receiver = requester, text = "Relationship request accepted."
          createOrLookup CustodianRelationship with party = requester, ..

      CustodianRelationshipRequest_Reject : ()
        do
          create DismissibleNotification with
            sender = custodian, senderRole = Some CustodianRole
            receiver = requester, text = "Relationship request rejected."
          return ()


template CustodianInvitation
  with
    operator : Party
    custodian : Party
    public : Party
  where
    signatory operator

    key (operator, custodian) : (Party, Party)
    maintainer key._1

    controller custodian can
      CustodianInvitation_Accept : ContractId Custodian
        with
          name : Text
          location : Text
        do
          createOrLookup RegisteredCustodian with ..
          createOrLookup Custodian with investors = [], exchanges = [], brokers = [], issuers = [], ..


template Custodian
  with
    operator : Party
    custodian : Party
    issuers  : [Party]
    investors : [Party]
    brokers : [Party]
    exchanges : [Party]
  where
    signatory operator, custodian

    key (operator, custodian) :  (Party, Party)
    maintainer key._1

    controller custodian can
      Custodian_AddIssuer : ContractId Custodian
        with
          issuer : Party
        do
          assertMsg ("Issuer " <> show issuer <> " already exists") $ issuer `notElem` issuers
          create this with issuers = issuer :: issuers

      Custodian_AddExchange : ContractId Custodian
        with
          exchange : Party
        do
          assertMsg ("Exchange " <> show exchange <> " already exists") $ exchange `notElem` exchanges
          create this with exchanges = exchange :: exchanges

      Custodian_AddInvestor : ContractId Custodian
        with
          investor : Party
        do
          assertMsg ("Investor " <> show investor <> " already exists") $ investor `notElem` investors
          create this with investors = investor :: investors

      Custodian_AddBroker : ContractId Custodian
        with
          broker : Party
        do
          assertMsg ("Broker " <> show broker <> " already exists") $ broker `notElem` brokers
          create this with brokers = broker :: brokers

      nonconsuming Custodian_GetAccount : Account
        with
          investor : Party
        do
          let accountId = getAccountId investor custodian [custodian, operator]
          return Account with id = accountId, provider = custodian, owner = investor

      nonconsuming Custodian_CreateDeposit : ContractId AssetDeposit
        with
          tokenId : Id
          depositQuantity : Decimal
          beneficiary : Party
        do
          optRelationships <- mapM (\s -> lookupByKey @CustodianRelationship (custodian, operator, s)) $ toList tokenId.signatories
          assertMsg "Custodian must have a relationship with the issuer to deposit this token" $ not $ null (catOptionals optRelationships)
          (tokenCid, token) <- fetchByKey @Token tokenId
          account <- exercise self Custodian_GetAccount with investor = beneficiary
          let quantity = roundBankers token.quantityPrecision depositQuantity
              asset = Asset with id = tokenId, ..
              depositObs = fromList $ account.provider :: beneficiary :: signatory token
          create AssetDeposit with observers = depositObs, account = account, lockers = mempty; ..
