module Marketplace.Custodian where

import Marketplace.Notification
import Marketplace.Registry
import Marketplace.Token
import Marketplace.Utils
import Marketplace.Transfer

import DA.Finance.Asset
import DA.Finance.Types

import DA.Action
import DA.Optional
import DA.Set hiding (null)


template CustodianRelationship
  with
    operator : Party
    custodian : Party
    party : Party
  where
    signatory operator, custodian, party
    key (custodian, operator, party) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice CustodianRelationship_RequestCredit : ContractId DepositCreditRequest
      with
        request : DepositCreditRequest
      controller party
      do create request

    nonconsuming choice CustodianRelationship_RequestDebit : ContractId DepositDebitRequest
      with
        request : DepositDebitRequest
      controller party
      do create request

    nonconsuming choice CustodianRelationship_RequestTransfer : ContractId DepositTransferRequest
      with
        request : DepositTransferRequest
      controller party
      do create request


template CustodianRelationshipRequest
  with
    operator : Party
    requester : Party
    custodian : Party
    role : MarketRole
  where
    signatory operator, requester
    key (operator, requester, custodian, role) : (Party, Party, Party, MarketRole)
    maintainer key._1
    observer custodian

    choice CustodianRelationshipRequest_Approve : ContractId CustodianRelationship
      controller custodian
      do
        case role of
          IssuerRole -> void $ exerciseByKey @Custodian (operator, custodian) Custodian_AddIssuer with issuer = requester
          ExchangeRole -> void $ exerciseByKey @Custodian (operator, custodian) Custodian_AddExchange with exchange = requester
          InvestorRole -> void $ exerciseByKey @Custodian (operator, custodian) Custodian_AddInvestor with investor = requester
          BrokerRole -> void $ exerciseByKey @Custodian (operator, custodian) Custodian_AddBroker with broker = requester
          _ -> return ()
        create DismissibleNotification with
          sender = custodian, senderRole = Some CustodianRole
          receiver = requester, text = "Relationship request accepted."
        createOrLookup CustodianRelationship with party = requester, ..

    choice CustodianRelationshipRequest_Reject : ()
      controller custodian
      do
        create DismissibleNotification with
          sender = custodian, senderRole = Some CustodianRole
          receiver = requester, text = "Relationship request rejected."
        return ()


template CustodianInvitation
  with
    operator : Party
    custodian : Party
    public : Party
  where
    signatory operator
    observer custodian

    key (operator, custodian) : (Party, Party)
    maintainer key._1

    choice CustodianInvitation_Accept : ContractId Custodian
      with
        name : Text
        location : Text
      controller custodian
      do
        createOrLookup RegisteredCustodian with ..
        createOrLookup Custodian with investors = [], exchanges = [], brokers = [], issuers = [], ..


template Custodian
  with
    operator : Party
    custodian : Party
    issuers  : [Party]
    investors : [Party]
    brokers : [Party]
    exchanges : [Party]
  where
    signatory operator, custodian

    key (operator, custodian) :  (Party, Party)
    maintainer key._1

    choice Custodian_AddIssuer : ContractId Custodian
      with
        issuer : Party
      controller custodian
      do
        assertMsg ("Issuer " <> show issuer <> " already exists") $ issuer `notElem` issuers
        create this with issuers = issuer :: issuers

    choice Custodian_AddExchange : ContractId Custodian
      with
        exchange : Party
      controller custodian
      do
        assertMsg ("Exchange " <> show exchange <> " already exists") $ exchange `notElem` exchanges
        create this with exchanges = exchange :: exchanges

    choice Custodian_AddInvestor : ContractId Custodian
      with
        investor : Party
      controller custodian
      do
        assertMsg ("Investor " <> show investor <> " already exists") $ investor `notElem` investors
        create this with investors = investor :: investors

    choice Custodian_AddBroker : ContractId Custodian
      with
        broker : Party
      controller custodian
      do
        assertMsg ("Broker " <> show broker <> " already exists") $ broker `notElem` brokers
        create this with brokers = broker :: brokers

    nonconsuming choice Custodian_GetAccount : Account
      with
        investor : Party
      controller custodian
      do
        let accountId = getAccountId investor custodian [custodian, operator]
        return Account with id = accountId, provider = custodian, owner = investor

    nonconsuming choice Custodian_CreateDeposit : ContractId AssetDeposit
      with
        tokenId : Id
        depositQuantity : Decimal
        beneficiary : Party
      controller custodian
      do
        optRelationships <- mapM (\s -> lookupByKey @CustodianRelationship (custodian, operator, s)) $ toList tokenId.signatories
        assertMsg "Custodian must have a relationship with the issuer to deposit this token"
          $ not (null (catOptionals optRelationships)) || custodian `member` tokenId.signatories
        (tokenCid, token) <- fetchByKey @Token tokenId
        account <- exercise self Custodian_GetAccount with investor = beneficiary
        let quantity = roundBankers token.quantityPrecision depositQuantity
            asset = Asset with id = tokenId, ..
            depositObs = fromList $ [] -- account.provider :: signatory token
        create AssetDeposit with observers = depositObs, account = account, ..
