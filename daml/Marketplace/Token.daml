module Marketplace.Token where

import Marketplace.Derivative
import Marketplace.Utils

import DA.Finance.Types

import DA.Set


-- | Reference data describing a token.
template Token
  with
    id : Id
    quantityPrecision : Int
    description : Text
    isPublic : Bool
    observers : Set Party
  where
    signatory id.signatories
    observer observers

    key id : Id
    maintainer key.signatories

    choice Token_AddObservers : ContractId Token
      with
        party : Party
        newObservers : Set Party
      controller party
      do
        assert $ member party $ union id.signatories newObservers
        create this with observers = union observers newObservers

    controller id.signatories can
      Token_SetObservers : ContractId Token
        with newObservers : Set Party
        do create this with observers = newObservers

data InstrumentStatus = InstrumentActive
                      | InstrumentDisabled deriving (Show, Eq)

-- | Reference data describing a market pair of tokens
template MarketPair
  with
    id : Id
    clearedMarket : Bool
    exchange : Party
    description : Text
    baseTokenId : Id
    quoteTokenId : Id
    calendarId : Text
    pricePrecision : Int
    quantityPrecision : Int
    minQuantity : Decimal
    maxQuantity : Decimal
    status : InstrumentStatus
    observers : Set Party
  where
    signatory exchange
    key id : Id
    maintainer key.signatories
    observer observers

-- |Fetches the 'Token' if the 'AssetType' is a Token, if it is a 'Derivative', fetch the
-- underlying 'Token'
tokenOrUnderlying : AssetType -> Id -> Update Token
tokenOrUnderlying TokenAsset      assetId = snd <$> fetchByKey @Token assetId
tokenOrUnderlying DerivativeAsset assetId = do
  (_, deriv) <- fetchByKey @Derivative assetId
  snd <$> fetchByKey @Token deriv.underlying

