module Marketplace.Exchange where

import Marketplace.BinaryOption
import Marketplace.CentralCounterparty
import Marketplace.Custodian
import Marketplace.ExchangeParticipant
import Marketplace.Registry
import Marketplace.Notification
import Marketplace.Token
import Marketplace.Trading
import Marketplace.Utils

import DA.Finance.Types
import DA.Optional

import DA.List
import DA.Set hiding (delete)

template ExchangeInvitation
  with
    operator : Party
    exchange : Party
    public : Party
  where
    signatory operator
    observer exchange

    key (operator, exchange) : (Party, Party)
    maintainer key._1

    choice ExchangeInvitation_Accept : ContractId Exchange
      with
        name : Text
        location : Text
      controller exchange
      do
        createOrLookup RegisteredExchange with ..
        createOrLookup Exchange with tokenPairs = [], clearedMarkets = [], binOptions = [], participants = [], ..


-- |Request from an investor or broker to be added to the exchange
template ExchangeParticipantInvitationRequest
  with
    operator : Party
    exchange : Party
    participant : Party
  where
    signatory participant
    observer exchange
    key (operator, exchange, participant) : (Party, Party, Party)
    maintainer key._3

    choice ExchangeParticipantInvitationRequest_Accept : ContractId ExchangeParticipant
      controller exchange
      do
        create DismissibleNotification with
          sender = exchange, senderRole = Some ExchangeRole
          receiver = participant, text = "Exchange participant request accepted."
        exerciseByKey @Exchange (operator,exchange) Exchange_AddParticipant with exchParticipant = participant
        createOrLookup ExchangeParticipant with exchParticipant = participant, ..

    choice ExchangeInvtationRequest_Reject : ()
      controller exchange
      do
        create DismissibleNotification with
          sender = exchange, senderRole = Some ExchangeRole
          receiver = participant, text = "Exchange participant request accepted."
        return ()


template Exchange
  with
    operator : Party
    exchange : Party
    public : Party
    tokenPairs : [IdPair] -- tokens pairs that are tradable on the exchange
    binOptions : [IdPair]
    clearedMarkets : [(IdPair, Party)] -- tuple of market pairs and the default CCP party for that market
    participants : [Party]
  where
    signatory operator, exchange

    key (operator, exchange) : (Party, Party)
    maintainer key._1

    observer participants

    let makeMarketPairId : IdPair -> Bool -> Id
        makeMarketPairId (baseId, quoteId) cleared
          = Id with signatories = fromList [exchange], label = instrumentName, version = 0
          where
            instrumentName = if cleared
                             then baseId.label <> quoteId.label <> "CLR"
                             else baseId.label <> quoteId.label

    nonconsuming choice Exchange_RequestCustodianRelationship : ContractId CustodianRelationshipRequest
      with
        custodian : Party
      controller exchange
      do createOrLookup CustodianRelationshipRequest with requester = exchange, role = ExchangeRole, ..

    nonconsuming choice Exchange_RequestCCPRelationship : ContractId CCPExchangeRelationshipRequest
      with
        ccp : Party
      controller exchange
      do
        createOrLookup CCPExchangeRelationshipRequest with requester = exchange, party = ccp, requesterRole = ExchangeRole, ..

    choice Exchange_InviteParticipant : (ContractId Exchange, ContractId ExchangeParticipantInvitation)
      with
        exchParticipant : Party
      controller exchange
      do
        participantInvitationCid <- create ExchangeParticipantInvitation with ..
        exchangeCid <- create this with participants = dedup $ exchParticipant :: participants
        return (exchangeCid, participantInvitationCid)

    choice Exchange_AddParticipant : ContractId Exchange
      with
        exchParticipant : Party
      controller exchange
      do
        create this with participants = dedup $ exchParticipant :: participants

    choice Exchange_RemovePair : ContractId Exchange
      with
        pair : IdPair
        clearedMarket : Bool
      controller exchange
      do
        (marketPairCid, marketPair) <- fetchByKey @MarketPair (makeMarketPairId pair clearedMarket)
        create ResetMarketRequest with ..
        archive marketPairCid
        create this with tokenPairs = delete pair tokenPairs

    choice Exchange_AddPair : (ContractId MarketPair, ContractId Exchange)
      with
        baseTokenId : Id
        baseType : AssetType
        quoteTokenId : Id
        quoteType : AssetType
        minQuantity : Decimal
        maxQuantity : Decimal
        clearedMarket : Bool
        defaultCCP : Optional Party
      controller exchange
      do
        baseQuantityPrecision <- (.quantityPrecision) <$> tokenOrUnderlying baseType baseTokenId
        quoteQuantityPrecision <- (.quantityPrecision) <$> tokenOrUnderlying quoteType quoteTokenId

        assertMsg ("minimum quantity should be rounded to at most " <> show baseQuantityPrecision <> " decimal places")
          $ roundBankers baseQuantityPrecision minQuantity == minQuantity

        assertMsg ("max quantity should be rounded to at most " <> show baseQuantityPrecision <> " decimal places")
          $ roundBankers baseQuantityPrecision maxQuantity == maxQuantity

        assertMsg "minimum quantity should be less than the maximum quantity"
          $ minQuantity < maxQuantity

        assertMsg "Pair must have different base and quote tokens" $ baseTokenId.label /= quoteTokenId.label

        let marketObservers = case defaultCCP of
               (Some x) -> x :: participants
               None     -> participants

        let newMarket = MarketPair with
              id = makeMarketPairId (baseTokenId, quoteTokenId) clearedMarket
              clearedMarket
              exchange
              description = baseTokenId.label <> " vs " <> quoteTokenId.label
              baseTokenId
              quoteTokenId
              calendarId = "1261007448"
              pricePrecision = quoteQuantityPrecision
              quantityPrecision = baseQuantityPrecision
              minQuantity = minQuantity : Decimal
              maxQuantity = maxQuantity : Decimal
              status = InstrumentActive
              observers = fromList marketObservers

        marketCid <- create newMarket

        (,) marketCid <$> if clearedMarket then do
          let ccp = fromSomeNote "defaultCCP must be provided for cleared markets" defaultCCP
          let clearedMarketPair = ((baseTokenId, quoteTokenId), ccp)
          create this with clearedMarkets = dedup $ clearedMarketPair :: clearedMarkets
        else
          create this with tokenPairs = dedup $ (baseTokenId, quoteTokenId) :: tokenPairs

    choice Exchange_AddBinaryOption : ContractId Exchange
      with
        binOptionId : Id
        quoteTokenId : Id
      controller exchange
      do
        (_, binOption) <- fetchByKey @BinaryOption binOptionId
        (_, quoteToken) <- fetchByKey @Token quoteTokenId
        create this with binOptions = dedup $ (binOptionId, quoteTokenId) :: binOptions

    nonconsuming choice Exchange_ApproveOrderRequest : ContractId Order
      with
        orderRequestCid : ContractId OrderRequest
        orderId : Int
      controller exchange
      do
        orderRequest <- fetch orderRequestCid
        let pair = orderRequest.order.pair
        assertMsg ("pair " <> pair._1.label <> "/" <> pair._2.label <> " is not supported by exchange")
          $ (pair `elem` tokenPairs) || (pair `elem` binOptions)

        exercise orderRequestCid OrderRequest_Ack with ..

    nonconsuming choice Exchange_ResetMarket : ContractId ResetMarketRequest
      with
        pair : IdPair
        clearedMarket : Bool
      controller exchange
      do
        create ResetMarketRequest with ..

template ResetMarketRequest
  with
    exchange : Party
    pair : IdPair
    clearedMarket : Bool
  where
    signatory exchange
    choice ResetMarketRequest_Ack : ()
      controller exchange
      do return ()
