module SwiftMessage.Message where

import SwiftMessage.Util
import SwiftMessage.Model.MT545
import SwiftMessage.Model.MT547
import SwiftMessage.Model.MT564
import SwiftMessage.Model.MT566
import DA.Set (Set)

data SwiftMessage = 
      MT545 (MT545Details)
    | MT547 (MT547Details)
    | MT564 (MT564Details)
    | MT566 (MT566Details)
  deriving (Eq, Show)

data SwiftMessageType = MT545_t | MT547_t | MT564_t | MT566_t
  deriving (Eq, Show)


-- This is the message that will be published from daml side onto ledger and consumed by swift adaptor
template SwiftOutboundMessage
  with 
    referenceId : Text
    provider : Party 
    consumer : Party
    observers : Set Party
    swiftMessage : SwiftMessage
    swiftMessageType : SwiftMessageType
    status : MessageStatus
  where 
    signatory provider
    observer observers

    key (provider, referenceId, swiftMessageType) : (Party, Text, SwiftMessageType)
    maintainer key._1

    controller consumer can
      RespondSuccess : ContractId SwiftOutboundMessage
        do create this with status = Processed

      RespondFailed : ContractId SwiftOutboundMessage
        with failedMessage : String
          do create this with status = Failed failedMessage
    
    controller observers can
      Finalize : ContractId SwiftOutboundMessage
        do create this with status = Finalized

    controller provider can
      Cancel : ()
        do pure ()
    
    controller provider can
      AddObservers : ContractId SwiftOutboundMessage
        with 
          newObserver : Set Party 
            do create this with observers = newObserver <> observers 