module SwiftMessage.Message where

import SwiftMessage.Util
import SwiftMessage.Model.MT535
import SwiftMessage.Model.MT940
import SwiftMessage.Model.MT544
import SwiftMessage.Model.MT545
import SwiftMessage.Model.MT546
import SwiftMessage.Model.MT547
import SwiftMessage.Model.MT548
import SwiftMessage.Model.MT564
import SwiftMessage.Model.MT566
import DA.Set (Set)
import DA.Optional (whenSome)

data SwiftMessage = 
      MT544 (MT544Details)
    | MT545 (MT545Details)
    | MT546 (MT546Details)
    | MT547 (MT547Details)
    | MT548 (MT548Details)
    | MT564 (MT564Details)
    | MT566 (MT566Details)
    | MT535 (MT535Details)
    | MT940 (MT940Details)
  deriving (Eq, Show)

data SwiftMessageType = MT544_t | MT545_t | MT546_t | MT547_t | MT548_sell_t | MT548_buy_t | MT564_t | MT566_t | MT535_t | MT940_t
  deriving (Eq, Show)


type RefId = Text
-- This is the message that will be published from daml side onto ledger and consumed by swift adaptor
template SwiftOutboundMessage
  with 
    referenceId : RefId
    provider : Party 
    consumer : Party
    observers : Set Party
    swiftMessage : SwiftMessage
    swiftMessageType : SwiftMessageType
    status : MessageStatus
  where 
    signatory provider
    observer observers

    key (provider, referenceId, swiftMessageType) : (Party, RefId, SwiftMessageType)
    maintainer key._1

    controller consumer can
      RespondSuccess : ContractId SwiftOutboundMessage
        do create this with status = Processed

      RespondFailed : ContractId SwiftOutboundMessage
        with failedMessage : String
          do create this with status = Failed failedMessage
    
    controller observers can
      Finalize : ContractId SwiftOutboundMessage
        do create this with status = Finalized

    controller provider can
      Cancel : ()
        do pure ()
    
    controller provider can
      AddObservers : ContractId SwiftOutboundMessage
        with 
          newObserver : Set Party 
            do create this with observers = newObserver <> observers 

finalizeSwiftMessage k = do
  cidOpt <- lookupByKey @SwiftOutboundMessage k
  whenSome cidOpt (\cid -> do exercise cid Finalize; pure ())