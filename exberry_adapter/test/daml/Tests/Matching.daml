module Tests.Matching where

import Tests.ExchangeTrade
import Setup

import Daml.Script
import DA.List
import DA.Optional

import Marketplace.Custodian
import Marketplace.Exchange
import Marketplace.ExchangeParticipant
import Marketplace.Transfer
import Marketplace.Trading
import Marketplace.Utils

import Utils
import DA.Time (seconds)

matchingTest : Script ()
matchingTest = getExistingParties >>= runMatchingTest

runMatchingTest : LedgerParties -> Script ()
runMatchingTest lp@LedgerParties{userAdmin = operator; btcIssuer = issuer; ..} = do
  -- Onboard and create relationships
  handleOnboarding lp

  -- Onboard investors
  onboardInvestor lp alice "Alice the Investor"
  onboardInvestor lp bob "Bob the Investor"

  let observers = [operator, public, custodian, exchange, issuer, alice, bob]

  testNumber <- getRandom 1000 10000

  debug $ "Setting ExberrySID to " <> show testNumber
  sidCid <- exchange `submit` createCmd ExberrySID with sid = testNumber, ..

  waitUntil 10.0 (isNone <$> queryContractId exchange sidCid)

  debug "Adding marketpair..."
  testTokenId <- createToken operator issuer ("DATEST" <> show testNumber) "Testing Coin" 2 observers
  usdTokenId <- createToken operator issuer "USD" "US Dollars" 2 observers

  let testPair = (testTokenId, usdTokenId)

  exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_AddPair
      with baseTokenId = testTokenId, baseType = TokenAsset, quoteTokenId = usdTokenId, quoteType = TokenAsset
           minQuantity = 0.01, maxQuantity = 10000.0, clearedMarket = False, defaultCCP = None

  sleep (seconds 2)

  debug "Setting up accounts..."
  aliceUsdId <- setupExchangeAccount lp usdTokenId 10000.0 alice
  bobTokenId <- setupExchangeAccount lp testTokenId 10.0 bob

  debug "Submitting Alice's order..."
  let aliceOrderId = testNumber + 1
  (_, debitRequestCid) <- alice `submit` exerciseByKeyCmd @ExchangeParticipant (exchange, operator, alice) ExchangeParticipant_PlaceBid
      with depositCids = [aliceUsdId], amount = 10000.0, pair = (testTokenId, usdTokenId), price = 10000.00
  custodian `submit` exerciseCmd debitRequestCid DepositDebitRequest_Approve

  (_, aliceOrder) <- waitQuery 10.0 (queryContractKey @Order exchange (exchange, aliceOrderId))

  debug "Submitting Bob's order..."
  let bobOrderId = aliceOrderId + 1
  (_, debitRequestCid) <- bob `submit` exerciseByKeyCmd @ExchangeParticipant (exchange, operator, bob) ExchangeParticipant_PlaceOffer
      with depositCids = [bobTokenId], amount = 10.0, pair = (testTokenId, usdTokenId), price = 10000.00
  custodian `submit` exerciseCmd debitRequestCid DepositDebitRequest_Approve

  debug "Waiting for execution..."
  waitUntil 10.0 $ do
    tradeSides <- filter (\(_, ts) -> ts.orderId `elem` [aliceOrderId, bobOrderId]) <$> query @TradeSide exchange
    return $ (length tradeSides) == 2

  debug "Test passed!"
