module Tests.Cancel where

import DA.Optional
import DA.Time (seconds)

import Tests.ExchangeTrade
import Setup

import Daml.Script

import Marketplace.Exchange
import Marketplace.ExchangeParticipant
import Marketplace.Trading
import Marketplace.Utils

import Utils

matchingTest : Script ()
matchingTest = getExistingParties >>= runMatchingTest

runMatchingTest : LedgerParties -> Script ()
runMatchingTest lp@LedgerParties{userAdmin = operator; btcIssuer = issuer; ..} = do
  -- Onboard and create relationships
  handleOnboarding lp

  -- Onboard investors
  onboardInvestor lp alice "Alice the Investor"
  onboardInvestor lp bob "Bob the Investor"

  let observers = [operator, public, custodian, exchange, issuer, alice, bob]

  testNumber <- getRandom 1000 10000

  debug $ "Setting ExberrySID to " <> show testNumber
  sidCid <- exchange `submit` createCmd ExberrySID with sid = testNumber, ..

  waitUntil 10.0 (isNone <$> queryContractId exchange sidCid)

  debug "Adding marketpair..."
  testTokenId <- createToken operator issuer ("DATEST" <> show testNumber) "Testing Coin" 2 observers
  usdTokenId <- createToken operator issuer "USD" "US Dollars" 2 observers

  let testPair = (testTokenId, usdTokenId)

  exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_AddPair
      with baseTokenId = testTokenId, baseType = TokenAsset, quoteTokenId = usdTokenId, quoteType = TokenAsset
           minQuantity = 0.01, maxQuantity = 10000.0, clearedMarket = False, defaultCCP = None

  sleep (seconds 5)

  debug "Setting up accounts..."
  aliceUsdId <- setupExchangeAccount DepositDirect lp custodian usdTokenId 10000.0 alice
  bobTokenId <- setupExchangeAccount DepositDirect lp custodian testTokenId 10.0 bob

  debug "Submitting Alice's order..."
  let aliceOrderId = testNumber + 1
  bidOrderRequestCid <- alice `submit` exerciseByKeyCmd @ExchangeParticipant (exchange, operator, alice) ExchangeParticipant_PlaceBid
      with depositCids = [aliceUsdId], amount = 10000.0, pair = (testTokenId, usdTokenId), price = 10000.00, optOrderId = Some aliceOrderId
  --
  -- aliceOrderCid <- exchange `submit` exerciseByKeyCmd @Exchange (operator, exchange) Exchange_ApproveOrderRequest
  --     with orderRequestCid = bidOrderRequestCid, orderId = 1

  (aliceOrderCid, aliceOrder) <- waitQuery 10.0 (queryContractKey @Order exchange (exchange, aliceOrderId))

  alice `submit` exerciseCmd aliceOrderCid Order_RequestCancel

  debug "Waiting for cancel..."
  waitUntil 10.0 $ do
    orders <- query @Order exchange
    return $ (length orders) == 0

  debug "Test passed!"
