-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module OperatorTrigger where

import DA.Action
import DA.Foldable hiding (elem, null)
import qualified DA.Set as Set
import DA.List

import Daml.Trigger

import Marketplace.Derivative
import Marketplace.Operator hiding (broker, custodian, exchange, investor)
import Marketplace.Onboarding
import Marketplace.Registry
import Marketplace.Token hiding (exchange)

import Utils

handleOperator : Trigger ()
handleOperator = Trigger
  { initialize = return ()
  , updateState = \_ -> return ()
  , rule = handleOperatorRule
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @Operator
                                              , registeredTemplate @PublicAppInfo
                                              , registeredTemplate @UserSession
                                              , registeredTemplate @UserRoleChangeRequest
                                              , registeredTemplate @Token
                                              , registeredTemplate @Derivative
                                              , registeredTemplate @RegisteredBroker
                                              , registeredTemplate @RegisteredCustodian
                                              , registeredTemplate @RegisteredExchange
                                              , registeredTemplate @RegisteredIssuer
                                              , registeredTemplate @RegisteredCCP
                                              , registeredTemplate @RegisteredInvestor ]
  , heartbeat = None
  }

-- |Create 'Operator' contract for self and automatically acknowledge all 'UserSession's
handleOperatorRule : Party -> TriggerA () ()
handleOperatorRule party = do
  debug "Running operator rule..."
  operators <- query @Operator
  unless (null operators) $ do
    let public = (snd . head $ operators).public
    appInfos <- query @PublicAppInfo
    when (null appInfos)
      $ dedupCreate PublicAppInfo with operator = party, ..
      >> debug "Setting up PublicAppInfo..."

    -- Acknowledge all active 'UserSession's
    userSessions <- query @UserSession
    forA_ userSessions \(cid,us) -> emitCommands [exerciseCmd cid UserSession_Ack] [toAnyContractId cid]
                                 >> debug ("Acknowledging user session: " <> show us)

    -- Process user role change requests
    userRoleRequests <- query @UserRoleChangeRequest
    forA_ userRoleRequests \(cid,rr) -> emitCommands [exerciseCmd cid UserRoleChangeRequest_Approve] [toAnyContractId cid]
                                     >> debug ("Acknowledging user role change request: " <> show rr)

    -- Add all current parties to 'Token' observers if 'isPublic'
    tokens      <- query @Token
    derivatives <- query @Derivative
    brokers     <- map ((.broker) . snd)    <$> query @RegisteredBroker
    custodians  <- map ((.custodian) . snd) <$> query @RegisteredCustodian
    exchanges   <- map ((.exchange) . snd)  <$> query @RegisteredExchange
    investors   <- map ((.investor) . snd)  <$> query @RegisteredInvestor
    ccps        <- map ((.ccp) . snd)       <$> query @RegisteredCCP
    issuers     <- map ((.issuer) . snd)    <$> query @RegisteredIssuer
    let parties = brokers <> custodians <> exchanges <> investors <> ccps <> issuers
    forA_ tokens (handleToken party parties)
    forA_ derivatives (handleDerivative party parties)


-- |Add all parties as observers to a 'Token'
handleDerivative : Party -> [Party] -> ContractPair Derivative -> TriggerA () ()
handleDerivative party parties (cid,der) = do
  let partiesToAdd = Set.difference (Set.fromList parties) der.observers
  unless (Set.null partiesToAdd || not der.isPublic )
    $ void $ emitExerciseCmd cid Derivative_AddObservers with
        party = party, newObservers = (Set.insert party partiesToAdd)
   >> debug "adding parties to token..."


-- |Add all parties as observers to a 'Token'
handleToken : Party -> [Party] -> ContractPair Token -> TriggerA () ()
handleToken party parties (cid,token) = do
  let partiesToAdd = Set.difference (Set.fromList parties) token.observers
  unless (Set.null partiesToAdd || not token.isPublic )
    $ void $ emitExerciseCmd cid Token_AddObservers with
        party = party, newObservers = (Set.insert party partiesToAdd)
   >> debug "adding parties to token..."
