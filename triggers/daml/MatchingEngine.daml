-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module MatchingEngine where

import DA.Finance.Types

import DA.Action
import DA.Foldable hiding (elem, null)
import DA.Set (fromList)
import DA.List
import Daml.Trigger

import Marketplace.Exchange
import Marketplace.Trading

import Utils

type CurrentOrderId = Int

handleMatching : Trigger CurrentOrderId
handleMatching = Trigger
  { initialize = return 0
  , updateState = \_ -> pure ()
  , rule = handleMatchingRule
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @OrderRequest
                                              , registeredTemplate @ResetMarketRequest
                                              , registeredTemplate @OrderCancelRequest
                                              , registeredTemplate @ClearedOrderRequest
                                              , registeredTemplate @ClearedOrderCancelRequest
                                              , registeredTemplate @ClearedOrder
                                              , registeredTemplate @Order ]
  , heartbeat = None
  }

handleMatchingRule : Party -> TriggerA CurrentOrderId ()
handleMatchingRule party = do
  debug "Running matching rule..."
  handleClearedOrders party

  -- Acknowledge all 'OrderRequest' and update current ID
  orderRequests <- query @OrderRequest
  forA_ orderRequests \(cid,_) -> do
    currentOrderId <- get
    emitExerciseCmd cid OrderRequest_Ack with orderId = currentOrderId
    debug "Acknowledging order"
    modify (+ 1)

  -- Acknowledge all 'OrderCancelRequest'
  orderCancelRequests <- query @OrderCancelRequest
  forA_ orderCancelRequests \(cid,_) -> emitExerciseCmd cid OrderCancel_Ack
                                     >> debug "Acknowledging order cancel"

  -- Check for matches on all 'Order'
  orders <- query @Order
  forA_ orders (handleOrder party orders)

  -- Handle all Clear Market Requests
  resetMarketRequests <- query @ResetMarketRequest
  forA_ resetMarketRequests (handleResetMarketRequest party)

handleResetMarketRequest : Party -> ContractPair ResetMarketRequest -> TriggerA CurrentOrderId ()
handleResetMarketRequest party (requestCid,ResetMarketRequest{..}) = do
  if clearedMarket
  then do
    orders <- filter (\(_,o) -> o.pair == pair) <$> query @ClearedOrder
    orderRequests <- filter (\(_,rq) -> rq.order.pair == pair) <$> query @ClearedOrderRequest
    orderCancelRequests <- filter (\(_,rq) -> rq.order.pair == pair) <$> query @ClearedOrderCancelRequest

    forA_ orders
      $ \(oCid,o) -> emitExerciseCmd oCid ClearedOrder_Cancel

    forA_ orderRequests
      $ \(oCid,o) -> emitExerciseCmd oCid ClearedOrderRequest_Reject

    -- Rejecting these since the orders should already be getting canceled by the above
    forA_ orderCancelRequests
      $ \(oCid,o) -> emitExerciseCmd oCid ClearedOrderCancel_Reject

  else do
    orders <- filter (\(_,o) -> o.pair == pair) <$> query @Order
    orderRequests <- filter (\(_,rq) -> rq.order.pair == pair) <$> query @OrderRequest
    orderCancelRequests <- filter (\(_,rq) -> rq.order.pair == pair) <$> query @OrderCancelRequest

    forA_ orders
      $ \(oCid,o) -> emitExerciseCmd oCid Order_Cancel

    forA_ orderRequests
      $ \(oCid,o) -> emitExerciseCmd oCid OrderRequest_Reject

    -- Rejecting these since the orders should already be getting canceled by the above
    forA_ orderCancelRequests
      $ \(oCid,o) -> emitExerciseCmd oCid OrderCancel_Reject

  void $ emitExerciseCmd requestCid ResetMarketRequest_Ack


-- |Check for crossing orders. If found, fill both orders. Matches by price.
handleOrder : Party -> [ContractPair Order] -> ContractPair Order -> TriggerA CurrentOrderId ()
handleOrder party orders (orderCid, order) = do
  debug $ "Handling order: " <> show order
  let oppositeBook  = sortOn (\(_,x) -> x.price) $ filter isOppositeOrder orders
      oppositeBook' = if not order.isBid
                      then reverse oppositeBook
                      else oppositeBook
      crossing      = takeWhile (isCrossing (orderCid,order)) oppositeBook'

  unless (null crossing) $ fill (orderCid, order) (head crossing)

  where
    isOppositeOrder : ContractPair Order -> Bool
    isOppositeOrder (opoCid, opo) = opoCid /= orderCid
                                 && opo.isBid == (not order.isBid)
                                 && opo.pair == order.pair

    isCrossing : ContractPair Order -> ContractPair Order -> Bool
    isCrossing (_, aggressive) (_, passive)
      | passive.exchParticipant == aggressive.exchParticipant = False
      | aggressive.isBid = passive.price <= aggressive.price
      | otherwise        = passive.price >= aggressive.price

    fill : ContractPair Order -> ContractPair Order -> TriggerA CurrentOrderId ()
    fill (aggressiveCid, aggressive) (passiveCid, passive) = do

      let fillQty   = min passive.qty aggressive.qty
          fillPrice = passive.price

      time <- getTime

      emitExerciseCmd aggressiveCid Order_Fill with
          fillQty, fillPrice
          counterOrderId = passive.orderId
          counterParty = passive.exchParticipant
          timeMatched = show time

      emitExerciseCmd passiveCid Order_Fill with
          fillQty, fillPrice
          counterOrderId = aggressive.orderId
          counterParty = aggressive.exchParticipant
          timeMatched = show time

      return ()

handleClearedOrders : Party -> TriggerA CurrentOrderId ()
handleClearedOrders party = do
  debug "Running matching rule..."

  -- Acknowledge all 'ClearedOrderRequest' and update current ID
  orderRequests <- query @ClearedOrderRequest
  forA_ orderRequests \(cid,_) -> do
    currentClearedOrderId <- get
    emitExerciseCmd cid ClearedOrderRequest_Ack with orderId = currentClearedOrderId
    debug "Acknowledging order"
    modify (+ 1)

  -- Acknowledge all 'ClearedOrderCancelRequest'
  orderCancelRequests <- query @ClearedOrderCancelRequest
  forA_ orderCancelRequests \(cid,_) -> emitExerciseCmd cid ClearedOrderCancel_Ack
                                     >> debug "Acknowledging order cancel"

  -- Check for matches on all 'ClearedOrder'
  orders <- query @ClearedOrder
  forA_ orders (handleClearedOrder party orders)

-- |Check for crossing orders. If found, fill both orders. Matches by price.
handleClearedOrder : Party -> [ContractPair ClearedOrder] -> ContractPair ClearedOrder -> TriggerA CurrentOrderId ()
handleClearedOrder party orders (orderCid, order) = do
  debug $ "Handling order: " <> show order
  let oppositeBook  = sortOn (\(_,x) -> x.price) $ filter isOppositeClearedOrder orders
      oppositeBook' = if not order.isBid
                      then reverse oppositeBook
                      else oppositeBook
      crossing      = takeWhile (isCrossing (orderCid,order)) oppositeBook'

  unless (null crossing) $ fill (orderCid, order) (head crossing)

  where
    isOppositeClearedOrder : ContractPair ClearedOrder -> Bool
    isOppositeClearedOrder (opoCid, opo) = opoCid /= orderCid
                                 && opo.isBid == (not order.isBid)
                                 && opo.pair == order.pair

    isCrossing : ContractPair ClearedOrder -> ContractPair ClearedOrder -> Bool
    isCrossing (_, aggressive) (_, passive)
      | passive.exchParticipant == aggressive.exchParticipant = False
      | aggressive.isBid = passive.price <= aggressive.price
      | otherwise        = passive.price >= aggressive.price

    fill : ContractPair ClearedOrder -> ContractPair ClearedOrder -> TriggerA CurrentOrderId ()
    fill (aggressiveCid, aggressive) (passiveCid, passive) = do

      let fillQty   = min passive.qty aggressive.qty
          fillPrice = passive.price

      time <- getTime

      emitExerciseCmd aggressiveCid ClearedOrder_Fill with
          fillQty, fillPrice

      emitExerciseCmd passiveCid ClearedOrder_Fill with
          fillQty, fillPrice

      let instrumentLabel = order.pair._1.label <> order.pair._2.label <> "CLR"
          instrumentId = Id with signatories = fromList [party], label = instrumentLabel, version = 0

      let (buyer,seller) = determineParticipants aggressive passive

      dedupCreate ClearedTrade with
          ccp = order.ccp
          instrument = instrumentId
          exchange = party
          eventId = -1
          timeMatched = (show time)
          pair = order.pair
          trackingNumber = -1
          buyer = buyer.exchParticipant
          buyerOrderId = buyer.orderId
          seller = seller.exchParticipant
          sellerOrderId = seller.orderId
          matchId = -1
          executedQuantity = fillQty
          executedPrice = fillPrice

      return ()

-- (Buyer,Seller)
determineParticipants : ClearedOrder -> ClearedOrder -> (ClearedOrder, ClearedOrder)
determineParticipants order1 order2
  | order1.isBid = (order1,order2)
  | otherwise    = (order2,order1)
