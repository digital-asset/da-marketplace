-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module MatchingEngine where

import DA.Action
import DA.Foldable hiding (elem, null, length)
import DA.List
import Daml.Trigger

import qualified Marketplace.Trading.Model as Order
import qualified Marketplace.Trading.Service as Service
import qualified Marketplace.Trading.Matching.Service as Matching

import Utils

type CurrentOrderId = Int

handleMatching : Trigger CurrentOrderId
handleMatching = Trigger
  { initialize = return 0
  , updateState = \_ -> pure ()
  , rule = handleMatchingRule
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @Service.CreateOrderRequest
                                              , registeredTemplate @Service.CancelOrderRequest
                                              , registeredTemplate @Order.T ]
  , heartbeat = None
  }

handleMatchingRule : Party -> TriggerA CurrentOrderId ()
handleMatchingRule party = do
  debug "Running matching rule..."

  -- Acknowledge all 'Order.Request' and update current ID
  orderRequests <- query @Service.CreateOrderRequest
  forA_ orderRequests \(cid,_) -> do
    currentOrderId <- get
    emitExerciseCmd cid Service.AcknowledgeRequest with providerOrderId = show currentOrderId
    debug "Acknowledging order"
    modify (+1)

  -- Acknowledge all 'Order.CancelRequest'
  orderCancelRequests <- query @Service.CancelOrderRequest
  forA_ orderCancelRequests \(cid,_) -> emitExerciseCmd cid Service.AcknowledgeCancel
                                     >> debug "Acknowledging order cancel"

  -- Check for matches on all 'Order'
  orders <- query @Order.T
  forA_ orders (handleOrder party orders)

-- |Check for crossing orders. If found, fill both orders. Matches by price.
handleOrder : Party -> [ContractPair Order.T] -> ContractPair Order.T -> TriggerA CurrentOrderId ()
handleOrder party orders op@(orderCid, order) = do
  debug $ "Handling order: " <> show order

  case order.status of
    Order.PendingExecution -> processOrder op
    Order.PartiallyExecuted -> processOrder op
    _ ->  debug $ "Ignoring order in status: " <> show order.status

  where
    processOrder : ContractPair Order.T -> TriggerA CurrentOrderId ()
    processOrder (orderCid, order) = do
      let oppositelimitOrders = sortOn (\(_,x) -> case x.details.orderType of
            Order.Limit price -> price
            _ -> error "How can I get here?") $ filter islimitOrder $ filter isOppositeOrder orders
          oppositelimitOrders' = case order.details.side of
            Order.Buy  -> oppositelimitOrders
            Order.Sell -> reverse oppositelimitOrders
          oppositeMarketOrders = sortOn (\(_, o) -> Down o.details.asset.quantity) $ filter (\(_, o) -> o.details.orderType == Order.Market) $ filter isOppositeOrder orders
          crossing      = takeWhile (isCrossingLimitOrders (orderCid,order)) oppositelimitOrders'

      case order.details.orderType of
        Order.Market -> unless (null oppositelimitOrders') $ fill (orderCid, order) (head oppositelimitOrders')
        Order.Limit price -> if (not $ null oppositeMarketOrders)
          then fill (orderCid, order) (head oppositeMarketOrders)
          else unless (null crossing) $ fill (orderCid, order) (head crossing)

    isOppositeOrder : ContractPair Order.T -> Bool
    isOppositeOrder (opoCid, opo) = opoCid /= orderCid
                                 && opo.customer /= order.customer
                                 && opo.details.side /= order.details.side
                                 && opo.details.asset.id.label == order.details.asset.id.label
                                 && opo.status `elem` [Order.PendingExecution, Order.PartiallyExecuted]


    isCrossingLimitOrders : ContractPair Order.T -> ContractPair Order.T -> Bool
    isCrossingLimitOrders (_, aggressive) (_, passive) = do
      case (aggressive.details.orderType, passive.details.orderType) of
        (Order.Limit aggressivePrice, Order.Limit passivePrice) ->
          if aggressive.details.side == Order.Buy
            then aggressivePrice >= passivePrice
            else aggressivePrice <= passivePrice
        _ -> False

    islimitOrder : ContractPair Order.T -> Bool
    islimitOrder (_, order) = case order.details.orderType of
      Order.Limit _ -> True
      _ -> False

    fill : ContractPair Order.T -> ContractPair Order.T -> TriggerA CurrentOrderId ()
    fill (aggressiveCid, aggressive) (passiveCid, passive) = do
      debug $ "Matching order: " <> show aggressive.details.id.label <> " to : " <> show passive.details.id.label

      let price = case (aggressive.details.orderType, passive.details.orderType) of
            (Order.Limit price, Order.Market) -> price
            (Order.Market, Order.Limit price) -> price
            (Order.Limit aggressivePrice, Order.Limit passivePrice) -> if aggressive.details.side == Order.Buy then aggressivePrice else passivePrice
            (_, _) -> error "Shouldn't be here - can't match two market orders together"
          makerOrderId = passive.details.id.label
          takerOrderId = aggressive.details.id.label
          quantity = min passive.details.asset.quantity aggressive.details.asset.quantity

      time <- getTime

      let execution = Order.Execution with matchId = "matchId"; makerOrderId; takerOrderId; quantity; price; timestamp = show time

      emitCommands [exerciseByKeyCmd @Matching.Service aggressive.provider Matching.MatchOrders with execution] [toAnyContractId aggressiveCid, toAnyContractId passiveCid]

      return ()
