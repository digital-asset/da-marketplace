-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module MatchingEngine where

import DA.Action
import DA.Foldable hiding (elem, null)
import DA.List
import Daml.Trigger

import qualified Marketplace.Trading.Order as Order

import Utils

type CurrentOrderId = Int

handleMatching : Trigger CurrentOrderId
handleMatching = Trigger
  { initialize = return 0
  , updateState = \_ -> pure ()
  , rule = handleMatchingRule
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @Order.Request
                                              , registeredTemplate @Order.CancelRequest
                                              , registeredTemplate @Order.T ]
  , heartbeat = None
  }

handleMatchingRule : Party -> TriggerA CurrentOrderId ()
handleMatchingRule party = do
  debug "Running matching rule..."

  -- Acknowledge all 'Order.Request' and update current ID
  orderRequests <- query @Order.Request
  forA_ orderRequests \(cid,_) -> do
    currentOrderId <- get
    emitExerciseCmd cid Order.AckRequest with orderId = currentOrderId
    debug "Acknowledging order"
    modify (+ 1)

  -- Acknowledge all 'Order.CancelRequest'
  orderCancelRequests <- query @Order.CancelRequest
  forA_ orderCancelRequests \(cid,_) -> emitExerciseCmd cid Order.AckCancel
                                     >> debug "Acknowledging order cancel"

  -- Check for matches on all 'Order'
  orders <- query @Order.T
  forA_ orders (handleOrder party orders)

-- |Check for crossing orders. If found, fill both orders. Matches by price.
handleOrder : Party -> [ContractPair Order.T] -> ContractPair Order.T -> TriggerA CurrentOrderId ()
handleOrder party orders (orderCid, order) = do
  debug $ "Handling order: " <> show order
  let oppositeBook  = sortOn (\(_,x) -> x.price) $ filter isOppositeOrder orders
      oppositeBook' = if not order.isBid
                      then reverse oppositeBook
                      else oppositeBook
      crossing      = takeWhile (isCrossing (orderCid,order)) oppositeBook'

  unless (null crossing) $ fill (orderCid, order) (head crossing)

  where
    isOppositeOrder : ContractPair Order.T -> Bool
    isOppositeOrder (opoCid, opo) = opoCid /= orderCid
                                 && opo.isBid == (not order.isBid)
                                 && opo.pair == order.pair

    isCrossing : ContractPair Order.T -> ContractPair Order.T -> Bool
    isCrossing (_, aggressive) (_, passive)
      | passive.exchParticipant == aggressive.exchParticipant = False
      | aggressive.isBid = passive.price <= aggressive.price
      | otherwise        = passive.price >= aggressive.price

    fill : ContractPair Order.T -> ContractPair Order.T -> TriggerA CurrentOrderId ()
    fill (aggressiveCid, aggressive) (passiveCid, passive) = do

      let fillQty   = min passive.qty aggressive.qty
          fillPrice = passive.price

      time <- getTime

      emitExerciseCmd aggressiveCid Order.Fill with
          fillQty, fillPrice
          counterOrderId = passive.orderId
          counterParty = passive.exchParticipant
          timestamp = show time

      emitExerciseCmd passiveCid Order.Fill with
          fillQty, fillPrice
          counterOrderId = aggressive.orderId
          counterParty = aggressive.exchParticipant
          timestamp = show time

      return ()
