module ExchangeTrigger where

import DA.Foldable
import Daml.Trigger

import Marketplace.Exchange
import qualified Marketplace.Trading.Trade as Trade
import qualified Marketplace.BinaryOption as BinaryOption

import Utils

handleExchange : Trigger ()
handleExchange = Trigger
  { initialize = return ()
  , updateState = \_ -> pure ()
  , rule = handleExchangeRule
  , registeredTemplates = RegisteredTemplates  [ registeredTemplate @Trade.T
                                               , registeredTemplate @BinaryOption.Settled ]
  , heartbeat = None
  }


handleExchangeRule : Party -> TriggerA () ()
handleExchangeRule party = do
  debug "Running exchange rule..."

  -- |Settle all 'Trade.T' and 'SettledBinaryOption'
  tradeSides <- query @Trade.T
  binaryOptions <- query @BinaryOption.Settled
  forA_ tradeSides (handleTradeSide party binaryOptions)

  -- Accept all 'ExchangeParticipantInvitationRequest'
  participantRequests <- query @ExchangeParticipantInvitationRequest
  forA_ participantRequests
    $ \(cid,rq) -> emitExerciseCmd cid ExchangeParticipantInvitationRequest_Accept
               >> debug ("Approving participant request from " <> show rq.participant)


handleTradeSide : Party ->  [ContractPair BinaryOption.Settled] -> ContractPair Trade.T -> TriggerA () ()
handleTradeSide party  options (cid,tradeSide) = do
  debug $ "Handling trade side: " <> show tradeSide
  if not $ tradeSide.isBinaryOption
  then emitExerciseCmd cid Trade.Settle >> pure ()
  else do
    let settledOptions = filter (\(_,opt) -> opt.id == tradeSide.pair._1) options
    forA_ settledOptions
      $ \(soCid,_) -> emitExerciseCmd cid Trade.SettleBinaryOption with settledBinOptionCid = soCid
