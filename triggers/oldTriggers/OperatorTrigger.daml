-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module OperatorTrigger where

import DA.Action
import DA.Foldable hiding (elem, null)
import qualified DA.Next.Set as Set

import Daml.Trigger

import qualified Marketplace.Operator as Operator
import qualified Marketplace.UserSession as UserSession
import qualified Marketplace.Registry.Broker as Registry (Broker, broker)
import qualified Marketplace.Registry.Custodian as Registry (Custodian, custodian)
import qualified Marketplace.Registry.Exchange as Registry (Exchange, exchange)
import qualified Marketplace.Registry.Investor as Registry (Investor, investor)
import qualified Marketplace.Token as Token

import Utils

handleOperator : Trigger ()
handleOperator = Trigger
  { initialize = return ()
  , updateState = \_ -> return ()
  , rule = handleOperatorRule
  , registeredTemplates = RegisteredTemplates [ registeredTemplate @Operator.T
                                              , registeredTemplate @UserSession.T
                                              , registeredTemplate @Token.T
                                              , registeredTemplate @Registry.Broker
                                              , registeredTemplate @Registry.Custodian
                                              , registeredTemplate @Registry.Exchange
                                              , registeredTemplate @Registry.Investor ]
  , heartbeat = None
  }

-- |Create 'Operator' contract for self and automatically acknowledge all 'UserSession's
handleOperatorRule : Party -> TriggerA () ()
handleOperatorRule party = do
  debug "Running operator rule..."

  -- Acknowledge all active 'UserSession's
  userSessions <- query @UserSession.T
  forA_ userSessions \(cid,us) -> emitCommands [exerciseCmd cid UserSession.Ack] [toAnyContractId cid]
                               >> debug ("Acknowledging user session: " <> show us)

  -- Add all current parties to 'Token' observers if 'isPublic'
  tokens     <- query @Token.T
  brokers    <- map (Registry.broker . snd)    <$> query @Registry.Broker
  custodians <- map (Registry.custodian . snd) <$> query @Registry.Custodian
  exchanges  <- map (Registry.exchange . snd)  <$> query @Registry.Exchange
  investors  <- map (Registry.investor . snd)  <$> query @Registry.Investor
  let parties = brokers <> custodians <> exchanges <> investors
  forA_ tokens (handleToken party parties)

-- |Add all parties as observers to a 'Token'
handleToken : Party -> [Party] -> ContractPair Token.T -> TriggerA () ()
handleToken party parties (cid,token) = do
  let partiesToAdd = Set.difference (Set.fromList parties) token.observers
  unless (Set.null partiesToAdd || not token.isPublic )
    $ void $ emitExerciseCmd cid Token.AddObservers with
        party = party, newObservers = (Set.insert party partiesToAdd)
   >> debug "adding parties to token..."
