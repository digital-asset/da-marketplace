--
-- Copyright (c) 2021, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module ContingentClaims.Observable where

import Prelude hiding (pure)
import Daml.Control.Arrow (Kleisli(..))

type Key = Text
type Param = Text
type Observable f t x = (Point f t x , Number (f t x), Divisible (f t x))

-- | This is either `time ≥ t | f t x ≤ f t x`
data Inequality f t x = TimeGte t | Lte (f t x, f t x)

-- | Observable that is true on the passed time. i.e. identity for the time observable.
at : t -> Inequality f t x
at t = TimeGte t

infix 4 <=
-- | `import Prelude hiding ((<=))` in order to use this.
(<=) : f t x -> f t x -> Inequality f t x
(<=) = curry Lte

deriving instance (Eq t, Eq (f t x)) => Eq (Inequality f t x)

deriving instance (Show t, Show (f t x)) => Show (Inequality f t x)

class Point f t x where
  pure : x -> f t x
  observe : Key -> f t x

class Interpret f where
  -- | Reify the `Observable` into a Kleisli function. 
  -- The function is only total when the first argument is too (typically it will fail on `t` > today).
  eval : (Number x, Divisible x, Action m) => (Key -> t -> m x) -> f t x -> Kleisli m t x
  -- | Reify the `Observable.Inequality` into a Kleisli function.
  compare : (Ord t, Ord x, Number x, Divisible x, Action m) => (Key -> t -> m x) -> Inequality f t x -> Kleisli m t Bool
  -- | The functor map operation _and_ also map any parametrs to keys.
  -- For example, could map the param "spot" to an ISIN code "GB123456789".
  -- Also contra-maps time parameter, i.e. from relative time values to absolute ones.
  --
  -- @ mapParams identity = fmap
  --
  mapParams : (t -> i)
            -> (Param -> Key)
            -> (Param -> Decimal)
            -> f i Param -> f t Decimal
