{-# LANGUAGE NoDamlSyntax #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE NoOverloadedStrings #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE AllowAmbiguousTypes #-}
{-# OPTIONS_GHC -Wno-unused-imports -Wno-missing-methods #-}
module Daml.Data.IOr (
        module Daml.Data.IOr
    ) where
import Pkg_046a0de1374de97a9881df1e91c837cbc8b6a64d3522ecd297ab1b7ee95b9de4.DA.Bifunctor
import Pkg_046a0de1374de97a9881df1e91c837cbc8b6a64d3522ecd297ab1b7ee95b9de4.DA.Internal.Record
import CurrentSdk.Data.String
import CurrentSdk.GHC.Err
data IOr a b = Left a | Right b | Both {left :: a, right :: b}
instance (forall a b.
          () =>
          Pkg_046a0de1374de97a9881df1e91c837cbc8b6a64d3522ecd297ab1b7ee95b9de4.DA.Internal.Record.HasField "right" ((Daml.Data.IOr.IOr a) b) b)
instance (forall a b.
          () =>
          Pkg_046a0de1374de97a9881df1e91c837cbc8b6a64d3522ecd297ab1b7ee95b9de4.DA.Internal.Record.HasField "left" ((Daml.Data.IOr.IOr a) b) a)
instance (() =>
          Pkg_046a0de1374de97a9881df1e91c837cbc8b6a64d3522ecd297ab1b7ee95b9de4.DA.Bifunctor.Bifunctor Daml.Data.IOr.IOr) where
  bimap _ _ _
    = (CurrentSdk.GHC.Err.error
         (CurrentSdk.Data.String.fromString "data-dependency stub"))
  first _ _
    = (CurrentSdk.GHC.Err.error
         (CurrentSdk.Data.String.fromString "data-dependency stub"))
  second _ _
    = (CurrentSdk.GHC.Err.error
         (CurrentSdk.Data.String.fromString "data-dependency stub"))